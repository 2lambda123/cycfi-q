antoraSearch.initSearch(lunr, {"index":{"version":"2.3.9","fields":["title","name","text","component"],"fieldVectors":[["title/1",[]],["name/1",[0,0.955]],["text/1",[]],["component/1",[1,0.416]],["title/2-1",[2,57.269]],["name/2-1",[]],["text/2-1",[]],["component/2-1",[]],["title/2-2",[3,46.271]],["name/2-2",[]],["text/2-2",[]],["component/2-2",[]],["title/2-3",[4,33.48,5,45.196]],["name/2-3",[]],["text/2-3",[]],["component/2-3",[]],["title/2-4",[6,42.4]],["name/2-4",[]],["text/2-4",[]],["component/2-4",[]],["title/2-5",[7,30.3,8,18.168]],["name/2-5",[]],["text/2-5",[]],["component/2-5",[]],["title/2-6",[9,46.271]],["name/2-6",[]],["text/2-6",[]],["component/2-6",[]],["title/2-7",[10,32.389]],["name/2-7",[]],["text/2-7",[]],["component/2-7",[]],["title/2-8",[11,31.147]],["name/2-8",[]],["text/2-8",[]],["component/2-8",[]],["title/2-9",[12,35.395]],["name/2-9",[]],["text/2-9",[]],["component/2-9",[]],["title/2-10",[13,38.35]],["name/2-10",[]],["text/2-10",[]],["component/2-10",[]],["title/2-11",[14,57.269]],["name/2-11",[]],["text/2-11",[]],["component/2-11",[]],["title/2-12",[15,18.786,16,20.034]],["name/2-12",[]],["text/2-12",[]],["component/2-12",[]],["title/2",[17,48.874]],["name/2",[17,1.009]],["text/2",[1,1.134,2,1.75,3,0.994,4,1.181,5,1.009,6,1.96,7,0.677,8,1.133,9,2.3,10,2.103,11,1.936,12,1.636,13,2.155,14,0.334,15,1.779,16,1.433,17,0.809,18,0.334,19,1.678,20,2.884,21,0.501,22,0.389,23,0.15,24,0.435,25,0.618,26,0.568,27,0.766,28,0.786,29,0.756,30,0.97,31,1.083,32,0.318,33,0.248,34,2.439,35,1.056,36,0.665,37,0.555,38,0.334,39,0.305,40,0.618,41,0.305,42,0.356,43,0.481,44,0.356,45,0.231,46,2.364,47,0.356,48,0.731,49,1.102,50,0.389,51,0.305,52,2.036,53,0.305,54,0.389,55,0.809,56,0.305,57,0.356,58,0.356,59,0.389,60,0.389,61,0.318,62,0.389,63,0.389,64,0.65,65,0.389,66,0.389,67,2.476,68,0.285,69,1.558,70,0.692,71,0.295,72,0.334,73,0.389,74,0.389,75,1.691,76,0.902,77,0.356,78,0.356,79,0.618,80,0.264,81,0.356,82,0.285,83,0.356,84,0.356,85,0.318,86,0.839,87,0.389,88,0.692,89,1.23,90,0.389,91,1.011,92,1.354,93,3.575,94,0.305,95,1.414,96,1.652,97,0.389,98,1.666,99,1.666,100,1.309,101,0.618,102,0.389,103,0.334,104,0.285,105,0.334,106,0.295,107,0.356,108,0.948,109,0.389,110,0.389,111,0.472,112,0.305,113,0.356,114,0.392,115,0.65,116,0.948,117,1.277,118,0.756,119,0.389,120,0.389,121,0.539,122,0.491,123,0.318,124,0.423,125,0.248,126,0.389,127,0.334,128,0.224,129,1.228,130,0.277,131,0.65,132,0.618,133,0.356,134,0.389,135,0.758,136,0.389,137,0.555,138,0.692,139,0.389,140,0.318,141,0.863,142,1.319,143,0.809,144,0.389,145,0.654,146,0.264,147,1.508,148,0.476,149,1.39,150,1.144,151,0.295,152,0.812,153,0.501,154,1.33,155,0.258,156,0.847,157,0.248,158,0.822,159,0.356,160,0.657,161,0.734,162,0.786,163,0.501,164,0.456,165,1.474,166,0.277,167,0.809,168,0.926,169,0.949,170,1.585,171,0.334,172,0.334,173,0.836,174,0.809,175,0.318,176,0.204,177,0.239,178,0.456,179,0.305,180,0.417,181,0.865,182,0.769,183,0.389,184,0.389,185,2.071,186,0.334,187,0.389,188,0.277,189,0.187,190,0.353,191,0.277,192,0.417,193,0.389,194,0.318,195,0.356,196,0.235,197,0.318,198,0.318,199,0.356,200,0.305,201,0.356,202,0.318,203,0.27,204,0.248,205,0.277,206,0.295,207,0.617,208,0.305,209,0.27,210,1.421,211,0.27,212,0.472,213,1.088,214,0.356,215,0.65,216,0.731,217,0.356,218,0.389,219,0.389,220,0.356,221,0.491,222,0.334,223,0.235,224,0.305,225,0.305,226,0.389,227,0.497,228,0.756,229,0.221,230,1.906,231,0.356,232,0.555,233,1.426,234,0.389,235,0.756,236,0.756,237,0.389,238,0.318,239,1.009,240,0.389,241,0.389,242,0.692,243,0.501,244,0.305,245,0.285,246,0.501,247,0.318,248,0.356,249,0.243,250,0.356,251,0.356,252,0.692,253,0.334,254,0.356,255,0.243,256,0.305,257,0.356,258,0.264,259,0.248,260,0.318,261,0.756,262,0.389,263,0.356,264,0.389,265,0.389,266,0.389,267,0.318,268,0.224,269,0.106,270,0.389,271,0.756,272,0.356,273,0.389,274,0.389,275,0.389,276,0.318,277,0.389,278,0.356,279,0.389,280,0.389,281,0.389,282,0.389,283,0.389,284,0.389,285,0.948,286,0.318,287,2.822,288,0.356,289,2.776,290,0.356,291,3.669,292,1.881,293,0.692,294,0.692,295,0.356,296,0.356,297,0.356,298,0.356,299,0.356,300,0.356,301,0.356,302,0.356,303,0.356,304,0.356,305,0.389,306,0.389,307,0.389,308,0.356,309,0.295,310,0.809,311,0.356,312,0.318,313,0.356,314,0.389,315,0.334,316,0.295,317,0.305,318,0.506,319,0.389,320,0.258,321,0.356,322,0.334,323,0.285,324,0.389,325,0.334,326,0.224,327,0.285,328,0.902,329,0.593,330,0.248,331,0.539,332,0.863,333,0.852,334,0.137,335,0.389,336,1.43,337,1.43,338,0.836,339,0.677,340,0.389,341,0.182,342,0.389,343,0.285,344,0.786,345,0.692,346,0.442,347,0.277,348,0.501,349,0.865,350,0.397,351,0.756,352,0.618,353,1.102,354,0.258,355,0.184,356,0.334,357,0.334,358,0.334,359,0.692,360,0.285,361,0.285,362,0.305,363,0.231,364,0.356,365,0.305,366,0.389,367,0.239,368,0.389,369,0.295,370,0.65,371,0.389,372,0.356,373,0.389,374,0.472,375,0.389,376,0.258,377,0.539,378,0.389,379,0.389,380,0.334,381,0.389,382,0.389,383,0.389,384,0.756,385,0.756,386,0.356,387,0.295,388,0.389,389,0.224,390,0.295,391,0.295,392,0.239,393,0.389,394,0.389,395,0.318,396,0.389,397,0.389,398,0.389,399,0.334,400,0.389,401,0.389,402,0.334,403,0.389,404,0.389,405,0.389,406,0.295,407,0.318,408,0.389,409,0.305,410,0.305,411,0.305,412,0.305,413,0.305,414,0.305,415,0.27,416,0.305,417,0.305,418,0.305,419,0.305,420,0.305]],["component/2",[1,0.416]],["title/3-1",[421,60.975]],["name/3-1",[]],["text/3-1",[]],["component/3-1",[]],["title/3-2",[422,40.397,423,38.759]],["name/3-2",[]],["text/3-2",[]],["component/3-2",[]],["title/3-3",[424,60.975]],["name/3-3",[]],["text/3-3",[]],["component/3-3",[]],["title/3",[1,9.856,19,17.727,20,18.206,35,16.882]],["name/3",[425,0.932]],["text/3",[1,1.147,4,0.816,11,0.563,12,0.64,13,0.693,15,1.163,16,0.488,17,0.883,19,1.666,20,2.473,24,0.693,27,0.836,28,0.858,35,2.58,36,2.666,37,0.883,38,1.035,39,0.945,40,0.985,44,1.102,48,0.798,55,0.883,69,0.726,75,0.829,82,1.62,86,1.56,88,1.102,106,2.316,108,0.798,112,2.972,121,0.858,122,0.781,123,0.985,124,0.673,125,1.946,128,0.693,129,0.726,131,1.898,132,1.806,156,0.585,158,2.578,161,0.617,164,0.726,165,1.405,166,0.858,170,1.355,180,2.439,182,0.647,196,0.726,203,0.836,207,0.673,210,0.739,213,0.752,259,1.405,260,0.985,263,1.102,308,2.021,309,2.868,310,0.883,318,2.506,326,0.693,328,0.985,330,0.766,349,0.945,350,2.61,357,1.035,358,1.035,359,1.102,361,0.883,367,1.355,376,0.798,377,1.574,387,0.912,409,0.945,410,0.945,411,0.945,412,2.4,413,1.733,414,1.733,415,0.836,416,0.945,417,0.945,418,1.733,419,1.733,420,1.733,422,0.985,423,0.945,424,2.021,426,1.203,427,1.405,428,0.816,429,1.203,430,0.647,431,1.102,432,0.798,433,1.102,434,1.203,435,0.945,436,0.912,437,1.203,438,0.945,439,1.203,440,1.464,441,0.945,442,0.945,443,1.203,444,1.203,445,1.035,446,0.945,447,1.203,448,0.945,449,0.781,450,1.035,451,1.203,452,1.203,453,0.985,454,0.816,455,1.203,456,2.021,457,2.207,458,2.207,459,0.945,460,1.203,461,1.035,462,0.945,463,1.203,464,1.898,465,3.098,466,0.836,467,1.203,468,0.985,469,0.985,470,1.035,471,0.726,472,0.836,473,0.883,474,0.836,475,0.752,476,1.711,477,3.056,478,1.672,479,1.035,480,1.845,481,0.945,482,1.672,483,2.377,484,0.985,485,1.62,486,0.985,487,0.858,488,0.945,489,0.945,490,1.203,491,0.858,492,1.464,493,0.912,494,0.945,495,1.035,496,1.035,497,1.574,498,2.712,499,0.985,500,0.816,501,0.945,502,0.985,503,0.985,504,0.985,505,1.985,506,0.985,507,0.985,508,0.836,509,1.379,510,0.912,511,0.766,512,0.883,513,1.876,514,2.4,515,0.816,516,1.62,517,1.62,518,1.203,519,1.102,520,0.798,521,1.203,522,1.035,523,2.207,524,1.203,525,1.035,526,1.035,527,1.203,528,1.203,529,0.912,530,1.203,531,1.102,532,1.203,533,1.203,534,2.207,535,1.102,536,1.102,537,0.945,538,1.102,539,1.203,540,0.714,541,1.102,542,1.035,543,1.203,544,1.203,545,1.203,546,1.035,547,0.883,548,0.945,549,1.203,550,1.203,551,1.203,552,1.203]],["component/3",[1,0.416]],["title/4-1",[325,42.449,553,42.449]],["name/4-1",[]],["text/4-1",[]],["component/4-1",[]],["title/4-2",[19,26.902,142,37.395]],["name/4-2",[]],["text/4-2",[]],["component/4-2",[]],["title/4-3",[389,38.35]],["name/4-3",[]],["text/4-3",[]],["component/4-3",[]],["title/4-4",[553,42.449,554,49.367]],["name/4-4",[]],["text/4-4",[]],["component/4-4",[]],["title/4-5",[310,48.874]],["name/4-5",[]],["text/4-5",[]],["component/4-5",[]],["title/4-6",[180,36.773]],["name/4-6",[]],["text/4-6",[]],["component/4-6",[]],["title/4-7",[36,29.789,161,25.327]],["name/4-7",[]],["text/4-7",[]],["component/4-7",[]],["title/4-8",[15,18.786,555,38.759]],["name/4-8",[]],["text/4-8",[]],["component/4-8",[]],["title/4",[470,42.449,471,29.789]],["name/4",[556,1.375]],["text/4",[1,0.343,4,0.527,8,0.147,9,0.787,10,2.319,11,0.836,12,0.602,15,0.795,16,0.46,19,0.424,20,1.329,21,0.266,27,1.021,28,0.555,30,1.212,31,0.859,33,0.255,35,1.757,36,3.508,41,0.611,43,0.255,55,0.571,56,0.315,64,0.344,68,0.294,69,1.261,72,0.669,75,1.271,80,1.212,86,0.979,89,0.344,91,1.037,92,1.388,93,3.892,95,0.787,96,0.286,98,0.328,99,0.328,100,0.367,103,0.344,104,0.294,105,0.344,106,0.303,112,0.315,114,0.763,116,0.669,117,1.533,122,0.26,123,2.166,128,0.231,129,1.597,132,0.328,135,0.339,137,0.294,141,1.079,142,2.735,143,0.832,145,0.238,147,0.592,148,0.173,149,0.791,150,0.502,151,0.303,152,0.227,154,0.173,155,0.516,156,1.016,158,1.121,161,1.617,168,0.354,169,0.801,170,0.246,173,0.663,174,0.294,180,0.626,181,0.315,182,0.791,185,0.21,192,0.987,203,0.278,204,0.722,207,0.822,210,0.696,213,1.117,215,0.344,216,0.266,222,0.344,227,0.181,229,0.227,230,1.203,233,1.994,242,0.712,243,1.385,244,0.315,245,0.294,246,0.516,247,0.328,248,0.367,249,1.117,250,0.367,251,0.367,252,0.712,253,0.344,254,0.367,255,0.25,256,0.315,257,0.367,258,0.272,259,0.722,260,0.636,268,0.846,276,0.636,285,1.264,286,0.928,287,1.079,289,0.673,292,0.266,310,1.078,312,0.328,317,0.611,318,0.675,323,0.294,325,0.344,327,0.294,328,0.636,329,0.315,330,0.495,332,0.242,333,0.474,341,0.187,344,1.048,346,0.663,347,0.286,348,0.266,349,0.315,350,0.408,352,0.328,355,0.535,356,0.975,357,0.344,358,0.344,362,0.315,363,0.673,369,0.303,370,1.264,374,0.486,386,0.367,389,2.079,392,0.246,406,0.589,407,0.636,409,0.315,410,0.315,411,0.315,412,0.315,413,0.315,414,0.315,415,0.787,416,0.315,417,0.315,418,0.315,419,0.315,420,0.315,427,0.495,430,0.216,433,0.712,436,1.113,438,1.154,440,0.266,441,0.89,442,0.315,445,0.669,449,0.26,450,0.669,454,0.527,466,0.54,468,0.328,469,0.636,470,0.669,471,0.469,472,0.278,473,0.294,476,0.435,477,1.533,483,0.216,487,0.555,491,2.072,492,0.266,498,0.696,500,0.997,513,0.246,514,1.154,515,0.527,517,2.132,522,0.344,525,1.264,553,0.344,555,0.315,557,0.778,558,0.611,559,0.401,560,0.367,561,0.401,562,0.344,563,0.636,564,0.669,565,0.571,566,0.401,567,0.367,568,0.344,569,0.975,570,0.234,571,0.778,572,0.367,573,0.367,574,0.401,575,0.401,576,0.778,577,0.401,578,1.133,579,0.328,580,1.154,581,1.133,582,0.778,583,0.401,584,0.401,585,1.133,586,2.276,587,0.571,588,0.571,589,1.185,590,0.328,591,0.344,592,0.344,593,0.255,594,0.401,595,0.778,596,1.354,597,0.367,598,0.315,599,0.722,600,0.778,601,0.401,602,0.401,603,0.286,604,0.401,605,0.401,606,0.401,607,0.527,608,0.669,609,1.048,610,0.778,611,0.712,612,0.328,613,0.401,614,0.401,615,0.401,616,0.25,617,0.328,618,1.47,619,0.712,620,0.328,621,0.778,622,0.401,623,0.344,624,0.89,625,0.344,626,0.367,627,0.401,628,0.401,629,0.401,630,1.264,631,0.778,632,1.133,633,1.133,634,2.089,635,2.647,636,0.778,637,0.778,638,0.778,639,0.778,640,1.788,641,0.401,642,0.367,643,1.345,644,0.778,645,0.778,646,0.401,647,0.401,648,0.401,649,0.401,650,0.778,651,0.401,652,0.778,653,0.611,654,0.367,655,0.778,656,0.272,657,0.401,658,0.401,659,0.367,660,0.401,661,1.637,662,0.401,663,0.401,664,0.278,665,0.401,666,0.832,667,1.788,668,0.712,669,0.401,670,1.038,671,0.367,672,0.778,673,0.401,674,0.367,675,0.401,676,0.401,677,0.551,678,0.367,679,0.367,680,0.367,681,0.344,682,0.367,683,0.778,684,0.401,685,0.401,686,0.401,687,0.367,688,0.367,689,0.401,690,0.303,691,0.401,692,0.401,693,0.401,694,0.266,695,0.266,696,0.778,697,0.303,698,0.367,699,0.401,700,0.401,701,0.401,702,0.401,703,1.47,704,0.401,705,0.206,706,0.401,707,0.328,708,0.712,709,0.367,710,0.328,711,0.315,712,0.401,713,0.401,714,0.778,715,0.712,716,0.401,717,0.555,718,0.367,719,0.401,720,0.328,721,0.401,722,0.367,723,0.278,724,0.401,725,0.401,726,0.401,727,0.975,728,0.669,729,0.303,730,0.505,731,0.859,732,0.859,733,0.367,734,0.669,735,0.589,736,0.315,737,0.555,738,0.778,739,0.278,740,0.303,741,0.401,742,0.401,743,0.401,744,0.778,745,0.401,746,0.401,747,0.328,748,0.401,749,0.367,750,1.038,751,0.401,752,0.315,753,0.328,754,0.401,755,0.294,756,0.344,757,0.367,758,1.796,759,0.712,760,0.328,761,0.401,762,0.401,763,0.527,764,0.179,765,0.344,766,1.345,767,0.367,768,0.367,769,0.401,770,0.401,771,0.367,772,0.669,773,0.527,774,1.133,775,0.778,776,0.344,777,0.401,778,0.401,779,0.401,780,0.401,781,0.401,782,0.401,783,0.401,784,0.367,785,0.401,786,0.367,787,0.401,788,0.155,789,0.589,790,0.401,791,0.218,792,0.495,793,0.401,794,0.401,795,0.315,796,0.255,797,0.344,798,0.712,799,0.712,800,0.401,801,0.303,802,0.636,803,0.367,804,0.278,805,0.712,806,0.401,807,0.401,808,0.344,809,0.401,810,0.367,811,0.401,812,0.401,813,0.367,814,0.367,815,0.367,816,0.315,817,0.401,818,0.367,819,0.401,820,0.401,821,0.401]],["component/4",[1,0.416]],["title/5-1",[791,36.294]],["name/5-1",[]],["text/5-1",[]],["component/5-1",[]],["title/5-2",[822,60.975]],["name/5-2",[]],["text/5-2",[]],["component/5-2",[]],["title/5-3",[823,60.975]],["name/5-3",[]],["text/5-3",[]],["component/5-3",[]],["title/5-4",[824,57.269]],["name/5-4",[]],["text/5-4",[]],["component/5-4",[]],["title/5-5",[75,12.213,318,14.933,464,27.972,824,27.972]],["name/5-5",[]],["text/5-5",[]],["component/5-5",[]],["title/5-6",[623,57.269]],["name/5-6",[]],["text/5-6",[]],["component/5-6",[]],["title/5-7",[505,43.248]],["name/5-7",[]],["text/5-7",[]],["component/5-7",[]],["title/5-8",[825,60.975]],["name/5-8",[]],["text/5-8",[]],["component/5-8",[]],["title/5-9",[27,34.297,76,40.397]],["name/5-9",[]],["text/5-9",[]],["component/5-9",[]],["title/5",[468,40.397,469,40.397]],["name/5",[468,1.125]],["text/5",[1,1.999,3,2.283,4,0.889,10,2.287,19,0.715,20,3.693,24,0.755,27,5.59,35,2.44,36,1.441,37,1.752,39,2.58,43,0.835,57,2.186,58,1.201,68,0.962,75,1.765,76,2.689,86,0.54,89,5.975,91,0.651,93,1.259,98,1.073,106,0.993,114,0.681,117,1.752,122,3.054,130,0.935,141,3.481,190,0.613,191,0.935,249,0.819,268,0.755,318,2.159,326,1.375,339,0.805,362,1.874,363,0.779,370,1.128,390,0.993,407,1.073,409,1.03,410,1.03,411,1.03,412,1.03,413,1.03,414,1.03,415,0.911,416,1.03,417,1.03,418,1.03,419,1.03,420,1.03,441,3.178,464,4.044,469,2.689,483,1.285,497,0.935,498,0.805,505,2.629,517,1.752,519,1.201,525,2.053,531,3.706,535,1.201,542,2.826,570,0.767,588,0.962,596,0.993,616,0.819,619,3.706,623,2.053,630,2.053,695,1.583,750,3.009,791,1.301,796,0.835,822,2.186,823,2.186,824,6.715,825,2.186,826,1.311,827,2.387,828,1.311,829,1.311,830,3.286,831,1.311,832,1.311,833,5.27,834,2.826,835,1.311,836,3.286,837,3.286,838,1.311,839,1.311,840,0.852,841,1.201,842,1.311,843,2.387,844,1.311,845,1.311,846,1.311,847,1.128,848,1.311,849,1.311,850,1.311,851,7.55,852,3.286,853,3.286,854,3.286,855,1.311,856,1.311,857,1.311,858,1.311,859,1.311,860,1.311,861,1.311,862,2.387,863,1.311,864,1.311,865,1.311,866,1.311,867,1.311,868,1.311,869,1.311,870,3.286,871,1.128,872,1.311,873,1.03,874,1.201,875,1.128,876,0.962,877,1.03,878,2.387,879,1.311,880,2.387,881,1.311,882,0.697,883,1.311,884,1.128,885,1.311,886,1.201]],["component/5",[1,0.416]],["title/6-1",[23,25.698]],["name/6-1",[]],["text/6-1",[]],["component/6-1",[]],["title/6-2",[475,41.613]],["name/6-2",[]],["text/6-2",[]],["component/6-2",[]],["title/6-3",[26,18.567]],["name/6-3",[]],["text/6-3",[]],["component/6-3",[]],["title/6-4",[334,23.439]],["name/6-4",[]],["text/6-4",[]],["component/6-4",[]],["title/6-5",[269,18.198]],["name/6-5",[]],["text/6-5",[]],["component/6-5",[]],["title/6-6",[887,25.345]],["name/6-6",[]],["text/6-6",[]],["component/6-6",[]],["title/6-7",[788,15.132,888,21.372,889,16.807]],["name/6-7",[]],["text/6-7",[]],["component/6-7",[]],["title/6-8",[15,18.786,341,23.087]],["name/6-8",[]],["text/6-8",[]],["component/6-8",[]],["title/6-9",[135,21.508,890,34.297]],["name/6-9",[]],["text/6-9",[]],["component/6-9",[]],["title/6",[475,30.844,477,24.008]],["name/6",[475,0.859]],["text/6",[1,0.695,8,1.441,15,0.874,16,0.932,19,1.251,26,1.091,35,2.032,67,1.781,75,1.922,84,2.101,86,1.613,93,2.318,108,1.522,122,1.49,124,1.285,128,1.322,135,1.706,147,1.577,149,2.755,150,2.268,154,0.992,161,2.626,167,1.684,168,2.329,176,2.688,190,1.073,230,3.483,269,1.07,329,1.802,333,1.638,338,2.288,341,1.073,343,1.684,345,2.101,346,1.342,350,3.177,354,1.522,355,1.084,367,2.403,395,1.878,430,1.235,438,1.802,440,1.522,445,1.974,475,4.932,476,2.191,477,4.902,478,1.739,480,2.363,481,3.074,482,2.966,555,1.802,616,1.434,698,2.101,717,1.637,764,1.026,788,0.886,882,1.22,888,2.134,889,0.984,891,2.295,892,2.101,893,1.522,894,1.49,895,1.557,896,1.22,897,2.101,898,1.974,899,2.295,900,2.254,901,2.101,902,2.295,903,2.295,904,2.295,905,2.295,906,1.878,907,2.295,908,1.974,909,2.295,910,2.295,911,2.295,912,2.465,913,1.589,914,2.295,915,0.96,916,1.044,917,1.974,918,1.974,919,1.974,920,1.878,921,1.974,922,1.974]],["component/6",[1,0.416]],["title/7-1",[23,25.698]],["name/7-1",[]],["text/7-1",[]],["component/7-1",[]],["title/7-2",[10,32.389]],["name/7-2",[]],["text/7-2",[]],["component/7-2",[]],["title/7-3",[148,21.33,923,42.449]],["name/7-3",[]],["text/7-3",[]],["component/7-3",[]],["title/7-4",[924,60.975]],["name/7-4",[]],["text/7-4",[]],["component/7-4",[]],["title/7",[164,40.19]],["name/7",[164,0.829]],["text/7",[0,0.883,1,0.97,8,0.854,10,2.236,13,2.647,15,0.484,16,0.516,19,2.505,20,1.791,33,1.477,35,2.678,43,0.809,56,0.998,67,1.055,69,0.767,75,1.937,93,1.514,105,1.093,108,0.843,114,1.204,122,0.825,128,0.732,129,3.676,135,0.554,141,0.767,142,2.425,146,1.573,148,0.549,149,1.722,150,0.563,153,4.531,154,1.987,155,2.123,156,1.557,157,0.809,158,4.034,160,1.065,161,3.326,162,2.818,163,2.62,164,4.123,165,5.052,166,2.818,167,0.933,168,2.092,169,0.693,173,1.871,176,0.667,177,1.965,178,1.932,179,2.513,181,0.998,206,1.757,210,0.78,216,1.539,229,0.721,244,0.998,246,0.843,255,0.794,256,0.998,258,1.573,285,1.093,313,1.164,317,0.998,318,0.583,320,0.843,323,0.933,326,0.732,343,0.933,346,0.743,348,0.843,350,0.667,355,0.6,360,0.933,361,0.933,363,1.377,367,0.78,374,2.469,376,2.123,377,2.818,390,2.993,391,1.757,415,0.883,432,0.843,435,0.998,440,1.539,472,0.883,483,1.722,487,1.655,488,3.102,508,2.224,512,0.933,558,0.998,596,0.963,599,0.809,611,1.164,711,0.998,728,1.093,789,2.425,796,0.809,804,0.883,873,0.998,876,0.933,890,0.883,896,1.233,924,2.931,925,1.271,926,1.093,927,0.843,928,1.271,929,1.271,930,1.164,931,1.093,932,1.271,933,0.998,934,1.271,935,0.998,936,0.767,937,1.271,938,2.32,939,1.164,940,1.271,941,1.703,942,1.164,943,0.963,944,2.993,945,0.998,946,0.998,947,0.606,948,0.906,949,1.164,950,1.093,951,1.093,952,1.093,953,0.963,954,1.093,955,1.271,956,1.271,957,1.271,958,0.825,959,1.093,960,1.271,961,1.093,962,1.271,963,1.271,964,1.164,965,1.271]],["component/7",[1,0.416]],["title/8",[158,31.444]],["name/8",[158,0.649]],["text/8",[1,1.083,8,0.76,10,1.004,11,1.672,18,3.074,19,3.071,20,2.646,24,2.059,25,1.69,26,1.318,35,1.072,53,1.621,75,1.342,79,1.69,86,0.851,91,2.347,111,1.29,121,1.473,125,1.315,130,4.543,131,3.074,145,1.226,153,1.369,156,3.392,158,4.202,160,0.948,161,1.059,164,1.246,169,1.125,182,1.111,186,1.776,191,1.473,192,1.14,210,1.267,216,1.369,309,1.564,320,1.369,323,2.624,376,1.369,389,2.059,409,1.621,410,1.621,411,1.621,412,1.621,413,1.621,414,1.621,415,1.435,416,1.621,417,1.621,418,1.621,419,1.621,420,1.621,427,2.276,430,1.111,436,1.564,450,1.776,471,1.246,477,1.004,480,1.246,483,2.544,486,1.69,494,4.425,598,1.621,609,1.473,656,1.4,720,1.69,722,1.891,759,1.891,791,1.125,796,3.588,897,1.891,898,3.074,900,1.189,931,3.074,958,1.341,966,4.846,967,2.065,968,1.776,969,1.473,970,2.065,971,3.575,972,2.065,973,2.065,974,1.315,975,2.065,976,2.065,977,4.846,978,1.776,979,1.891,980,1.776,981,2.065,982,1.369,983,1.515,984,2.065,985,1.564,986,3.07,987,2.708,988,1.776,989,1.69,990,1.776,991,2.065,992,2.065,993,2.065,994,1.891,995,2.065,996,1.891,997,2.065,998,1.891,999,2.065,1000,1.891,1001,2.065,1002,1.776,1003,1.776,1004,2.065,1005,2.065,1006,2.065]],["component/8",[1,0.416]],["title/9-1",[23,25.698]],["name/9-1",[]],["text/9-1",[]],["component/9-1",[]],["title/9-2",[7,24.071,360,28.779,1007,39.218]],["name/9-2",[]],["text/9-2",[]],["component/9-2",[]],["title/9",[35,20.352,36,23.665,37,28.779]],["name/9",[34,1.182]],["text/9",[2,4.286,4,2.08,7,3.496,10,1.491,15,1.167,17,1.272,18,1.49,20,0.97,21,2.735,26,0.855,30,2.08,32,1.418,34,4.286,35,4.777,36,4.814,37,2.25,38,1.49,39,2.408,40,3.375,41,1.361,45,1.029,46,1.587,47,1.587,48,1.149,51,1.361,55,1.272,56,1.361,61,1.418,67,0.788,68,1.272,69,1.85,70,1.587,75,0.651,76,1.418,77,1.587,78,1.587,79,2.509,80,4.27,81,1.587,82,1.272,83,1.587,101,1.418,108,1.149,114,0.899,122,1.125,129,1.046,135,2.171,145,1.029,146,1.175,149,3.388,150,1.828,160,0.796,161,1.573,169,3.431,200,2.408,207,0.97,210,1.064,211,1.204,229,0.984,256,1.361,286,2.509,315,1.49,316,1.313,320,1.149,322,1.49,326,0.998,352,1.418,360,1.272,427,1.952,430,0.932,442,1.361,449,1.125,465,2.509,513,1.064,514,4.473,515,2.08,517,4.621,540,1.821,562,2.637,565,1.272,568,1.49,589,2.034,755,1.272,795,1.361,871,1.49,877,2.408,927,3.305,936,1.046,959,1.49,964,1.587,978,1.49,986,1.991,1008,1.733,1009,1.733,1010,1.418,1011,2.408,1012,1.418,1013,3.776,1014,2.808,1015,1.587,1016,2.408,1017,1.149,1018,0.957,1019,1.733,1020,1.733,1021,1.418,1022,3.547,1023,1.587,1024,2.637,1025,3.067,1026,3.067,1027,3.067,1028,1.733,1029,1.418,1030,1.587,1031,1.587]],["component/9",[1,0.416]],["title/10-1",[23,25.698]],["name/10-1",[]],["text/10-1",[]],["component/10-1",[]],["title/10-2",[180,36.773]],["name/10-2",[]],["text/10-2",[]],["component/10-2",[]],["title/10-3",[334,23.439]],["name/10-3",[]],["text/10-3",[]],["component/10-3",[]],["title/10-4",[269,18.198]],["name/10-4",[]],["text/10-4",[]],["component/10-4",[]],["title/10-5",[887,25.345]],["name/10-5",[]],["text/10-5",[]],["component/10-5",[]],["title/10-6",[788,19.048,889,21.157]],["name/10-6",[]],["text/10-6",[]],["component/10-6",[]],["title/10-7",[15,18.786,341,23.087]],["name/10-7",[]],["text/10-7",[]],["component/10-7",[]],["title/10-8",[1032,48.874]],["name/10-8",[]],["text/10-8",[]],["component/10-8",[]],["title/10-9",[334,23.439]],["name/10-9",[]],["text/10-9",[]],["component/10-9",[]],["title/10-10",[269,18.198]],["name/10-10",[]],["text/10-10",[]],["component/10-10",[]],["title/10-11",[887,25.345]],["name/10-11",[]],["text/10-11",[]],["component/10-11",[]],["title/10-12",[15,18.786,341,23.087]],["name/10-12",[]],["text/10-12",[]],["component/10-12",[]],["title/10-13",[1033,50.451]],["name/10-13",[]],["text/10-13",[]],["component/10-13",[]],["title/10-14",[334,23.439]],["name/10-14",[]],["text/10-14",[]],["component/10-14",[]],["title/10-15",[269,18.198]],["name/10-15",[]],["text/10-15",[]],["component/10-15",[]],["title/10-16",[887,25.345]],["name/10-16",[]],["text/10-16",[]],["component/10-16",[]],["title/10-17",[15,18.786,341,23.087]],["name/10-17",[]],["text/10-17",[]],["component/10-17",[]],["title/10-18",[318,30.574]],["name/10-18",[]],["text/10-18",[]],["component/10-18",[]],["title/10-19",[334,23.439]],["name/10-19",[]],["text/10-19",[]],["component/10-19",[]],["title/10-20",[269,18.198]],["name/10-20",[]],["text/10-20",[]],["component/10-20",[]],["title/10-21",[887,25.345]],["name/10-21",[]],["text/10-21",[]],["component/10-21",[]],["title/10-22",[788,19.048,889,21.157]],["name/10-22",[]],["text/10-22",[]],["component/10-22",[]],["title/10-23",[15,18.786,341,23.087]],["name/10-23",[]],["text/10-23",[]],["component/10-23",[]],["title/10-24",[509,41.613]],["name/10-24",[]],["text/10-24",[]],["component/10-24",[]],["title/10-25",[334,23.439]],["name/10-25",[]],["text/10-25",[]],["component/10-25",[]],["title/10-26",[269,18.198]],["name/10-26",[]],["text/10-26",[]],["component/10-26",[]],["title/10-27",[887,25.345]],["name/10-27",[]],["text/10-27",[]],["component/10-27",[]],["title/10-28",[788,19.048,889,21.157]],["name/10-28",[]],["text/10-28",[]],["component/10-28",[]],["title/10-29",[1034,32.389]],["name/10-29",[]],["text/10-29",[]],["component/10-29",[]],["title/10",[180,36.773]],["name/10",[123,1.125]],["text/10",[0,0.478,1,0.208,6,1.814,8,2.031,11,0.875,12,1.743,14,3.16,15,1.248,16,1.331,19,1.019,20,0.732,21,0.456,27,0.478,28,0.491,30,1.268,32,0.563,33,1.191,69,1.128,75,1.07,86,0.77,93,3.666,108,0.456,111,0.43,114,0.357,133,1.198,141,0.415,145,1.11,147,0.959,148,0.808,150,1.055,152,0.742,153,1.24,154,0.808,155,1.579,156,1.386,157,1.814,158,1.345,160,1.093,168,1.296,169,0.713,180,3.422,181,1.027,182,3.098,186,0.591,189,0.331,190,0.322,196,2.642,205,0.933,207,0.385,210,1.148,227,1.074,238,1.07,243,0.867,255,0.817,258,0.887,269,1.635,309,0.521,310,2.091,318,3.523,323,2.697,329,0.54,330,0.833,339,1.148,344,0.491,361,0.505,363,0.777,392,0.803,430,0.37,435,1.027,454,0.887,456,0.63,466,0.478,471,0.789,473,2.965,477,0.334,497,0.491,498,0.803,499,0.563,500,0.887,501,0.54,502,0.563,505,0.447,509,3.116,511,3.175,538,0.63,547,0.505,589,0.456,593,0.833,607,1.615,609,1.334,626,0.63,666,0.505,690,0.521,705,2.408,715,0.63,728,0.591,731,2.484,737,0.491,739,0.478,763,0.466,764,0.836,789,0.521,792,0.833,801,0.521,802,0.563,804,0.909,882,0.366,888,1.019,889,0.801,898,0.591,912,2.26,913,1.64,915,1.538,916,0.851,927,0.867,935,0.54,936,3.009,941,0.505,945,0.54,947,0.891,953,0.521,958,0.447,969,0.933,977,0.478,988,0.591,1021,0.563,1032,2.406,1033,1.417,1035,1.308,1036,1.308,1037,0.688,1038,0.591,1039,0.563,1040,0.688,1041,0.688,1042,0.688,1043,0.688,1044,0.688,1045,0.63,1046,0.591,1047,0.688,1048,0.688,1049,0.688,1050,0.63,1051,0.591,1052,0.688,1053,0.491,1054,0.591,1055,1.372,1056,2.45,1057,1.692,1058,0.688,1059,0.688,1060,0.688,1061,2.45,1062,4.009,1063,1.85,1064,1.308,1065,2.159,1066,0.688,1067,0.688,1068,1.87,1069,0.54,1070,0.688,1071,0.591,1072,3.675,1073,2.382,1074,0.891,1075,1.308,1076,0.688,1077,0.63,1078,1.027,1079,0.563,1080,0.563,1081,0.563,1082,0.563,1083,0.521,1084,0.563,1085,0.591,1086,0.591,1087,0.54,1088,1.198,1089,1.198,1090,0.521,1091,0.563,1092,1.608,1093,0.688,1094,0.688,1095,0.688,1096,1.308,1097,0.591,1098,0.54,1099,0.54,1100,2.224,1101,2.33,1102,0.688,1103,0.688,1104,0.817,1105,1.308,1106,0.688,1107,0.688]],["component/10",[1,0.416]],["title/11-1",[23,25.698]],["name/11-1",[]],["text/11-1",[]],["component/11-1",[]],["title/11-2",[213,41.613]],["name/11-2",[]],["text/11-2",[]],["component/11-2",[]],["title/11-3",[269,18.198]],["name/11-3",[]],["text/11-3",[]],["component/11-3",[]],["title/11-4",[887,25.345]],["name/11-4",[]],["text/11-4",[]],["component/11-4",[]],["title/11-5",[232,36.227,511,31.428]],["name/11-5",[]],["text/11-5",[]],["component/11-5",[]],["title/11-6",[8,18.168,312,40.397]],["name/11-6",[]],["text/11-6",[]],["component/11-6",[]],["title/11-7",[511,31.428,1108,45.196]],["name/11-7",[]],["text/11-7",[]],["component/11-7",[]],["title/11-8",[788,19.048,889,21.157]],["name/11-8",[]],["text/11-8",[]],["component/11-8",[]],["title/11-9",[1109,43.248]],["name/11-9",[]],["text/11-9",[]],["component/11-9",[]],["title/11-10",[1110,66.602]],["name/11-10",[]],["text/11-10",[]],["component/11-10",[]],["title/11-11",[232,48.874]],["name/11-11",[]],["text/11-11",[]],["component/11-11",[]],["title/11-12",[213,30.844,1111,45.196]],["name/11-12",[]],["text/11-12",[]],["component/11-12",[]],["title/11-13",[1112,37.274]],["name/11-13",[]],["text/11-13",[]],["component/11-13",[]],["title/11",[213,41.613]],["name/11",[213,0.859]],["text/11",[1,0.69,6,1.025,7,0.988,8,3.05,10,0.783,11,1.344,12,0.455,13,2.491,16,0.924,17,0.629,19,1.241,20,1.608,21,0.568,24,1.312,31,1.22,35,1.182,67,0.733,69,0.972,71,0.649,75,0.605,86,0.664,93,3.572,101,1.864,108,0.568,113,0.785,124,0.48,129,1.374,145,0.956,147,0.649,148,0.696,149,1.226,150,1.009,152,0.914,153,1.068,154,3.873,156,1.657,157,1.025,158,0.405,159,0.785,160,0.393,161,1.169,162,0.611,163,0.568,164,0.517,165,0.546,166,0.611,167,0.629,168,1.307,169,0.467,173,0.501,174,0.629,182,0.461,185,0.45,191,0.611,196,0.517,209,0.595,212,0.536,213,5.601,214,0.785,215,0.737,216,0.568,217,0.785,227,0.386,229,0.914,232,6.264,255,1.423,269,1.063,292,0.568,320,0.568,326,0.494,334,0.802,346,1.679,363,0.509,390,1.22,430,0.461,449,0.557,474,0.595,511,3.008,569,0.568,579,0.701,599,0.546,603,1.148,620,0.701,695,0.568,723,2.702,749,0.785,752,0.673,764,0.383,808,0.737,876,1.671,888,0.467,889,1.854,906,0.701,912,4.165,913,1.383,915,0.674,916,0.39,935,1.264,947,1.086,948,0.611,986,1.046,1055,1.182,1056,1.385,1057,0.956,1063,1.866,1065,1.725,1069,0.673,1092,6.762,1108,2.085,1109,0.557,1111,0.785,1113,0.857,1114,0.857,1115,0.857,1116,0.857,1117,0.857,1118,0.611,1119,0.857,1120,0.649,1121,0.857,1122,0.857,1123,0.857,1124,0.857,1125,0.785,1126,0.673,1127,0.857,1128,0.785,1129,0.785,1130,0.857,1131,0.737,1132,0.857,1133,1.671,1134,1.22,1135,0.785,1136,0.701,1137,0.857,1138,0.857,1139,0.649,1140,0.857,1141,0.701,1142,0.857,1143,0.785,1144,0.857,1145,0.857,1146,1.61,1147,3.996,1148,4.182,1149,0.857,1150,0.595,1151,0.701,1152,2.675,1153,0.857,1154,1.474,1155,0.857,1156,0.857,1157,1.61,1158,1.182,1159,0.857,1160,1.61,1161,0.857,1162,0.857]],["component/11",[1,0.416]],["title/12-1",[23,25.698]],["name/12-1",[]],["text/12-1",[]],["component/12-1",[]],["title/12-2",[26,18.567]],["name/12-2",[]],["text/12-2",[]],["component/12-2",[]],["title/12-3",[334,23.439]],["name/12-3",[]],["text/12-3",[]],["component/12-3",[]],["title/12-4",[269,18.198]],["name/12-4",[]],["text/12-4",[]],["component/12-4",[]],["title/12-5",[887,25.345]],["name/12-5",[]],["text/12-5",[]],["component/12-5",[]],["title/12-6",[788,25.698]],["name/12-6",[]],["text/12-6",[]],["component/12-6",[]],["title/12-7",[1034,32.389]],["name/12-7",[]],["text/12-7",[]],["component/12-7",[]],["title/12",[350,25.921,477,24.008]],["name/12",[920,1.125]],["text/12",[1,2.832,8,1.818,11,1.419,16,2.005,26,0.846,45,3.711,75,1.139,86,2.575,93,3.582,135,1.322,147,2.518,148,1.311,150,1.344,154,1.311,160,1.393,185,2.594,189,1.461,190,2.31,227,1.368,269,1.969,333,1.269,338,4.636,350,1.593,428,2.057,432,2.012,475,3.087,477,3.04,616,1.895,677,1.475,764,1.356,791,1.653,792,1.931,882,2.626,893,2.012,894,1.97,895,2.057,896,1.612,912,2.379,913,2.005,915,1.269,916,1.38,920,6.959,947,1.446,1074,1.446,1101,4.452,1163,2.057,1164,3.034,1165,5.006,1166,2.226,1167,3.034,1168,2.845,1169,3.034,1170,3.034]],["component/12",[1,0.416]],["title/13-1",[23,25.698]],["name/13-1",[]],["text/13-1",[]],["component/13-1",[]],["title/13-2",[26,18.567]],["name/13-2",[]],["text/13-2",[]],["component/13-2",[]],["title/13-3",[334,23.439]],["name/13-3",[]],["text/13-3",[]],["component/13-3",[]],["title/13-4",[269,18.198]],["name/13-4",[]],["text/13-4",[]],["component/13-4",[]],["title/13-5",[887,25.345]],["name/13-5",[]],["text/13-5",[]],["component/13-5",[]],["title/13-6",[788,25.698]],["name/13-6",[]],["text/13-6",[]],["component/13-6",[]],["title/13-7",[1034,32.389]],["name/13-7",[]],["text/13-7",[]],["component/13-7",[]],["title/13",[170,14.889,259,15.443,350,12.737,477,11.797,478,18.375,480,14.638]],["name/13",[919,1.182]],["text/13",[1,2.615,8,1.746,11,0.97,16,1.457,26,0.578,45,2.816,75,0.779,86,1.955,91,1.782,93,3.416,124,1.161,135,0.904,147,2.573,148,0.896,150,0.919,154,0.896,160,0.952,170,1.273,185,2.968,189,0.999,190,1.679,204,1.321,209,1.441,227,0.935,259,1.321,269,1.545,289,1.232,333,1.502,338,5.045,350,1.089,428,1.407,432,1.376,475,2.243,477,3.648,478,1.571,480,1.252,607,3.834,616,1.296,677,1.746,764,0.927,791,1.13,792,3.02,882,2.521,893,1.376,894,1.347,895,1.407,896,1.102,912,3.075,913,1.457,915,1.502,916,0.944,919,6.823,920,1.698,947,0.989,1074,0.989,1101,4.853,1139,1.571,1163,1.407,1165,4.438,1166,2.634,1168,2.067,1171,3.882,1172,2.818,1173,3.589,1174,2.937,1175,1.784,1176,3.589,1177,2.937,1178,4.343]],["component/13",[1,0.416]],["title/14-1",[23,25.698]],["name/14-1",[]],["text/14-1",[]],["component/14-1",[]],["title/14-2",[26,18.567]],["name/14-2",[]],["text/14-2",[]],["component/14-2",[]],["title/14-3",[334,23.439]],["name/14-3",[]],["text/14-3",[]],["component/14-3",[]],["title/14-4",[269,18.198]],["name/14-4",[]],["text/14-4",[]],["component/14-4",[]],["title/14-5",[887,25.345]],["name/14-5",[]],["text/14-5",[]],["component/14-5",[]],["title/14-6",[788,25.698]],["name/14-6",[]],["text/14-6",[]],["component/14-6",[]],["title/14-7",[1034,32.389]],["name/14-7",[]],["text/14-7",[]],["component/14-7",[]],["title/14",[170,14.889,259,15.443,350,12.737,477,11.797,478,18.375,479,20.858]],["name/14",[918,1.182]],["text/14",[1,2.656,8,1.796,11,1.007,16,1.504,26,0.6,45,2.897,75,0.808,86,2.011,91,1.84,93,3.561,124,1.205,135,0.938,147,2.633,148,0.93,150,0.954,154,0.93,160,0.989,170,2.275,185,3.044,189,1.037,190,1.734,227,0.971,259,1.371,269,1.584,289,1.279,333,1.551,338,4.936,350,1.131,428,1.46,432,1.428,475,2.316,477,3.473,478,1.631,479,1.852,480,1.299,607,3.932,616,1.345,677,1.803,764,0.962,791,1.174,792,2.36,882,1.97,893,1.428,894,1.398,895,1.46,896,1.144,912,3.146,913,1.504,915,1.551,916,0.98,918,6.944,947,1.027,1074,1.027,1101,4.723,1139,1.631,1163,1.46,1165,4.028,1166,2.72,1168,2.134,1171,3.994,1172,2.91,1174,3.033,1175,1.852,1177,3.033,1178,3.394,1179,3.707,1180,3.707]],["component/14",[1,0.416]],["title/15-1",[23,25.698]],["name/15-1",[]],["text/15-1",[]],["component/15-1",[]],["title/15-2",[26,18.567]],["name/15-2",[]],["text/15-2",[]],["component/15-2",[]],["title/15-3",[334,23.439]],["name/15-3",[]],["text/15-3",[]],["component/15-3",[]],["title/15-4",[269,18.198]],["name/15-4",[]],["text/15-4",[]],["component/15-4",[]],["title/15-5",[887,25.345]],["name/15-5",[]],["text/15-5",[]],["component/15-5",[]],["title/15-6",[788,25.698]],["name/15-6",[]],["text/15-6",[]],["component/15-6",[]],["title/15-7",[1034,32.389]],["name/15-7",[]],["text/15-7",[]],["component/15-7",[]],["title/15",[350,20.592,367,24.071,477,19.072]],["name/15",[395,1.125]],["text/15",[1,2.825,8,1.808,11,1.409,16,1.994,26,0.84,45,3.694,75,1.131,86,2.563,93,3.572,135,1.313,147,2.506,148,1.302,150,1.335,154,1.302,160,1.383,185,2.58,189,1.451,190,2.298,227,1.359,269,1.961,333,1.261,338,4.62,350,1.582,367,1.85,395,6.938,428,2.044,432,1.998,475,3.07,477,3.026,616,1.883,677,1.465,764,1.347,791,1.642,792,1.918,882,2.611,893,1.998,894,1.957,895,2.044,896,1.601,912,2.366,913,1.994,915,1.261,916,1.371,947,1.437,1074,1.437,1101,4.439,1163,2.044,1165,4.986,1166,2.211,1168,2.829,1181,3.013,1182,3.013,1183,3.013,1184,3.013]],["component/15",[1,0.416]],["title/16-1",[23,25.698]],["name/16-1",[]],["text/16-1",[]],["component/16-1",[]],["title/16-2",[26,18.567]],["name/16-2",[]],["text/16-2",[]],["component/16-2",[]],["title/16-3",[334,23.439]],["name/16-3",[]],["text/16-3",[]],["component/16-3",[]],["title/16-4",[269,18.198]],["name/16-4",[]],["text/16-4",[]],["component/16-4",[]],["title/16-5",[887,25.345]],["name/16-5",[]],["text/16-5",[]],["component/16-5",[]],["title/16-6",[788,25.698]],["name/16-6",[]],["text/16-6",[]],["component/16-6",[]],["title/16-7",[1034,32.389]],["name/16-7",[]],["text/16-7",[]],["component/16-7",[]],["title/16",[367,24.071,477,19.072,482,29.707]],["name/16",[922,1.182]],["text/16",[1,2.693,8,1.639,11,3.467,13,2.565,16,1.808,26,0.746,45,3.398,75,1.004,86,2.358,93,3.406,135,1.165,147,2.305,148,1.156,150,1.185,154,1.156,160,1.228,170,2.734,173,1.564,185,2.339,189,1.288,190,2.083,227,1.206,269,1.824,333,1.119,338,4.96,339,3.513,367,1.642,428,1.814,432,1.774,475,2.783,477,2.166,482,2.026,546,2.3,616,1.671,677,1.301,764,1.196,791,1.458,792,1.703,882,2.367,893,1.774,894,1.737,895,1.814,896,1.422,912,2.145,913,1.808,915,1.119,916,1.217,922,6.882,947,1.275,1018,1.477,1074,1.275,1101,4.213,1163,1.814,1165,4.637,1168,2.565,1185,2.449,1186,1.908,1187,2.675,1188,3.83,1189,2.3,1190,2.675,1191,2.675,1192,2.675]],["component/16",[1,0.416]],["title/17-1",[23,25.698]],["name/17-1",[]],["text/17-1",[]],["component/17-1",[]],["title/17-2",[26,18.567]],["name/17-2",[]],["text/17-2",[]],["component/17-2",[]],["title/17-3",[334,23.439]],["name/17-3",[]],["text/17-3",[]],["component/17-3",[]],["title/17-4",[269,18.198]],["name/17-4",[]],["text/17-4",[]],["component/17-4",[]],["title/17-5",[887,25.345]],["name/17-5",[]],["text/17-5",[]],["component/17-5",[]],["title/17-6",[788,25.698]],["name/17-6",[]],["text/17-6",[]],["component/17-6",[]],["title/17-7",[1034,32.389]],["name/17-7",[]],["text/17-7",[]],["component/17-7",[]],["title/17",[350,20.592,476,21.949,477,19.072]],["name/17",[917,1.182]],["text/17",[1,2.832,8,1.818,11,1.419,16,2.005,26,0.846,45,3.711,75,1.139,86,2.575,93,3.582,135,1.322,147,2.518,148,1.311,150,1.344,154,1.311,160,1.393,185,2.594,189,1.461,190,2.31,227,1.368,269,1.969,333,1.269,338,4.636,350,1.593,428,2.057,432,2.012,475,3.087,476,1.698,477,2.403,616,1.895,677,1.475,764,1.356,791,1.653,792,1.931,882,2.626,893,2.012,894,1.97,895,2.057,896,1.612,912,2.379,913,2.005,915,1.269,916,1.38,917,7.313,947,1.446,1074,1.446,1101,4.452,1163,2.057,1165,5.006,1166,2.226,1168,2.845,1193,3.034,1194,2.777,1195,3.034,1196,3.034]],["component/17",[1,0.416]],["title/18-1",[23,25.698]],["name/18-1",[]],["text/18-1",[]],["component/18-1",[]],["title/18-2",[26,18.567]],["name/18-2",[]],["text/18-2",[]],["component/18-2",[]],["title/18-3",[334,23.439]],["name/18-3",[]],["text/18-3",[]],["component/18-3",[]],["title/18-4",[269,18.198]],["name/18-4",[]],["text/18-4",[]],["component/18-4",[]],["title/18-5",[887,25.345]],["name/18-5",[]],["text/18-5",[]],["component/18-5",[]],["title/18-6",[788,25.698]],["name/18-6",[]],["text/18-6",[]],["component/18-6",[]],["title/18-7",[1034,32.389]],["name/18-7",[]],["text/18-7",[]],["component/18-7",[]],["title/18",[476,21.949,477,19.072,482,29.707]],["name/18",[921,1.182]],["text/18",[1,2.693,8,1.639,11,3.467,13,2.565,16,1.808,26,0.746,45,3.398,75,1.004,86,2.358,93,3.406,135,1.165,147,2.305,148,1.156,150,1.185,154,1.156,160,1.228,170,2.734,185,2.339,189,1.288,190,2.083,227,1.206,229,1.518,269,1.824,333,1.119,338,4.96,339,3.513,428,1.814,432,1.774,475,2.783,476,1.497,477,2.166,482,2.026,546,2.3,616,1.671,677,1.301,764,1.196,791,1.458,792,1.703,882,2.367,893,1.774,894,1.737,895,1.814,896,1.422,912,2.145,913,1.808,915,1.119,916,1.217,921,6.882,947,1.275,1018,1.477,1074,1.275,1101,4.213,1163,1.814,1165,4.637,1168,2.565,1185,2.449,1186,1.908,1188,3.83,1189,2.3,1197,2.675,1198,2.675,1199,2.675,1200,2.675]],["component/18",[1,0.416]],["title/19-1",[23,25.698]],["name/19-1",[]],["text/19-1",[]],["component/19-1",[]],["title/19-2",[26,18.567]],["name/19-2",[]],["text/19-2",[]],["component/19-2",[]],["title/19-3",[334,23.439]],["name/19-3",[]],["text/19-3",[]],["component/19-3",[]],["title/19-4",[269,18.198]],["name/19-4",[]],["text/19-4",[]],["component/19-4",[]],["title/19-5",[887,25.345]],["name/19-5",[]],["text/19-5",[]],["component/19-5",[]],["title/19-6",[788,25.698]],["name/19-6",[]],["text/19-6",[]],["component/19-6",[]],["title/19-7",[1034,32.389]],["name/19-7",[]],["text/19-7",[]],["component/19-7",[]],["title/19",[477,24.008,481,38.759]],["name/19",[481,1.079]],["text/19",[1,2.602,8,1.849,11,1.047,16,1.555,26,0.624,45,2.983,75,0.84,86,2.07,91,1.903,93,3.517,124,1.253,135,0.975,147,2.695,148,0.967,150,0.992,154,0.967,160,1.028,185,3.124,189,1.078,190,1.792,227,1.009,269,1.626,289,1.329,333,1.604,338,5.019,428,1.518,432,1.485,475,2.394,477,3.547,481,6.742,607,4.035,616,1.399,677,1.864,764,1.001,791,1.22,792,2.44,882,2.037,893,1.485,894,1.454,895,1.518,896,1.19,912,3.221,913,1.555,915,1.604,916,1.018,947,1.067,1074,1.067,1101,4.785,1139,1.696,1163,1.518,1165,4.134,1166,2.812,1168,2.207,1171,4.112,1172,3.009,1174,3.136,1177,3.136,1201,3.832,1202,2.239,1203,3.832,1204,3.832]],["component/19",[1,0.416]],["title/20-1",[23,25.698]],["name/20-1",[]],["text/20-1",[]],["component/20-1",[]],["title/20-2",[26,18.567]],["name/20-2",[]],["text/20-2",[]],["component/20-2",[]],["title/20-3",[334,23.439]],["name/20-3",[]],["text/20-3",[]],["component/20-3",[]],["title/20-4",[269,18.198]],["name/20-4",[]],["text/20-4",[]],["component/20-4",[]],["title/20-5",[887,25.345]],["name/20-5",[]],["text/20-5",[]],["component/20-5",[]],["title/20-6",[788,25.698]],["name/20-6",[]],["text/20-6",[]],["component/20-6",[]],["title/20-7",[1034,32.389]],["name/20-7",[]],["text/20-7",[]],["component/20-7",[]],["title/20",[477,24.008,480,29.789]],["name/20",[480,0.829]],["text/20",[1,2.502,8,1.728,11,2.962,13,1.178,16,1.44,26,0.57,45,2.787,75,0.768,86,1.934,91,1.761,93,3.398,124,1.145,135,0.892,147,2.552,148,0.884,150,0.907,154,0.884,160,0.939,170,1.256,185,2.941,189,0.985,190,1.659,227,0.923,269,1.53,289,1.215,333,1.484,338,5.464,339,3.888,428,1.388,432,1.357,475,2.216,477,3.375,480,4.982,607,3.798,616,1.279,677,1.725,764,0.915,791,1.115,792,2.258,882,1.885,893,1.357,894,1.329,895,1.388,896,1.088,912,3.05,913,1.44,915,1.484,916,0.931,947,0.976,1074,0.976,1101,4.641,1139,1.55,1163,1.388,1165,3.891,1168,2.042,1171,3.842,1172,2.785,1174,2.903,1175,1.76,1177,2.903,1188,4.816,1189,3.05,1205,3.547,1206,3.547,1207,3.547]],["component/20",[1,0.416]],["title/21-1",[23,25.698]],["name/21-1",[]],["text/21-1",[]],["component/21-1",[]],["title/21-2",[26,18.567]],["name/21-2",[]],["text/21-2",[]],["component/21-2",[]],["title/21-3",[334,23.439]],["name/21-3",[]],["text/21-3",[]],["component/21-3",[]],["title/21-4",[269,18.198]],["name/21-4",[]],["text/21-4",[]],["component/21-4",[]],["title/21-5",[887,25.345]],["name/21-5",[]],["text/21-5",[]],["component/21-5",[]],["title/21-6",[788,19.048,889,21.157]],["name/21-6",[]],["text/21-6",[]],["component/21-6",[]],["title/21-7",[15,18.786,341,23.087]],["name/21-7",[]],["text/21-7",[]],["component/21-7",[]],["title/21-8",[1034,32.389]],["name/21-8",[]],["text/21-8",[]],["component/21-8",[]],["title/21-9",[1208,38.35]],["name/21-9",[]],["text/21-9",[]],["component/21-9",[]],["title/21",[489,52.291]],["name/21",[489,1.079]],["text/21",[8,2.34,10,0.748,13,3.368,15,0.586,16,1.119,26,0.429,35,0.799,43,0.98,67,1.255,75,2.196,86,0.634,91,1.369,92,1.612,93,2.241,94,4.13,114,1.431,129,0.928,135,0.67,141,0.928,147,1.51,148,0.665,149,1.484,156,3.092,158,3.705,161,1.923,162,1.097,163,1.02,164,0.928,168,2.079,169,2.866,170,5.281,173,0.899,175,1.259,176,0.808,177,0.944,178,1.664,185,0.808,212,0.961,216,1.02,223,1.664,224,1.208,225,1.208,229,1.565,233,1.523,249,0.961,259,2.387,269,1.248,327,1.129,333,0.644,339,1.693,341,0.72,346,0.899,355,1.302,363,2.226,374,3.973,427,0.98,430,0.828,449,0.999,472,3.174,483,1.484,489,7.067,569,1.02,591,1.323,599,0.98,609,1.967,677,1.341,711,2.943,717,1.097,739,1.916,764,0.688,788,0.594,888,0.839,889,0.659,890,1.069,912,1.805,913,1.854,915,1.154,916,0.7,946,1.208,948,1.967,954,2.372,987,1.166,1003,1.323,1018,0.85,1038,2.372,1046,1.323,1090,1.166,1209,1.208,1210,6.358,1211,1.916,1212,2.372,1213,1.916,1214,1.259,1215,1.097,1216,2.758,1217,1.539,1218,5.26,1219,1.259,1220,1.539,1221,1.539,1222,1.539,1223,3.654,1224,1.539,1225,1.409,1226,1.409,1227,1.539,1228,1.044,1229,1.539,1230,1.539]],["component/21",[1,0.416]],["title/22-1",[23,25.698]],["name/22-1",[]],["text/22-1",[]],["component/22-1",[]],["title/22-2",[26,18.567]],["name/22-2",[]],["text/22-2",[]],["component/22-2",[]],["title/22-3",[334,23.439]],["name/22-3",[]],["text/22-3",[]],["component/22-3",[]],["title/22-4",[269,18.198]],["name/22-4",[]],["text/22-4",[]],["component/22-4",[]],["title/22-5",[887,25.345]],["name/22-5",[]],["text/22-5",[]],["component/22-5",[]],["title/22-6",[788,19.048,889,21.157]],["name/22-6",[]],["text/22-6",[]],["component/22-6",[]],["title/22-7",[15,18.786,341,23.087]],["name/22-7",[]],["text/22-7",[]],["component/22-7",[]],["title/22-8",[1034,32.389]],["name/22-8",[]],["text/22-8",[]],["component/22-8",[]],["title/22-9",[1208,38.35]],["name/22-9",[]],["text/22-9",[]],["component/22-9",[]],["title/22",[165,42.4]],["name/22",[165,0.875]],["text/22",[1,0.337,8,1.907,10,1.39,13,2.709,15,0.423,16,0.833,19,0.606,20,0.622,26,0.31,35,0.577,67,0.934,75,1.946,86,0.458,91,1.019,92,1.199,93,2.15,94,1.611,95,1.426,111,0.695,114,1.483,122,0.722,124,0.622,125,0.708,128,0.64,129,0.671,135,0.484,141,0.671,145,1.218,147,1.895,148,0.887,149,1.538,151,0.842,154,0.887,155,2.358,156,3.38,158,3.145,161,1.466,162,0.793,163,0.737,164,1.238,165,5.564,168,1.895,169,1.557,170,4.089,171,0.956,172,2.457,173,2.435,176,0.584,177,0.682,178,1.238,179,4.069,185,0.584,192,0.614,206,5.466,209,1.426,212,0.695,216,0.737,223,1.238,224,0.873,225,0.873,233,1.578,249,1.282,268,0.64,269,0.971,289,0.66,326,0.64,327,0.816,333,0.465,341,0.52,344,2.536,346,1.199,355,1.349,363,3.331,367,1.259,374,2.603,380,0.956,427,0.708,430,1.104,476,0.622,480,0.671,483,1.538,487,0.793,488,2.792,569,0.737,588,0.816,590,0.91,599,0.708,603,0.793,677,1.729,697,1.554,717,0.793,723,0.772,736,1.611,763,0.754,764,0.497,796,0.708,887,0.423,888,0.606,889,0.476,912,1.376,913,1.443,915,0.859,916,0.506,941,1.506,942,1.018,943,1.554,944,5.821,945,0.873,946,0.873,948,2.038,974,0.708,987,0.842,1018,1.133,1063,1.856,1069,0.873,1080,0.91,1082,1.679,1090,0.842,1186,2.038,1213,1.426,1214,0.91,1215,0.793,1219,0.91,1228,0.754,1231,0.956,1232,0.956,1233,1.018,1234,2.052,1235,1.112,1236,1.112,1237,1.112,1238,0.91,1239,1.112,1240,0.956,1241,0.956,1242,1.112,1243,1.112,1244,1.018,1245,1.018,1246,0.956,1247,1.018,1248,1.764,1249,1.018,1250,1.879,1251,0.772,1252,0.956,1253,0.956,1254,1.018,1255,0.956,1256,1.764,1257,0.956,1258,1.764,1259,1.018,1260,0.873,1261,1.018,1262,1.018,1263,1.018,1264,1.018]],["component/22",[1,0.416]],["title/23-1",[23,25.698]],["name/23-1",[]],["text/23-1",[]],["component/23-1",[]],["title/23-2",[26,18.567]],["name/23-2",[]],["text/23-2",[]],["component/23-2",[]],["title/23-3",[334,23.439]],["name/23-3",[]],["text/23-3",[]],["component/23-3",[]],["title/23-4",[269,18.198]],["name/23-4",[]],["text/23-4",[]],["component/23-4",[]],["title/23-5",[887,25.345]],["name/23-5",[]],["text/23-5",[]],["component/23-5",[]],["title/23-6",[788,19.048,889,21.157]],["name/23-6",[]],["text/23-6",[]],["component/23-6",[]],["title/23-7",[15,18.786,341,23.087]],["name/23-7",[]],["text/23-7",[]],["component/23-7",[]],["title/23-8",[1034,32.389]],["name/23-8",[]],["text/23-8",[]],["component/23-8",[]],["title/23-9",[1208,38.35]],["name/23-9",[]],["text/23-9",[]],["component/23-9",[]],["title/23",[166,47.496]],["name/23",[166,0.98]],["text/23",[3,0.769,8,2.059,10,0.993,13,2.7,15,0.421,16,0.829,26,0.308,35,2.433,43,0.704,67,0.929,75,1.94,86,0.456,91,1.014,92,1.194,93,2.143,94,1.604,95,1.419,96,1.457,111,0.691,114,1.477,124,0.619,128,0.637,129,0.668,135,0.482,141,0.668,145,0.657,147,1.889,148,0.478,149,0.595,151,0.838,153,1.355,154,0.478,156,3.83,158,2.823,161,1.46,162,0.789,163,0.734,164,1.717,165,1.3,166,6.5,168,1.888,169,1.113,170,3.67,173,0.647,175,0.905,176,0.581,177,0.679,178,1.233,179,0.869,185,0.581,197,0.905,206,5.453,209,1.419,212,0.691,216,0.734,223,1.233,224,0.869,225,0.869,227,0.499,229,3.175,233,1.571,249,1.276,269,0.968,289,0.657,327,0.812,331,0.789,333,0.463,341,0.955,344,2.526,346,1.663,350,1.073,355,1.343,363,3.756,367,1.254,374,2.593,376,1.887,377,2.029,427,0.704,430,1.099,476,1.593,483,1.099,487,0.789,569,0.734,588,0.812,590,0.905,598,0.869,599,0.704,677,1.722,697,1.547,707,0.905,717,0.789,739,1.419,764,0.494,887,0.421,888,0.603,889,0.474,912,1.37,913,1.437,915,0.855,916,0.503,930,1.013,941,1.499,944,5.637,946,0.869,948,2.029,961,0.951,974,1.812,987,0.838,990,0.951,1018,0.611,1063,1.326,1069,0.869,1090,0.838,1099,1.604,1100,0.75,1186,2.029,1211,0.769,1212,0.951,1213,1.419,1214,0.905,1215,0.789,1219,0.905,1228,0.75,1231,1.757,1232,1.757,1240,0.951,1241,0.951,1246,0.951,1248,0.951,1251,1.419,1252,0.951,1253,0.951,1255,0.951,1256,1.757,1257,0.951,1258,1.757,1260,0.869,1265,0.838,1266,1.604,1267,1.106,1268,2.846,1269,1.106,1270,0.734,1271,1.106,1272,1.106,1273,1.106,1274,1.106,1275,1.106,1276,1.106,1277,1.106,1278,1.106,1279,1.106,1280,1.106,1281,1.106]],["component/23",[1,0.416]],["title/24-1",[23,25.698]],["name/24-1",[]],["text/24-1",[]],["component/24-1",[]],["title/24-2",[26,18.567]],["name/24-2",[]],["text/24-2",[]],["component/24-2",[]],["title/24-3",[334,23.439]],["name/24-3",[]],["text/24-3",[]],["component/24-3",[]],["title/24-4",[269,18.198]],["name/24-4",[]],["text/24-4",[]],["component/24-4",[]],["title/24-5",[887,25.345]],["name/24-5",[]],["text/24-5",[]],["component/24-5",[]],["title/24-6",[788,19.048,889,21.157]],["name/24-6",[]],["text/24-6",[]],["component/24-6",[]],["title/24-7",[15,18.786,341,23.087]],["name/24-7",[]],["text/24-7",[]],["component/24-7",[]],["title/24-8",[1034,32.389]],["name/24-8",[]],["text/24-8",[]],["component/24-8",[]],["title/24-9",[1208,38.35]],["name/24-9",[]],["text/24-9",[]],["component/24-9",[]],["title/24",[165,24.967,487,27.968,488,30.791]],["name/24",[1282,1.258]],["text/24",[1,0.335,8,2.059,10,1.384,13,3.443,15,0.421,16,0.829,19,0.603,20,0.619,26,0.308,35,0.574,67,0.929,75,1.94,86,0.456,91,1.014,92,1.194,93,2.143,94,1.604,95,1.419,111,0.691,114,1.477,122,0.718,128,1.176,129,0.668,135,0.482,141,0.668,145,1.213,147,1.889,148,0.478,149,1.099,151,0.838,154,0.478,156,3.077,158,2.987,161,1.46,162,0.789,163,0.734,164,1.233,165,4.028,168,1.888,169,1.113,170,4.078,171,0.951,172,2.447,173,2.426,176,0.581,177,0.679,178,1.233,179,4.968,185,0.581,206,5.637,209,1.419,210,0.679,212,0.691,216,0.734,223,1.233,224,0.869,225,0.869,233,1.571,249,0.691,269,0.968,289,1.213,323,0.812,326,0.637,327,0.812,333,0.463,341,0.517,344,2.526,346,1.194,355,1.672,363,2.464,367,0.679,372,1.013,374,2.593,380,0.951,427,0.704,430,1.099,476,0.619,483,1.099,487,2.526,488,3.259,529,0.838,569,0.734,588,0.812,590,0.905,599,0.704,603,0.789,677,2.28,697,1.547,717,0.789,736,1.604,747,0.905,764,0.494,887,0.421,888,0.603,889,0.474,912,1.37,913,1.437,915,0.855,916,0.503,941,0.812,944,5.252,945,0.869,946,0.869,948,2.029,974,0.704,987,0.838,1018,1.128,1063,1.848,1090,0.838,1100,1.93,1186,2.029,1211,0.769,1213,1.419,1214,0.905,1215,0.789,1219,0.905,1228,0.75,1231,0.951,1232,0.951,1240,0.951,1241,0.951,1244,1.013,1245,1.013,1246,0.951,1247,1.013,1248,1.757,1249,1.013,1250,1.87,1251,0.769,1252,0.951,1253,0.951,1254,1.013,1255,0.951,1256,1.757,1257,0.951,1258,1.757,1259,1.013,1260,0.869,1261,1.013,1262,1.013,1263,1.013,1264,1.013,1266,1.604,1270,2.753,1282,6.59,1283,1.106,1284,0.838,1285,1.013,1286,1.106,1287,1.013,1288,1.106,1289,1.106,1290,1.106,1291,1.106,1292,1.106,1293,1.106,1294,1.106,1295,1.106]],["component/24",[1,0.416]],["title/25-1",[23,25.698]],["name/25-1",[]],["text/25-1",[]],["component/25-1",[]],["title/25-2",[896,35.395]],["name/25-2",[]],["text/25-2",[]],["component/25-2",[]],["title/25-3",[26,18.567]],["name/25-3",[]],["text/25-3",[]],["component/25-3",[]],["title/25-4",[334,23.439]],["name/25-4",[]],["text/25-4",[]],["component/25-4",[]],["title/25-5",[269,18.198]],["name/25-5",[]],["text/25-5",[]],["component/25-5",[]],["title/25-6",[887,25.345]],["name/25-6",[]],["text/25-6",[]],["component/25-6",[]],["title/25-7",[788,19.048,889,21.157]],["name/25-7",[]],["text/25-7",[]],["component/25-7",[]],["title/25-8",[15,18.786,341,23.087]],["name/25-8",[]],["text/25-8",[]],["component/25-8",[]],["title/25-9",[1034,32.389]],["name/25-9",[]],["text/25-9",[]],["component/25-9",[]],["title/25",[158,18.516,483,21.101,484,32.093]],["name/25",[1296,1.258]],["text/25",[3,0.752,8,1.281,10,0.526,12,4.345,16,0.812,26,0.302,33,0.689,35,1.039,41,1.572,67,0.911,75,1.049,80,0.734,86,0.446,91,0.994,92,1.17,93,1.951,114,1.449,130,0.772,147,2.645,148,1.207,149,1.077,150,2.256,152,0.614,154,2.2,156,2.683,158,3.361,161,0.555,168,1.271,169,0.59,177,1.229,178,0.653,182,0.582,189,1.966,190,2.159,194,0.886,196,0.653,207,1.12,212,0.676,227,0.903,229,1.136,230,1.608,268,0.623,269,0.763,326,0.623,333,0.453,354,0.718,355,0.511,363,1.189,374,1.745,389,0.623,462,0.85,466,4.762,476,0.606,480,3.072,483,3.362,484,4.515,500,0.734,510,2.636,587,0.794,593,0.689,625,0.931,677,2.245,705,1.786,710,0.886,717,0.772,739,0.752,753,0.886,763,5.29,764,0.484,801,1.517,805,0.991,840,1.814,888,0.59,889,0.464,896,1.484,912,1.345,913,1.133,915,0.838,916,0.492,936,0.653,953,0.82,982,1.328,983,0.794,986,0.703,1010,0.886,1018,0.598,1039,0.886,1084,0.886,1101,3.535,1104,0.676,1112,0.606,1150,1.391,1151,1.638,1209,0.85,1211,1.391,1228,0.734,1265,1.517,1266,0.85,1296,5.051,1297,0.886,1298,0.991,1299,1.722,1300,1.083,1301,1.083,1302,0.85,1303,1.083,1304,1.833,1305,2.402,1306,0.931,1307,0.931,1308,0.991,1309,1.833,1310,1.083,1311,1.083,1312,2.402,1313,1.722,1314,0.991,1315,0.85,1316,1.517,1317,0.931,1318,0.931,1319,0.886,1320,0.886,1321,1.083,1322,2.193,1323,1.517,1324,1.572,1325,0.931,1326,1.722,1327,0.85,1328,0.752,1329,0.931,1330,0.931,1331,1.083,1332,0.991,1333,1.572,1334,0.931,1335,2.733,1336,0.794,1337,1.083,1338,1.083,1339,1.083,1340,0.991,1341,3.48,1342,3.625,1343,1.083,1344,1.083,1345,1.517,1346,0.85,1347,1.083,1348,1.083,1349,0.991]],["component/25",[1,0.416]],["title/26-1",[23,25.698]],["name/26-1",[]],["text/26-1",[]],["component/26-1",[]],["title/26-2",[896,35.395]],["name/26-2",[]],["text/26-2",[]],["component/26-2",[]],["title/26-3",[26,18.567]],["name/26-3",[]],["text/26-3",[]],["component/26-3",[]],["title/26-4",[334,23.439]],["name/26-4",[]],["text/26-4",[]],["component/26-4",[]],["title/26-5",[269,18.198]],["name/26-5",[]],["text/26-5",[]],["component/26-5",[]],["title/26-6",[887,25.345]],["name/26-6",[]],["text/26-6",[]],["component/26-6",[]],["title/26-7",[788,19.048,889,21.157]],["name/26-7",[]],["text/26-7",[]],["component/26-7",[]],["title/26-8",[15,18.786,341,23.087]],["name/26-8",[]],["text/26-8",[]],["component/26-8",[]],["title/26",[125,20.71,158,15.358,483,17.503,485,23.872]],["name/26",[1350,1.258]],["text/26",[8,1.764,10,1.189,11,1.144,12,2.547,16,0.992,26,0.375,43,1.557,67,0.613,75,1.799,85,1.102,86,0.555,91,1.668,92,1.429,93,2.247,104,0.988,125,4.014,127,1.158,128,0.775,130,0.96,135,1.065,140,2.001,143,0.988,147,2.362,148,1.057,149,1.316,150,1.831,154,1.785,156,1.634,158,3.475,161,0.691,163,0.893,168,1.113,169,0.734,178,0.813,182,1.316,189,1.177,190,1.144,191,0.96,192,0.743,196,0.813,207,0.754,229,1.388,230,1.934,244,1.057,268,0.775,269,0.668,318,0.618,330,0.857,332,0.813,333,0.563,349,1.057,350,0.707,354,0.893,355,0.636,362,1.057,374,2.099,387,1.852,392,1.501,430,1.808,436,1.02,454,0.913,476,0.754,477,2.33,483,2.886,485,4.627,487,0.96,492,2.74,508,0.935,509,0.841,526,1.158,569,0.893,596,1.02,653,1.057,705,0.691,723,0.935,752,1.057,764,0.602,765,1.158,791,0.734,797,1.158,840,1.588,876,1.795,884,1.158,887,0.512,888,0.734,889,0.577,896,2.196,908,1.158,912,1.617,913,0.992,915,1.023,916,0.613,926,1.158,941,0.988,947,0.642,948,0.96,958,0.874,969,1.744,982,2.228,1018,0.743,1053,4.496,1057,1.994,1084,1.102,1101,2.051,1147,1.057,1213,1.699,1302,1.057,1316,1.852,1322,1.92,1323,1.02,1324,1.057,1333,1.057,1345,1.02,1346,1.057,1350,2.239,1351,1.158,1352,2.001,1353,2.889,1354,1.102,1355,1.158,1356,1.347,1357,1.347,1358,2.749,1359,1.347,1360,1.347,1361,1.158,1362,6.999,1363,1.347,1364,1.102,1365,3.782,1366,1.102,1367,1.233,1368,1.233,1369,2.103,1370,2.239,1371,1.233,1372,1.102,1373,1.057,1374,2.239,1375,2.239,1376,1.158,1377,1.233,1378,2.103,1379,1.158,1380,1.158,1381,1.158,1382,1.233]],["component/26",[1,0.416]],["title/27-1",[23,25.698]],["name/27-1",[]],["text/27-1",[]],["component/27-1",[]],["title/27-2",[896,35.395]],["name/27-2",[]],["text/27-2",[]],["component/27-2",[]],["title/27-3",[169,26.902,1353,42.449]],["name/27-3",[]],["text/27-3",[]],["component/27-3",[]],["title/27-4",[896,26.235,1238,40.397]],["name/27-4",[]],["text/27-4",[]],["component/27-4",[]],["title/27-5",[26,18.567]],["name/27-5",[]],["text/27-5",[]],["component/27-5",[]],["title/27-6",[334,23.439]],["name/27-6",[]],["text/27-6",[]],["component/27-6",[]],["title/27-7",[269,18.198]],["name/27-7",[]],["text/27-7",[]],["component/27-7",[]],["title/27-8",[887,25.345]],["name/27-8",[]],["text/27-8",[]],["component/27-8",[]],["title/27-9",[788,19.048,889,21.157]],["name/27-9",[]],["text/27-9",[]],["component/27-9",[]],["title/27-10",[15,18.786,341,23.087]],["name/27-10",[]],["text/27-10",[]],["component/27-10",[]],["title/27",[125,24.967,158,18.516,483,21.101]],["name/27",[399,1.182]],["text/27",[3,0.615,8,1.287,10,1.701,11,0.777,12,2.119,16,0.674,24,0.51,25,0.725,26,0.463,67,0.755,69,0.534,72,0.761,75,1.497,80,0.601,86,0.365,91,1.736,92,2.044,93,1.993,95,1.154,96,1.184,99,0.725,107,1.52,108,0.587,111,0.553,124,0.496,125,3.905,130,0.632,135,0.386,140,1.359,147,1.784,148,0.718,149,1.589,150,1.549,154,2.872,156,2.844,158,3.902,161,0.454,165,0.564,168,0.755,169,1.609,173,0.518,176,0.465,177,1.812,178,1.415,188,0.632,189,0.8,190,0.777,191,0.632,192,0.489,196,0.534,205,0.632,207,0.496,210,0.544,211,0.615,212,1.038,227,0.399,229,1.676,230,1.35,268,0.956,269,0.454,318,0.407,326,0.956,330,1.057,331,0.632,332,0.534,333,0.371,346,0.518,354,0.587,355,0.418,362,0.695,374,1.465,387,0.671,389,0.51,399,1.428,430,1.881,462,0.695,476,1.312,477,0.431,480,3.702,483,3.301,484,1.359,485,0.65,500,0.601,536,0.811,540,0.526,569,0.587,570,0.971,587,0.65,596,0.671,654,0.811,705,0.454,717,0.632,723,0.615,747,0.725,753,0.725,763,0.601,764,0.396,791,0.483,797,0.761,801,1.258,808,0.761,840,1.917,884,0.761,887,0.337,888,0.483,889,0.38,896,2.354,900,0.51,912,1.129,913,0.674,915,0.695,916,0.403,935,0.695,936,0.534,947,0.792,948,0.632,953,0.671,954,1.428,982,3.449,986,1.078,1018,1.295,1039,0.725,1053,4.17,1054,0.761,1057,1.392,1101,1.466,1104,1.465,1147,0.695,1150,1.154,1151,1.359,1209,0.695,1213,1.154,1215,0.632,1223,1.154,1228,0.601,1238,1.359,1251,1.154,1302,0.695,1316,2.237,1317,0.761,1318,0.761,1319,0.725,1320,0.725,1322,2.745,1323,1.776,1324,1.841,1325,0.761,1326,1.428,1327,0.695,1328,0.615,1329,0.761,1330,2.539,1333,1.304,1345,1.258,1346,0.695,1353,1.428,1358,1.919,1364,0.725,1365,4.424,1366,0.725,1367,0.811,1368,0.811,1369,1.428,1370,1.52,1371,0.811,1372,1.359,1373,0.695,1374,1.52,1375,1.52,1376,1.428,1377,1.52,1378,1.428,1379,0.761,1380,0.761,1381,0.761,1382,0.811,1383,0.886,1384,0.886,1385,0.886,1386,0.886,1387,0.886,1388,0.811,1389,0.695,1390,0.886,1391,0.886,1392,0.886,1393,0.811,1394,0.886,1395,0.886,1396,0.811,1397,0.761,1398,1.661,1399,0.886,1400,0.886,1401,1.661,1402,0.761,1403,0.886,1404,0.886,1405,0.761,1406,0.65,1407,0.811,1408,5.848,1409,0.886,1410,0.886]],["component/27",[1,0.416]],["title/28-1",[23,25.698]],["name/28-1",[]],["text/28-1",[]],["component/28-1",[]],["title/28-2",[896,35.395]],["name/28-2",[]],["text/28-2",[]],["component/28-2",[]],["title/28-3",[26,18.567]],["name/28-3",[]],["text/28-3",[]],["component/28-3",[]],["title/28-4",[334,23.439]],["name/28-4",[]],["text/28-4",[]],["component/28-4",[]],["title/28-5",[269,18.198]],["name/28-5",[]],["text/28-5",[]],["component/28-5",[]],["title/28-6",[887,25.345]],["name/28-6",[]],["text/28-6",[]],["component/28-6",[]],["title/28-7",[788,19.048,889,21.157]],["name/28-7",[]],["text/28-7",[]],["component/28-7",[]],["title/28-8",[15,18.786,341,23.087]],["name/28-8",[]],["text/28-8",[]],["component/28-8",[]],["title/28",[125,20.71,158,15.358,483,17.503,486,26.62]],["name/28",[1411,1.258]],["text/28",[8,1.644,12,1.427,13,2.106,15,0.568,16,1.09,26,0.416,64,1.284,67,0.679,75,1.677,86,0.615,91,1.333,92,0.873,93,2.199,104,1.096,125,4.728,127,1.284,128,0.86,130,1.065,135,1.17,140,1.222,141,0.901,146,2.481,147,2.852,148,1.93,149,1.445,150,2.283,153,0.99,154,2.226,156,2.173,158,4.013,161,0.766,163,2.426,164,0.901,165,0.95,166,1.065,167,1.096,168,2.841,169,0.814,178,0.901,189,1.293,190,1.256,196,0.901,209,2.541,221,0.969,229,0.847,230,2.573,232,1.096,246,1.78,269,0.734,332,0.901,333,1.123,341,0.698,346,1.569,349,1.172,354,1.78,374,2.285,387,1.131,392,0.916,436,1.131,454,1.013,477,0.726,483,4.314,485,3.781,486,3.656,489,1.172,492,0.99,500,2.481,508,1.037,599,0.95,705,0.766,752,1.172,764,0.667,840,1.743,876,1.096,887,0.568,888,0.814,889,0.64,896,1.427,908,2.309,912,1.761,913,1.09,915,1.123,916,0.679,933,1.172,958,0.969,982,1.78,1053,3.674,1057,0.886,1101,2.218,1154,1.367,1163,1.013,1316,1.131,1322,2.108,1323,1.131,1324,1.172,1330,1.284,1345,1.131,1346,1.172,1351,1.284,1358,1.222,1362,3.349,1378,2.309,1379,1.284,1380,1.284,1381,1.284,1406,1.096,1411,5.718,1412,1.367,1413,1.284,1414,5.738,1415,2.685,1416,1.367,1417,1.131,1418,1.493,1419,1.096,1420,1.493,1421,1.493,1422,1.493,1423,1.493,1424,1.493,1425,1.493,1426,1.493]],["component/28",[1,0.416]],["title/29-1",[23,25.698]],["name/29-1",[]],["text/29-1",[]],["component/29-1",[]],["title/29-2",[896,35.395]],["name/29-2",[]],["text/29-2",[]],["component/29-2",[]],["title/29-3",[158,23.307,1333,38.759]],["name/29-3",[]],["text/29-3",[]],["component/29-3",[]],["title/29-4",[26,18.567]],["name/29-4",[]],["text/29-4",[]],["component/29-4",[]],["title/29-5",[334,23.439]],["name/29-5",[]],["text/29-5",[]],["component/29-5",[]],["title/29-6",[269,18.198]],["name/29-6",[]],["text/29-6",[]],["component/29-6",[]],["title/29-7",[887,25.345]],["name/29-7",[]],["text/29-7",[]],["component/29-7",[]],["title/29-8",[788,19.048,889,21.157]],["name/29-8",[]],["text/29-8",[]],["component/29-8",[]],["title/29-9",[15,18.786,341,23.087]],["name/29-9",[]],["text/29-9",[]],["component/29-9",[]],["title/29-10",[1034,32.389]],["name/29-10",[]],["text/29-10",[]],["component/29-10",[]],["title/29",[158,18.516,480,23.665,483,21.101]],["name/29",[1427,1.258]],["text/29",[3,0.802,8,1.348,10,0.561,12,3.053,16,0.862,26,0.322,35,1.901,41,1.668,67,0.966,69,0.697,75,1.108,80,0.783,86,0.476,91,1.055,92,0.675,93,1.404,111,0.721,114,0.599,125,1.352,130,0.823,147,2.47,148,1.275,149,1.143,150,1.898,152,0.655,154,2.296,156,3.152,158,3.346,161,0.592,164,0.697,168,1.342,169,1.158,177,1.304,178,0.697,182,0.621,188,0.823,189,1.421,190,1.713,192,0.637,227,1.33,229,1.206,230,1.699,259,0.735,268,0.665,269,0.806,326,0.665,333,0.483,350,1.115,354,0.765,355,0.545,363,1.752,374,1.844,376,0.765,389,0.665,415,0.802,462,0.906,466,4.723,476,1.189,477,0.561,480,4.717,483,3.487,500,0.783,510,1.609,526,0.993,567,1.057,573,1.057,587,0.847,593,0.735,677,1.033,705,1.09,739,0.802,753,0.945,763,2.001,764,0.516,796,0.735,801,1.609,840,1.916,888,0.629,889,0.495,896,1.129,912,1.421,913,1.197,915,0.889,916,0.525,936,0.697,953,0.874,969,0.823,974,1.352,982,1.409,983,0.847,985,0.874,990,0.993,1002,0.993,1010,0.945,1018,0.637,1039,0.945,1084,2.415,1085,0.993,1099,1.668,1101,2.638,1104,0.721,1112,0.646,1118,0.823,1150,2.05,1151,1.738,1209,0.906,1213,2.545,1215,0.823,1223,1.476,1228,0.783,1238,0.945,1265,1.609,1266,1.668,1299,0.993,1304,1.945,1305,1.827,1306,0.993,1307,1.827,1308,1.945,1309,1.945,1312,2.537,1313,0.993,1314,1.057,1315,0.906,1316,1.609,1317,0.993,1318,0.993,1319,0.945,1320,0.945,1322,2.317,1323,1.609,1324,1.668,1325,0.993,1326,2.537,1327,0.906,1328,0.802,1329,0.993,1333,2.876,1334,0.993,1335,2.876,1340,1.057,1342,2.317,1345,1.609,1346,0.906,1349,1.057,1358,0.945,1405,0.993,1427,4.865,1428,1.154,1429,1.057,1430,1.154,1431,0.993,1432,0.945,1433,1.154,1434,1.154,1435,0.906,1436,1.154,1437,0.874,1438,1.154,1439,1.154,1440,1.154,1441,1.154,1442,1.154,1443,1.154,1444,1.154,1445,1.154]],["component/29",[1,0.416]],["title/30-1",[23,25.698]],["name/30-1",[]],["text/30-1",[]],["component/30-1",[]],["title/30-2",[26,18.567]],["name/30-2",[]],["text/30-2",[]],["component/30-2",[]],["title/30-3",[334,23.439]],["name/30-3",[]],["text/30-3",[]],["component/30-3",[]],["title/30-4",[269,18.198]],["name/30-4",[]],["text/30-4",[]],["component/30-4",[]],["title/30-5",[887,25.345]],["name/30-5",[]],["text/30-5",[]],["component/30-5",[]],["title/30-6",[788,25.698]],["name/30-6",[]],["text/30-6",[]],["component/30-6",[]],["title/30-7",[788,19.048,889,21.157]],["name/30-7",[]],["text/30-7",[]],["component/30-7",[]],["title/30-8",[1034,32.389]],["name/30-8",[]],["text/30-8",[]],["component/30-8",[]],["title/30",[28,35.205,496,42.449]],["name/30",[1446,1.258]],["text/30",[8,2.264,11,3.738,16,1.624,26,0.657,67,1.071,75,0.884,82,1.728,86,0.97,93,2.357,101,1.927,114,2.077,128,1.356,147,3.22,148,1.018,149,2.153,150,3.055,154,1.018,156,1.946,160,1.837,161,1.208,168,2.374,176,1.237,189,2.512,190,2.44,210,1.445,227,1.062,229,1.337,230,3.969,269,1.426,333,0.985,338,4.029,346,2.339,350,1.237,354,1.562,355,1.112,367,1.445,421,2.156,477,1.946,496,5.29,598,4.097,677,1.946,705,1.208,760,1.927,764,1.053,840,2.598,888,1.283,889,1.009,900,1.356,912,2.962,913,2.117,915,1.674,916,1.071,926,2.025,933,1.849,989,1.927,1018,1.3,1062,2.156,1101,3.969,1186,1.679,1334,2.025,1335,1.849,1369,2.025,1446,6.862,1447,4.002,1448,2.355,1449,2.355,1450,2.355,1451,2.156,1452,2.355,1453,2.355,1454,2.156,1455,4.002,1456,2.355,1457,2.355,1458,2.355,1459,1.784,1460,2.355]],["component/30",[1,0.416]],["title/31-1",[23,25.698]],["name/31-1",[]],["text/31-1",[]],["component/31-1",[]],["title/31-2",[26,18.567]],["name/31-2",[]],["text/31-2",[]],["component/31-2",[]],["title/31-3",[334,23.439]],["name/31-3",[]],["text/31-3",[]],["component/31-3",[]],["title/31-4",[269,18.198]],["name/31-4",[]],["text/31-4",[]],["component/31-4",[]],["title/31-5",[887,25.345]],["name/31-5",[]],["text/31-5",[]],["component/31-5",[]],["title/31-6",[8,18.168,915,20.657]],["name/31-6",[]],["text/31-6",[]],["component/31-6",[]],["title/31-7",[10,32.389]],["name/31-7",[]],["text/31-7",[]],["component/31-7",[]],["title/31-8",[8,18.168,1208,28.426]],["name/31-8",[]],["text/31-8",[]],["component/31-8",[]],["title/31-9",[788,19.048,889,21.157]],["name/31-9",[]],["text/31-9",[]],["component/31-9",[]],["title/31-10",[15,18.786,341,23.087]],["name/31-10",[]],["text/31-10",[]],["component/31-10",[]],["title/31",[491,47.496]],["name/31",[491,0.98]],["text/31",[0,0.794,8,2.94,11,0.534,12,1.931,16,1.475,19,0.623,21,0.758,24,0.658,26,0.319,27,0.794,28,0.815,61,0.935,67,0.957,69,0.689,75,2.647,86,0.471,91,0.567,93,2.896,108,0.758,111,1.315,115,0.983,128,1.212,135,1.853,147,1.713,148,0.909,150,1.884,154,0.494,156,2.567,160,0.525,164,0.689,168,0.957,176,0.6,180,0.631,185,0.6,189,1.013,190,0.984,192,1.162,196,0.689,203,3.966,212,1.315,227,0.949,249,0.714,255,1.828,268,0.658,269,1.31,289,1.249,311,1.046,326,0.658,332,0.689,334,0.741,343,1.544,346,0.668,355,0.994,369,1.594,390,0.866,425,3.253,430,1.132,474,0.794,476,0.639,477,0.556,491,6.654,512,1.544,513,2.23,516,2.667,529,0.866,540,0.678,587,0.838,591,0.983,609,0.815,656,1.427,666,0.838,705,0.586,709,1.046,720,0.935,764,0.941,789,0.866,791,0.623,804,0.794,840,0.742,875,0.983,888,0.623,889,0.49,900,2.762,912,1.408,913,1.475,915,0.881,916,0.52,927,0.758,947,0.545,950,0.983,958,0.742,969,0.815,978,0.983,982,0.758,1012,0.935,1038,0.983,1057,1.737,1074,0.545,1101,1.804,1109,0.742,1133,2.667,1158,0.838,1168,1.684,1223,1.462,1302,0.897,1461,1.143,1462,2.925,1463,0.983,1464,1.143,1465,1.143,1466,2.104,1467,1.046,1468,1.046,1469,1.143,1470,1.046,1471,1.143,1472,1.143,1473,1.143,1474,1.143,1475,1.143,1476,7.315,1477,1.143,1478,2.925,1479,0.983,1480,1.046,1481,0.815,1482,3.125,1483,1.544,1484,2.297,1485,1.81,1486,1.462,1487,3.327,1488,1.143,1489,0.983,1490,1.143,1491,1.927,1492,1.143,1493,1.046,1494,1.143,1495,1.143,1496,2.925,1497,1.143,1498,1.046,1499,2.104,1500,2.104,1501,4.252,1502,2.104,1503,1.143,1504,1.143,1505,1.143,1506,1.143,1507,1.046,1508,1.143,1509,1.143,1510,1.143,1511,1.143,1512,1.722,1513,0.866,1514,1.143,1515,1.046]],["component/31",[1,0.416]],["title/32-1",[23,25.698]],["name/32-1",[]],["text/32-1",[]],["component/32-1",[]],["title/32-2",[26,18.567]],["name/32-2",[]],["text/32-2",[]],["component/32-2",[]],["title/32-3",[334,23.439]],["name/32-3",[]],["text/32-3",[]],["component/32-3",[]],["title/32-4",[269,18.198]],["name/32-4",[]],["text/32-4",[]],["component/32-4",[]],["title/32-5",[887,25.345]],["name/32-5",[]],["text/32-5",[]],["component/32-5",[]],["title/32-6",[8,18.168,915,20.657]],["name/32-6",[]],["text/32-6",[]],["component/32-6",[]],["title/32-7",[15,18.786,341,23.087]],["name/32-7",[]],["text/32-7",[]],["component/32-7",[]],["title/32",[485,36.227,492,32.737]],["name/32",[1516,1.258]],["text/32",[0,1.204,7,3.865,8,2.811,10,0.843,11,0.81,15,0.66,16,1.245,19,0.944,26,0.483,43,1.103,55,1.272,67,0.788,75,1.548,91,0.86,93,2.183,96,1.236,135,0.755,145,1.029,147,2.008,148,1.325,150,1.359,163,2.034,168,1.395,177,1.882,178,1.046,192,0.957,204,1.103,207,0.97,227,1.383,230,1.766,249,1.916,269,1.362,315,1.49,322,1.49,326,0.998,332,1.046,333,0.725,334,0.61,347,1.236,348,1.149,350,0.91,355,0.818,369,1.313,376,1.149,392,1.882,425,2.08,430,0.932,438,1.361,440,1.149,461,1.49,476,0.97,477,2.77,485,4.997,491,1.236,492,4.176,493,2.323,500,1.175,505,1.125,513,1.064,520,1.149,547,1.272,570,1.792,580,1.361,603,1.236,620,1.418,656,2.797,666,1.272,694,2.034,705,0.889,796,1.103,896,0.921,900,0.998,913,1.245,947,0.826,974,1.103,982,1.149,1017,1.149,1057,1.821,1063,4.089,1074,0.826,1080,1.418,1109,1.125,1120,1.313,1150,1.204,1158,1.272,1186,1.236,1211,1.204,1251,2.13,1328,2.13,1354,1.418,1355,2.637,1389,1.361,1407,1.587,1413,1.49,1417,1.313,1432,1.418,1481,2.187,1483,1.272,1512,2.509,1513,1.313,1515,1.587,1516,5.765,1517,3.067,1518,1.587,1519,1.587,1520,1.733,1521,1.733,1522,1.733,1523,1.733,1524,1.49,1525,1.733,1526,1.361,1527,1.49,1528,3.067,1529,1.733,1530,1.733,1531,1.733,1532,1.733,1533,1.733,1534,1.49,1535,1.587,1536,1.418,1537,1.49,1538,1.587,1539,1.49,1540,6.297,1541,1.587,1542,1.733,1543,1.733,1544,1.313,1545,3.067,1546,4.125,1547,1.733,1548,1.418]],["component/32",[1,0.416]],["title/33-1",[23,25.698]],["name/33-1",[]],["text/33-1",[]],["component/33-1",[]],["title/33-2",[26,18.567]],["name/33-2",[]],["text/33-2",[]],["component/33-2",[]],["title/33-3",[334,23.439]],["name/33-3",[]],["text/33-3",[]],["component/33-3",[]],["title/33-4",[269,18.198]],["name/33-4",[]],["text/33-4",[]],["component/33-4",[]],["title/33-5",[887,25.345]],["name/33-5",[]],["text/33-5",[]],["component/33-5",[]],["title/33-6",[8,18.168,915,20.657]],["name/33-6",[]],["text/33-6",[]],["component/33-6",[]],["title/33-7",[8,18.168,1208,28.426]],["name/33-7",[]],["text/33-7",[]],["component/33-7",[]],["title/33-8",[788,19.048,889,21.157]],["name/33-8",[]],["text/33-8",[]],["component/33-8",[]],["title/33-9",[15,18.786,341,23.087]],["name/33-9",[]],["text/33-9",[]],["component/33-9",[]],["title/33-10",[1208,38.35]],["name/33-10",[]],["text/33-10",[]],["component/33-10",[]],["title/33-11",[1034,32.389]],["name/33-11",[]],["text/33-11",[]],["component/33-11",[]],["title/33",[492,32.737,493,37.395]],["name/33",[1539,1.182]],["text/33",[7,3.341,8,2.592,12,1.457,16,1.388,26,0.295,43,0.675,45,0.629,67,0.482,75,1.284,86,1.13,91,0.526,93,2.365,135,0.462,145,0.629,147,1.832,148,1.736,150,2.581,154,0.848,160,0.901,168,1.828,176,0.556,189,0.51,190,0.496,192,1.514,204,0.675,207,1.099,230,1.13,246,0.703,249,1.227,269,1.242,289,1.628,291,0.778,331,0.756,332,0.639,333,0.443,334,0.373,347,0.756,355,1.295,369,0.803,423,2.153,425,1.331,430,0.57,440,0.703,459,0.832,461,0.911,472,0.736,492,4.093,493,6.137,505,4.401,513,1.205,516,0.778,520,0.703,540,1.165,570,1.603,580,0.832,589,1.302,603,0.756,620,0.867,653,0.832,656,3.95,666,0.778,677,1.664,705,0.544,739,0.736,764,0.474,773,1.86,791,0.577,796,0.675,816,1.541,818,1.797,882,1.043,888,0.577,889,0.454,912,1.935,913,1.845,915,1.432,916,0.482,943,0.803,982,0.703,986,1.275,987,0.803,988,0.911,1017,4.093,1018,2.511,1057,1.165,1063,2.222,1080,0.867,1081,0.867,1101,2.492,1120,0.803,1133,0.778,1148,1.364,1150,0.736,1152,1.541,1158,2.511,1168,2.89,1225,0.97,1265,0.803,1328,1.364,1355,1.688,1372,2.244,1389,0.832,1419,1.441,1432,0.867,1463,0.911,1479,0.911,1481,0.756,1484,0.832,1498,0.97,1512,1.606,1513,2.592,1527,0.911,1534,0.911,1535,0.97,1536,1.606,1537,0.911,1538,0.97,1539,1.688,1541,5.94,1548,2.244,1549,0.97,1550,1.06,1551,0.867,1552,1.06,1553,1.06,1554,1.06,1555,1.06,1556,1.06,1557,3.679,1558,1.06,1559,3.679,1560,1.06,1561,1.963,1562,4.018,1563,1.06,1564,1.06,1565,1.06,1566,1.06,1567,1.06,1568,1.06,1569,1.06,1570,3.132,1571,2.742,1572,1.963,1573,4.018,1574,1.06,1575,1.06,1576,1.06,1577,1.06,1578,1.06,1579,1.06,1580,1.06,1581,1.06]],["component/33",[1,0.416]],["title/34-1",[23,25.698]],["name/34-1",[]],["text/34-1",[]],["component/34-1",[]],["title/34-2",[26,18.567]],["name/34-2",[]],["text/34-2",[]],["component/34-2",[]],["title/34-3",[334,23.439]],["name/34-3",[]],["text/34-3",[]],["component/34-3",[]],["title/34-4",[269,18.198]],["name/34-4",[]],["text/34-4",[]],["component/34-4",[]],["title/34-5",[887,25.345]],["name/34-5",[]],["text/34-5",[]],["component/34-5",[]],["title/34-6",[788,19.048,889,21.157]],["name/34-6",[]],["text/34-6",[]],["component/34-6",[]],["title/34-7",[15,18.786,341,23.087]],["name/34-7",[]],["text/34-7",[]],["component/34-7",[]],["title/34-8",[1034,32.389]],["name/34-8",[]],["text/34-8",[]],["component/34-8",[]],["title/34-9",[1208,38.35]],["name/34-9",[]],["text/34-9",[]],["component/34-9",[]],["title/34",[376,32.737,377,35.205]],["name/34",[1582,1.182]],["text/34",[1,0.504,8,2.04,13,2.786,16,1.62,26,0.464,33,1.059,35,2.071,67,1.345,75,1.498,86,0.685,93,1.529,108,1.103,114,1.534,129,1.784,135,0.725,145,1.755,147,1.608,148,0.719,149,0.895,150,0.737,154,1.277,156,2.353,158,2.617,160,0.763,161,1.517,164,1.004,168,2.201,173,0.972,176,0.873,178,1.004,229,1.678,246,1.103,269,1.322,333,0.696,339,1.815,354,1.103,355,1.884,374,2.494,376,3.676,377,2.846,389,0.958,430,0.895,435,1.306,449,2.592,465,2.419,466,4.929,483,1.591,494,4.821,548,1.306,570,1.728,677,2.986,695,1.103,763,1.128,764,0.743,815,1.523,816,1.306,873,1.306,888,0.906,889,0.713,892,1.523,912,2.329,913,1.963,915,1.67,916,0.757,933,1.306,936,1.004,944,6.365,951,1.43,952,1.43,953,1.26,974,1.059,1003,2.542,1018,3.061,1085,1.43,1148,3.361,1186,1.186,1226,1.523,1405,1.43,1406,1.22,1582,7.958,1583,1.663,1584,1.663,1585,1.663,1586,1.663,1587,1.663,1588,1.523,1589,1.523,1590,2.956,1591,4.429,1592,5.075,1593,1.663,1594,1.663,1595,1.663,1596,1.663,1597,2.707,1598,4.429,1599,1.663,1600,1.663,1601,1.663,1602,1.663,1603,1.663,1604,1.663,1605,1.663,1606,1.663]],["component/34",[1,0.416]],["title/35-1",[23,25.698]],["name/35-1",[]],["text/35-1",[]],["component/35-1",[]],["title/35-2",[26,18.567]],["name/35-2",[]],["text/35-2",[]],["component/35-2",[]],["title/35-3",[334,23.439]],["name/35-3",[]],["text/35-3",[]],["component/35-3",[]],["title/35-4",[269,18.198]],["name/35-4",[]],["text/35-4",[]],["component/35-4",[]],["title/35-5",[887,25.345]],["name/35-5",[]],["text/35-5",[]],["component/35-5",[]],["title/35-6",[788,25.698]],["name/35-6",[]],["text/35-6",[]],["component/35-6",[]],["title/35-7",[788,19.048,889,21.157]],["name/35-7",[]],["text/35-7",[]],["component/35-7",[]],["title/35-8",[1034,32.389]],["name/35-8",[]],["text/35-8",[]],["component/35-8",[]],["title/35",[207,18.206,350,17.081,476,18.206,495,27.972]],["name/35",[1607,1.258]],["text/35",[8,2.249,11,3.204,16,1.61,24,1.342,26,1.106,27,1.619,28,1.662,67,1.06,75,1.489,80,1.581,86,0.96,93,2.342,114,2.058,124,1.304,141,1.406,147,3.204,148,1.007,149,2.134,150,3.036,154,1.007,156,1.929,160,1.821,161,1.196,168,2.356,189,2.493,190,2.421,205,1.662,207,1.304,211,1.619,230,3.945,231,2.134,255,1.456,269,1.415,333,0.975,338,4.005,343,1.71,346,2.319,350,1.224,354,1.546,355,1.1,376,1.546,438,1.83,440,1.546,476,1.304,477,1.929,495,3.411,540,1.384,598,4.065,677,1.929,705,1.196,720,1.907,764,1.042,789,1.766,840,2.576,888,1.27,889,0.999,906,1.907,912,2.942,913,2.101,915,1.66,916,1.06,966,2.004,994,2.134,1018,1.287,1101,3.949,1194,3.632,1260,1.83,1335,1.83,1352,1.907,1354,1.907,1431,2.004,1454,2.134,1607,6.273,1608,2.331,1609,2.004,1610,2.331,1611,2.134,1612,2.331,1613,2.331,1614,2.331,1615,2.331,1616,2.331,1617,2.331]],["component/35",[1,0.416]],["title/36-1",[23,25.698]],["name/36-1",[]],["text/36-1",[]],["component/36-1",[]],["title/36-2",[26,18.567]],["name/36-2",[]],["text/36-2",[]],["component/36-2",[]],["title/36-3",[334,23.439]],["name/36-3",[]],["text/36-3",[]],["component/36-3",[]],["title/36-4",[269,18.198]],["name/36-4",[]],["text/36-4",[]],["component/36-4",[]],["title/36-5",[887,25.345]],["name/36-5",[]],["text/36-5",[]],["component/36-5",[]],["title/36-6",[788,25.698]],["name/36-6",[]],["text/36-6",[]],["component/36-6",[]],["title/36",[377,35.205,494,38.759]],["name/36",[402,1.182]],["text/36",[8,1.928,10,1.151,12,2.136,13,3.016,15,0.901,16,1.631,26,0.66,43,1.507,75,1.509,86,0.975,93,3.071,135,1.031,147,1.619,148,1.023,150,1.781,154,1.023,156,1.151,160,2.404,189,1.935,190,1.88,192,1.307,196,1.429,209,2.792,216,1.57,227,1.067,230,2.314,269,1.431,333,0.991,348,1.57,350,2.111,354,1.57,374,1.479,377,1.688,392,2.467,402,6.463,430,1.274,454,1.606,466,2.792,492,1.57,494,5.901,537,1.859,548,1.859,694,1.57,705,1.215,763,4.187,764,1.058,765,2.036,788,0.913,791,1.29,900,1.363,913,0.961,915,0.991,916,1.077,943,3.045,944,5.238,947,1.129,977,1.645,1018,2.219,1074,2.497,1082,1.937,1088,2.167,1101,3.433,1109,1.537,1148,1.645,1270,3.473,1431,2.036,1479,2.036,1483,1.737,1519,3.68,1544,1.793,1582,5.308,1591,2.167,1592,2.167,1597,3.68,1598,4.795,1618,4.019,1619,2.367,1620,4.019,1621,4.019,1622,2.367,1623,5.238,1624,2.367]],["component/36",[1,0.416]],["title/37-1",[23,25.698]],["name/37-1",[]],["text/37-1",[]],["component/37-1",[]],["title/37-2",[26,18.567]],["name/37-2",[]],["text/37-2",[]],["component/37-2",[]],["title/37-3",[334,23.439]],["name/37-3",[]],["text/37-3",[]],["component/37-3",[]],["title/37-4",[269,18.198]],["name/37-4",[]],["text/37-4",[]],["component/37-4",[]],["title/37-5",[887,25.345]],["name/37-5",[]],["text/37-5",[]],["component/37-5",[]],["title/37-6",[788,19.048,889,21.157]],["name/37-6",[]],["text/37-6",[]],["component/37-6",[]],["title/37-7",[332,40.19]],["name/37-7",[]],["text/37-7",[]],["component/37-7",[]],["title/37-8",[1208,38.35]],["name/37-8",[]],["text/37-8",[]],["component/37-8",[]],["title/37-9",[10,32.389]],["name/37-9",[]],["text/37-9",[]],["component/37-9",[]],["title/37",[1011,52.291]],["name/37",[1011,1.079]],["text/37",[1,0.483,6,1.014,8,1.725,16,1.155,26,1.501,30,1.08,35,3.597,39,1.251,40,1.303,51,1.251,61,1.303,75,1.068,93,4.145,116,4.63,122,1.034,135,0.694,138,1.458,145,0.946,149,2.074,150,1.261,154,0.688,160,0.731,168,1.754,169,2.101,185,1.494,204,1.014,205,1.136,207,1.592,210,0.978,212,0.995,229,0.904,233,0.879,246,1.056,268,0.917,269,1.053,286,4.407,292,2.557,316,1.207,320,1.887,350,0.836,355,2.822,427,2.984,517,5.626,520,1.056,540,3.197,555,1.251,565,3.952,570,0.931,589,1.887,630,5.579,643,2.605,671,1.458,705,0.817,773,3.179,788,0.615,882,0.846,888,0.868,889,0.683,912,2.257,913,1.565,915,0.666,935,3.68,986,1.034,1011,6.26,1012,1.303,1013,1.207,1014,1.458,1015,1.458,1223,1.977,1228,1.08,1419,1.169,1481,1.136,1486,1.977,1625,2.845,1626,2.328,1627,2.328,1628,1.593,1629,2.605,1630,1.458,1631,1.458,1632,1.593,1633,1.593,1634,1.593,1635,1.593,1636,2.845,1637,2.845,1638,1.458,1639,1.593,1640,1.593,1641,1.593,1642,1.593,1643,1.593,1644,1.593,1645,2.605,1646,1.458,1647,1.593,1648,1.593,1649,4.687,1650,4.687,1651,1.593,1652,1.593,1653,1.593]],["component/37",[1,0.416]],["title/38-1",[23,25.698]],["name/38-1",[]],["text/38-1",[]],["component/38-1",[]],["title/38-2",[26,18.567]],["name/38-2",[]],["text/38-2",[]],["component/38-2",[]],["title/38-3",[1654,60.975]],["name/38-3",[]],["text/38-3",[]],["component/38-3",[]],["title/38-4",[334,23.439]],["name/38-4",[]],["text/38-4",[]],["component/38-4",[]],["title/38-5",[269,18.198]],["name/38-5",[]],["text/38-5",[]],["component/38-5",[]],["title/38-6",[887,25.345]],["name/38-6",[]],["text/38-6",[]],["component/38-6",[]],["title/38-7",[788,19.048,889,21.157]],["name/38-7",[]],["text/38-7",[]],["component/38-7",[]],["title/38-8",[1208,38.35]],["name/38-8",[]],["text/38-8",[]],["component/38-8",[]],["title/38-9",[1655,60.975]],["name/38-9",[]],["text/38-9",[]],["component/38-9",[]],["title/38-10",[334,23.439]],["name/38-10",[]],["text/38-10",[]],["component/38-10",[]],["title/38-11",[269,18.198]],["name/38-11",[]],["text/38-11",[]],["component/38-11",[]],["title/38-12",[887,25.345]],["name/38-12",[]],["text/38-12",[]],["component/38-12",[]],["title/38-13",[788,19.048,889,21.157]],["name/38-13",[]],["text/38-13",[]],["component/38-13",[]],["title/38-14",[1034,32.389]],["name/38-14",[]],["text/38-14",[]],["component/38-14",[]],["title/38-15",[1208,38.35]],["name/38-15",[]],["text/38-15",[]],["component/38-15",[]],["title/38-16",[1656,60.975]],["name/38-16",[]],["text/38-16",[]],["component/38-16",[]],["title/38-17",[334,23.439]],["name/38-17",[]],["text/38-17",[]],["component/38-17",[]],["title/38-18",[269,18.198]],["name/38-18",[]],["text/38-18",[]],["component/38-18",[]],["title/38-19",[887,25.345]],["name/38-19",[]],["text/38-19",[]],["component/38-19",[]],["title/38-20",[788,19.048,889,21.157]],["name/38-20",[]],["text/38-20",[]],["component/38-20",[]],["title/38-21",[1034,32.389]],["name/38-21",[]],["text/38-21",[]],["component/38-21",[]],["title/38",[877,52.291]],["name/38",[877,1.079]],["text/38",[0,0.612,4,4.93,7,3.18,8,2.031,15,0.335,16,1.953,24,0.951,26,0.46,35,1.525,51,0.691,67,0.751,69,0.997,75,0.62,79,1.351,86,0.68,93,2.343,114,0.857,135,1.922,145,0.981,146,0.597,147,2.087,148,0.714,149,0.474,150,1.302,154,0.714,160,1.349,168,2.51,169,0.48,174,1.212,177,0.54,189,0.424,190,0.412,200,0.691,202,0.72,207,0.493,210,0.54,223,0.997,227,0.745,230,2.285,233,0.912,255,0.55,256,0.691,269,1.592,334,0.581,338,1.363,344,1.663,355,2.887,442,0.691,471,1.408,492,0.584,511,2.527,513,3.387,540,1.385,562,5.011,565,2.156,568,0.757,570,0.515,589,1.095,656,1.12,666,2.156,705,2.036,730,1.072,755,4.487,764,0.738,773,3.952,795,3.779,816,1.297,877,0.691,882,0.468,890,1.147,900,0.507,912,1.415,913,1.79,915,0.976,916,0.751,936,0.531,947,0.787,985,1.251,1000,0.806,1013,0.667,1017,3.659,1021,0.72,1065,1.251,1069,0.691,1074,1.892,1100,1.12,1101,1.971,1104,0.55,1148,2.757,1150,3.344,1168,2.285,1406,0.646,1412,2.69,1481,0.628,1486,2.418,1629,2.135,1654,6.655,1655,4.407,1656,5.335,1657,0.88,1658,1.351,1659,0.88,1660,0.72,1661,2.333,1662,0.806,1663,0.88,1664,0.88,1665,0.88,1666,0.88,1667,1.42,1668,3.969,1669,0.757,1670,0.88,1671,1.652,1672,0.88,1673,3.481,1674,1.512,1675,0.88,1676,0.88,1677,0.88,1678,0.88,1679,2.69,1680,2.938,1681,0.88,1682,2.404,1683,2.006,1684,1.512,1685,0.88,1686,0.88,1687,0.88,1688,0.88,1689,0.88,1690,0.88,1691,0.88,1692,0.88,1693,1.652,1694,0.88,1695,0.88,1696,2.135,1697,0.88,1698,0.88,1699,1.512,1700,0.88]],["component/38",[1,0.416]],["title/39-1",[23,25.698]],["name/39-1",[]],["text/39-1",[]],["component/39-1",[]],["title/39-2",[26,18.567]],["name/39-2",[]],["text/39-2",[]],["component/39-2",[]],["title/39-3",[334,23.439]],["name/39-3",[]],["text/39-3",[]],["component/39-3",[]],["title/39-4",[269,18.198]],["name/39-4",[]],["text/39-4",[]],["component/39-4",[]],["title/39-5",[887,25.345]],["name/39-5",[]],["text/39-5",[]],["component/39-5",[]],["title/39-6",[788,25.698]],["name/39-6",[]],["text/39-6",[]],["component/39-6",[]],["title/39-7",[1208,38.35]],["name/39-7",[]],["text/39-7",[]],["component/39-7",[]],["title/39-8",[1034,32.389]],["name/39-8",[]],["text/39-8",[]],["component/39-8",[]],["title/39-9",[10,32.389]],["name/39-9",[]],["text/39-9",[]],["component/39-9",[]],["title/39",[1016,52.291]],["name/39",[1016,1.079]],["text/39",[8,1.116,11,0.428,12,2.17,15,1.154,16,0.694,26,0.255,30,0.62,31,0.693,33,1.089,35,0.888,43,0.582,45,1.8,67,1.097,75,1.138,91,2.804,92,1.409,93,3.674,95,1.189,114,0.474,117,0.671,129,0.552,135,1.05,141,0.552,145,0.543,147,0.689,148,0.739,149,3.039,150,2.008,152,0.971,154,1.549,161,0.878,168,0.778,169,3.078,176,0.48,185,2.144,188,0.652,189,0.44,190,0.428,192,1.98,210,0.561,212,0.571,222,0.786,227,0.412,230,1.388,233,1.98,243,0.606,255,1.069,260,0.748,269,0.98,292,1.135,326,0.526,333,0.383,334,0.322,341,0.428,348,0.606,355,3.191,389,0.526,392,1.48,415,1.189,449,0.594,465,0.748,471,1.455,474,0.635,491,0.652,513,1.48,514,2.38,515,0.62,517,1.255,540,3.539,560,0.837,564,1.471,565,4.585,569,1.135,570,0.534,587,0.671,588,0.671,589,2.378,593,0.582,624,0.718,668,0.837,674,0.837,677,1.173,679,0.837,680,0.837,681,3.896,682,0.837,687,0.837,688,0.837,694,1.135,695,0.606,697,1.296,705,0.878,711,0.718,773,3.349,816,0.718,882,1.905,890,0.635,896,0.486,900,0.985,913,0.979,915,1.009,927,0.606,947,0.436,968,0.786,983,0.671,1011,2.38,1013,0.693,1016,5.958,1017,1.135,1029,0.748,1074,0.816,1101,2.25,1109,0.594,1120,1.296,1126,0.718,1141,0.748,1148,1.189,1211,0.635,1223,0.635,1251,0.635,1328,1.675,1417,0.693,1419,1.255,1437,0.693,1463,0.786,1483,0.671,1486,1.189,1544,0.693,1630,2.207,1631,2.207,1662,1.566,1683,1.471,1701,3.283,1702,0.837,1703,0.837,1704,0.837,1705,0.837,1706,0.837,1707,2.073,1708,0.914,1709,0.914,1710,0.914,1711,0.914,1712,3.032,1713,3.585,1714,1.711,1715,0.914,1716,3.585,1717,0.914,1718,0.914,1719,0.837,1720,1.711,1721,0.914,1722,0.786,1723,0.914,1724,1.711,1725,0.914,1726,0.914,1727,0.914,1728,0.914,1729,1.711,1730,0.914,1731,0.837,1732,0.914,1733,0.914,1734,0.914,1735,1.711,1736,0.914,1737,0.914,1738,0.914,1739,0.914,1740,0.914,1741,0.914,1742,2.073,1743,0.914,1744,2.411,1745,0.914,1746,0.837,1747,0.837,1748,0.914,1749,0.914,1750,0.914,1751,0.914]],["component/39",[1,0.416]],["title/40",[1022,57.269]],["name/40",[1022,1.182]],["text/40",[146,6.639,710,8.011]],["component/40",[1,0.416]],["title/41",[1024,57.269]],["name/41",[1024,1.182]],["text/41",[146,6.639,710,8.011]],["component/41",[1,0.416]],["title/42-1",[23,25.698]],["name/42-1",[]],["text/42-1",[]],["component/42-1",[]],["title/42-2",[26,18.567]],["name/42-2",[]],["text/42-2",[]],["component/42-2",[]],["title/42-3",[334,23.439]],["name/42-3",[]],["text/42-3",[]],["component/42-3",[]],["title/42-4",[1013,37.395,1029,40.397]],["name/42-4",[]],["text/42-4",[]],["component/42-4",[]],["title/42",[35,25.619,514,38.759]],["name/42",[1016,1.079]],["text/42",[3,1.755,10,2.671,11,1.181,15,1.616,21,1.675,26,0.704,35,3.725,37,3.116,43,4.098,68,1.854,75,2.062,93,3.573,114,1.311,128,1.454,129,1.524,135,2.804,149,2.955,150,1.119,161,2.818,169,2.993,207,2.376,211,1.755,310,1.854,332,1.524,341,1.181,355,4.096,363,1.5,392,1.55,474,1.755,512,1.854,513,3.371,520,1.675,624,1.983,677,2.671,678,3.887,694,1.675,695,1.675,755,1.854,792,1.608,795,1.983,873,1.983,882,1.342,890,1.755,896,2.256,900,2.445,989,2.067,1013,1.913,1017,1.675,1023,3.887,1029,2.067,1251,1.755,1393,2.312,1486,1.755,1701,7.118,1702,2.312,1703,2.312,1704,2.312,1705,2.312,1706,5.893,1746,5.893,1747,5.028,1752,2.067,1753,2.526,1754,2.526,1755,3.651,1756,2.312,1757,2.526,1758,2.526,1759,2.526,1760,2.526,1761,2.067,1762,2.526,1763,2.526,1764,2.526]],["component/42",[1,0.416]],["title/43-1",[23,25.698]],["name/43-1",[]],["text/43-1",[]],["component/43-1",[]],["title/43-2",[26,18.567]],["name/43-2",[]],["text/43-2",[]],["component/43-2",[]],["title/43-3",[232,48.874]],["name/43-3",[]],["text/43-3",[]],["component/43-3",[]],["title/43-4",[334,23.439]],["name/43-4",[]],["text/43-4",[]],["component/43-4",[]],["title/43-5",[1682,54.501]],["name/43-5",[]],["text/43-5",[]],["component/43-5",[]],["title/43-6",[334,23.439]],["name/43-6",[]],["text/43-6",[]],["component/43-6",[]],["title/43-7",[1765,57.269]],["name/43-7",[]],["text/43-7",[]],["component/43-7",[]],["title/43-8",[334,23.439]],["name/43-8",[]],["text/43-8",[]],["component/43-8",[]],["title/43",[24,28.426,511,31.428]],["name/43",[1766,1.375]],["text/43",[1,0.688,6,3.235,7,2.382,8,2.212,15,1.934,19,1.238,20,1.272,24,1.308,26,0.633,67,1.034,75,1.457,85,1.859,86,3.236,93,4.492,104,1.668,117,1.668,153,1.507,157,2.471,160,1.782,168,1.766,204,1.447,223,1.371,227,1.75,232,2.848,233,2.143,326,1.308,392,2.382,425,4.076,511,5.501,586,3.338,656,1.541,690,2.94,773,2.632,900,1.308,958,1.476,985,1.721,1017,2.574,1056,4.369,1057,3.017,1061,3.338,1065,1.721,1109,1.476,1112,1.272,1135,3.554,1136,3.176,1143,3.554,1319,3.176,1402,1.954,1524,1.954,1669,1.954,1682,4.918,1765,5.168,1767,3.882,1768,1.954,1769,2.272,1770,3.882,1771,2.272,1772,2.272,1773,2.272,1774,2.272,1775,1.784,1776,3.554,1777,2.272,1778,2.272,1779,1.954]],["component/43",[1,0.416]],["title/44-1",[23,25.698]],["name/44-1",[]],["text/44-1",[]],["component/44-1",[]],["title/44-2",[26,18.567]],["name/44-2",[]],["text/44-2",[]],["component/44-2",[]],["title/44-3",[6,42.4]],["name/44-3",[]],["text/44-3",[]],["component/44-3",[]],["title/44-4",[36,23.665,318,18.004,515,26.597]],["name/44-4",[]],["text/44-4",[]],["component/44-4",[]],["title/44-5",[36,23.665,174,28.779,515,26.597]],["name/44-5",[]],["text/44-5",[]],["component/44-5",[]],["title/44-6",[36,29.789,1780,45.196]],["name/44-6",[]],["text/44-6",[]],["component/44-6",[]],["title/44-7",[36,23.665,320,26.007,515,26.597]],["name/44-7",[]],["text/44-7",[]],["component/44-7",[]],["title/44-8",[1781,57.269]],["name/44-8",[]],["text/44-8",[]],["component/44-8",[]],["title/44-9",[1782,57.269]],["name/44-9",[]],["text/44-9",[]],["component/44-9",[]],["title/44-10",[1783,60.975]],["name/44-10",[]],["text/44-10",[]],["component/44-10",[]],["title/44-11",[1784,60.975]],["name/44-11",[]],["text/44-11",[]],["component/44-11",[]],["title/44-12",[1785,60.975]],["name/44-12",[]],["text/44-12",[]],["component/44-12",[]],["title/44-13",[1786,60.975]],["name/44-13",[]],["text/44-13",[]],["component/44-13",[]],["title/44-14",[1787,60.975]],["name/44-14",[]],["text/44-14",[]],["component/44-14",[]],["title/44-15",[1788,60.975]],["name/44-15",[]],["text/44-15",[]],["component/44-15",[]],["title/44-16",[1789,60.975]],["name/44-16",[]],["text/44-16",[]],["component/44-16",[]],["title/44-17",[1790,60.975]],["name/44-17",[]],["text/44-17",[]],["component/44-17",[]],["title/44-18",[1791,60.975]],["name/44-18",[]],["text/44-18",[]],["component/44-18",[]],["title/44-19",[471,40.19]],["name/44-19",[]],["text/44-19",[]],["component/44-19",[]],["title/44-20",[1792,60.975]],["name/44-20",[]],["text/44-20",[]],["component/44-20",[]],["title/44-21",[1707,57.269]],["name/44-21",[]],["text/44-21",[]],["component/44-21",[]],["title/44-22",[1793,60.975]],["name/44-22",[]],["text/44-22",[]],["component/44-22",[]],["title/44-23",[1104,41.613]],["name/44-23",[]],["text/44-23",[]],["component/44-23",[]],["title/44-24",[389,28.426,427,31.428]],["name/44-24",[]],["text/44-24",[]],["component/44-24",[]],["title/44-25",[389,28.426,540,29.309]],["name/44-25",[]],["text/44-25",[]],["component/44-25",[]],["title/44",[36,29.789,515,33.48]],["name/44",[1794,1.375]],["text/44",[1,0.145,6,1.102,7,1.062,8,0.176,10,0.45,15,0.511,19,0.504,20,0.268,24,0.276,26,0.374,36,2.884,45,0.285,75,2.009,85,0.392,86,0.198,91,1.37,92,0.28,93,4.488,95,0.333,96,0.66,106,0.363,111,0.3,117,0.679,121,0.342,122,0.311,124,0.518,128,0.276,135,0.209,149,0.258,152,0.761,153,0.614,154,1.053,160,0.425,168,0.421,173,0.28,174,0.352,176,0.252,177,0.294,192,0.741,202,1.098,207,0.268,210,0.294,221,0.311,223,0.559,238,0.392,253,0.412,269,0.131,287,4.949,292,0.614,309,0.363,318,0.425,320,0.318,323,0.352,326,0.276,333,2.633,339,0.568,352,0.757,355,2.835,389,1.207,423,0.376,430,0.258,466,0.333,471,0.81,483,0.722,515,3.629,540,1.028,547,0.352,565,3.654,570,0.28,609,1.234,642,0.439,661,1.585,694,0.318,705,0.246,763,0.325,772,1.154,786,6.538,796,0.589,802,0.392,814,0.439,847,0.796,882,2.312,886,0.847,900,0.276,912,0.231,915,0.201,923,2.88,958,0.311,982,0.614,1017,0.614,1046,1.802,1053,0.342,1057,0.285,1104,1.081,1150,0.643,1320,0.757,1328,0.333,1351,0.412,1627,0.392,1645,0.847,1646,0.847,1667,0.412,1679,0.847,1683,0.412,1707,1.154,1722,0.412,1742,0.412,1779,0.412,1780,1.918,1781,0.796,1782,0.796,1783,1.228,1784,1.228,1785,0.847,1786,0.847,1787,0.847,1788,0.847,1789,0.847,1790,1.228,1791,1.228,1792,1.228,1793,1.228,1795,0.479,1796,0.479,1797,0.479,1798,0.479,1799,0.479,1800,0.479,1801,0.439,1802,0.439,1803,0.412,1804,0.847,1805,0.479,1806,0.479,1807,3.35,1808,0.479,1809,2.095,1810,0.479,1811,3.063,1812,0.479,1813,0.847,1814,0.479,1815,0.479,1816,0.479,1817,0.926,1818,0.926,1819,0.439,1820,0.479,1821,0.412,1822,0.479,1823,0.926,1824,0.479,1825,0.479,1826,0.479,1827,0.479,1828,0.479,1829,0.479,1830,0.479,1831,0.479,1832,0.479,1833,0.479,1834,0.479,1835,0.479,1836,0.479,1837,0.479,1838,0.479,1839,0.479,1840,0.479,1841,0.479,1842,0.479,1843,0.479,1844,2.438,1845,0.479,1846,0.479,1847,1.731,1848,0.479,1849,0.479,1850,0.479,1851,0.479,1852,0.479,1853,0.479,1854,0.479,1855,0.479,1856,0.479,1857,0.479,1858,0.479,1859,0.479,1860,0.479,1861,0.479,1862,0.479,1863,0.479,1864,0.479,1865,0.479,1866,0.479,1867,0.479,1868,0.479,1869,0.479,1870,0.479,1871,0.479,1872,0.479,1873,0.479,1874,0.479,1875,0.479,1876,0.479,1877,0.479,1878,0.479,1879,0.479,1880,0.479,1881,0.479,1882,0.479,1883,0.479,1884,0.479,1885,0.479,1886,0.479,1887,0.479,1888,0.479,1889,0.479,1890,0.479,1891,0.479,1892,0.479,1893,0.479,1894,0.479,1895,0.479,1896,0.479,1897,0.479,1898,0.479,1899,0.479,1900,0.479,1901,0.479,1902,0.479,1903,0.479,1904,0.479,1905,0.479,1906,0.479,1907,0.479,1908,0.479,1909,0.479,1910,0.479,1911,0.479,1912,0.479,1913,0.479,1914,0.479,1915,0.479,1916,0.479,1917,0.479,1918,0.479,1919,0.479,1920,0.479,1921,0.479,1922,0.479,1923,0.479,1924,0.479,1925,0.479,1926,0.479,1927,0.479,1928,0.479,1929,0.479,1930,0.479,1931,0.479,1932,0.479,1933,0.479,1934,0.479,1935,0.479,1936,0.479,1937,0.479,1938,0.479,1939,0.479,1940,0.479,1941,0.479,1942,0.479,1943,0.479,1944,0.479,1945,0.479,1946,0.479,1947,0.479,1948,0.479,1949,0.479,1950,0.479,1951,0.479,1952,0.479,1953,0.479,1954,0.479,1955,0.479,1956,0.479,1957,0.479,1958,0.479,1959,0.479,1960,0.479,1961,0.479,1962,1.731,1963,0.479,1964,0.479,1965,0.479,1966,0.479,1967,0.479,1968,0.479,1969,0.479,1970,0.479,1971,0.479,1972,0.479,1973,0.479,1974,0.479,1975,0.479,1976,0.479,1977,0.439,1978,0.479,1979,0.479,1980,0.479,1981,0.479,1982,0.479,1983,0.479,1984,0.479,1985,0.479,1986,0.479,1987,0.479,1988,0.479,1989,0.479,1990,0.479,1991,0.479,1992,0.479,1993,0.479,1994,0.479,1995,0.479,1996,0.479,1997,0.479,1998,0.479,1999,0.479,2000,0.926,2001,1.342,2002,0.479,2003,0.926,2004,0.479,2005,0.926,2006,2.095,2007,0.926,2008,0.926,2009,0.479,2010,0.479,2011,0.479,2012,0.926,2013,2.76,2014,0.479,2015,0.479,2016,0.479,2017,0.479,2018,0.479,2019,0.479,2020,0.479,2021,0.479,2022,0.479,2023,0.479]],["component/44",[1,0.416]],["title/45-1",[23,25.698]],["name/45-1",[]],["text/45-1",[]],["component/45-1",[]],["title/45-2",[26,18.567]],["name/45-2",[]],["text/45-2",[]],["component/45-2",[]],["title/45-3",[6,42.4]],["name/45-3",[]],["text/45-3",[]],["component/45-3",[]],["title/45-4",[334,23.439]],["name/45-4",[]],["text/45-4",[]],["component/45-4",[]],["title/45-5",[269,18.198]],["name/45-5",[]],["text/45-5",[]],["component/45-5",[]],["title/45-6",[887,25.345]],["name/45-6",[]],["text/45-6",[]],["component/45-6",[]],["title/45-7",[15,18.786,341,23.087]],["name/45-7",[]],["text/45-7",[]],["component/45-7",[]],["title/45-8",[129,40.19]],["name/45-8",[]],["text/45-8",[]],["component/45-8",[]],["title/45-9",[2024,60.975]],["name/45-9",[]],["text/45-9",[]],["component/45-9",[]],["title/45",[36,29.789,129,29.789]],["name/45",[757,1.258]],["text/45",[1,0.434,6,3.186,7,0.879,8,1.301,10,1.257,15,1.345,19,0.78,20,0.801,21,0.949,24,1.489,26,0.721,30,1.753,31,1.084,36,5.588,37,1.051,67,1.176,68,1.051,75,0.537,80,0.971,86,1.065,93,3.283,106,1.084,122,0.93,124,0.801,129,4.901,135,1.54,137,1.051,152,2.84,154,0.619,157,1.646,160,1.187,161,1.326,167,1.051,168,0.651,174,2.594,176,0.752,192,4.838,194,1.172,211,1.796,223,0.864,243,0.949,269,0.391,316,1.084,317,2.03,320,2.344,333,1.082,341,1.209,355,1.22,356,1.231,363,0.85,389,0.824,423,2.03,449,0.93,471,0.864,476,0.801,483,0.77,511,3.186,515,5.81,517,1.897,520,0.949,570,0.837,580,1.124,609,1.021,677,2.434,730,0.93,755,1.051,760,2.892,766,2.367,767,1.311,768,1.311,771,1.311,772,5.617,773,3.787,784,1.311,791,0.78,796,1.646,810,3.236,871,1.231,874,1.311,882,1.374,890,2.455,913,0.581,915,0.599,927,0.949,958,0.93,966,2.223,989,1.172,1030,1.311,1031,1.311,1057,1.535,1061,1.231,1065,2.677,1126,1.124,1139,1.084,1228,0.971,1609,1.231,1752,1.172,1761,1.172,1781,1.231,1782,1.231,1801,2.367,1802,2.367,1804,2.367,1813,1.311,2024,3.236,2025,1.432,2026,1.432,2027,2.585,2028,1.432,2029,5.585,2030,1.432,2031,1.231,2032,1.432,2033,1.432,2034,1.432,2035,1.432,2036,1.311,2037,1.432,2038,1.432,2039,1.432,2040,1.432]],["component/45",[1,0.416]],["title/46-1",[23,25.698]],["name/46-1",[]],["text/46-1",[]],["component/46-1",[]],["title/46-2",[2041,54.501]],["name/46-2",[]],["text/46-2",[]],["component/46-2",[]],["title/46-3",[26,18.567]],["name/46-3",[]],["text/46-3",[]],["component/46-3",[]],["title/46-4",[334,23.439]],["name/46-4",[]],["text/46-4",[]],["component/46-4",[]],["title/46-5",[269,18.198]],["name/46-5",[]],["text/46-5",[]],["component/46-5",[]],["title/46-6",[887,25.345]],["name/46-6",[]],["text/46-6",[]],["component/46-6",[]],["title/46-7",[8,18.168,312,40.397]],["name/46-7",[]],["text/46-7",[]],["component/46-7",[]],["title/46-8",[788,25.698]],["name/46-8",[]],["text/46-8",[]],["component/46-8",[]],["title/46-9",[425,45.168]],["name/46-9",[]],["text/46-9",[]],["component/46-9",[]],["title/46",[512,36.227,513,30.3]],["name/46",[1755,1.182]],["text/46",[8,2.225,10,1.115,16,0.35,24,0.497,26,0.241,30,0.586,33,1.46,48,0.573,51,0.678,67,0.738,75,1.783,82,0.634,86,0.668,91,0.429,92,0.505,93,3.957,96,1.157,104,1.19,135,0.999,145,0.513,147,0.348,150,3.191,153,2.273,154,0.373,156,0.42,157,0.55,160,0.396,161,0.443,168,1.043,176,0.453,177,0.996,189,0.416,190,0.404,200,2.27,204,1.033,211,0.6,227,0.389,229,0.49,230,2.252,233,3.747,243,0.573,246,0.573,255,1.807,268,0.497,269,0.443,326,0.934,327,1.19,332,0.521,348,0.573,350,0.453,355,0.766,387,0.654,389,0.497,391,1.229,392,0.53,415,1.593,425,2.325,430,0.465,435,0.678,440,0.573,462,0.678,483,0.465,493,1.737,511,1.46,512,2.871,513,3.14,520,1.076,540,1.717,564,1.972,565,6.446,579,0.707,586,1.395,596,0.654,603,0.616,624,0.678,656,0.586,681,2.948,690,3.598,697,0.654,755,0.634,756,1.395,773,1.961,788,0.626,847,3.364,873,0.678,888,0.471,900,0.934,913,0.658,951,0.743,958,0.561,979,0.791,982,1.076,986,2.226,1012,1.327,1017,1.076,1053,0.616,1055,0.634,1057,2.035,1063,2.226,1077,0.791,1081,0.707,1109,2.54,1112,1.618,1136,0.707,1141,1.327,1158,0.634,1223,0.6,1228,0.586,1251,1.127,1265,1.229,1307,0.743,1328,1.127,1335,0.678,1345,0.654,1402,3.364,1429,0.791,1435,0.678,1486,0.6,1524,1.395,1537,0.743,1638,0.791,1682,1.327,1684,0.791,1696,4.349,1742,1.395,1752,0.707,1755,3.741,1756,0.791,1765,0.743,1768,0.743,1776,0.791,1779,1.972,1803,0.743,2042,1.622,2043,2.891,2044,0.864,2045,1.485,2046,0.864,2047,0.864,2048,0.864,2049,0.864,2050,3.428,2051,2.891,2052,2.293,2053,1.622,2054,3.138,2055,3.912,2056,3.912,2057,0.864,2058,0.864,2059,0.864,2060,0.864,2061,0.864,2062,0.864,2063,0.864,2064,1.622,2065,0.791,2066,0.864,2067,0.864,2068,0.743,2069,0.864,2070,2.293,2071,4.351,2072,1.622,2073,1.622,2074,0.791,2075,0.864,2076,1.622,2077,1.622,2078,0.864,2079,1.622,2080,0.864,2081,1.622,2082,0.864,2083,0.864]],["component/46",[1,0.416]],["title/47-1",[23,25.698]],["name/47-1",[]],["text/47-1",[]],["component/47-1",[]],["title/47-2",[26,18.567]],["name/47-2",[]],["text/47-2",[]],["component/47-2",[]],["title/47-3",[334,23.439]],["name/47-3",[]],["text/47-3",[]],["component/47-3",[]],["title/47-4",[269,18.198]],["name/47-4",[]],["text/47-4",[]],["component/47-4",[]],["title/47-5",[887,25.345]],["name/47-5",[]],["text/47-5",[]],["component/47-5",[]],["title/47-6",[788,25.698]],["name/47-6",[]],["text/47-6",[]],["component/47-6",[]],["title/47-7",[1034,32.389]],["name/47-7",[]],["text/47-7",[]],["component/47-7",[]],["title/47-8",[318,22.662,509,30.844]],["name/47-8",[]],["text/47-8",[]],["component/47-8",[]],["title/47-9",[334,23.439]],["name/47-9",[]],["text/47-9",[]],["component/47-9",[]],["title/47-10",[269,18.198]],["name/47-10",[]],["text/47-10",[]],["component/47-10",[]],["title/47",[318,18.004,504,32.093,505,25.466]],["name/47",[2084,1.182]],["text/47",[0,1.11,1,0.484,8,1.423,12,0.849,15,1.086,16,1.158,19,0.871,20,0.895,26,0.446,33,1.018,35,0.83,67,0.727,75,1.451,82,1.173,86,0.659,91,1.417,93,3.347,111,0.999,114,2.006,124,0.895,147,2.798,148,0.691,150,2.082,154,0.691,156,2.625,158,0.755,160,0.734,161,0.82,176,0.839,182,1.536,189,1.861,190,2.198,227,0.721,269,1.475,318,3.367,330,1.018,333,1.966,339,0.981,363,0.949,427,1.018,431,1.463,471,0.965,504,6.002,505,5.365,509,3.373,520,1.893,537,1.255,555,1.255,570,1.668,677,2.914,694,1.06,705,0.82,732,1.211,736,1.255,737,1.14,739,1.11,764,0.714,901,1.463,913,1.158,915,0.669,916,0.727,947,0.762,969,2.035,974,1.018,977,1.11,1074,1.361,1079,2.335,1086,1.374,1091,3.846,1098,1.255,1099,1.255,1100,2.622,1101,3.965,1104,1.783,1112,1.597,1266,1.255,1270,4.606,1315,2.241,1327,1.255,1336,2.837,1352,2.335,1361,2.454,1821,1.374,2084,6.307,2085,1.463,2086,1.463,2087,1.598,2088,1.598,2089,2.613,2090,1.598,2091,1.374,2092,1.374,2093,1.598,2094,1.463,2095,1.463,2096,1.598,2097,1.598,2098,1.374,2099,1.598,2100,1.308,2101,1.598,2102,1.308,2103,1.255,2104,1.308,2105,2.613,2106,1.598,2107,2.613,2108,1.598]],["component/47",[1,0.416]],["title/48-1",[23,25.698]],["name/48-1",[]],["text/48-1",[]],["component/48-1",[]],["title/48-2",[182,26.562,1284,37.395]],["name/48-2",[]],["text/48-2",[]],["component/48-2",[]],["title/48-3",[158,23.307,1097,42.449]],["name/48-3",[]],["text/48-3",[]],["component/48-3",[]],["title/48-4",[26,18.567]],["name/48-4",[]],["text/48-4",[]],["component/48-4",[]],["title/48-5",[334,23.439]],["name/48-5",[]],["text/48-5",[]],["component/48-5",[]],["title/48-6",[269,18.198]],["name/48-6",[]],["text/48-6",[]],["component/48-6",[]],["title/48-7",[887,25.345]],["name/48-7",[]],["text/48-7",[]],["component/48-7",[]],["title/48-8",[788,19.048,889,21.157]],["name/48-8",[]],["text/48-8",[]],["component/48-8",[]],["title/48-9",[2109,66.602]],["name/48-9",[]],["text/48-9",[]],["component/48-9",[]],["title/48-10",[10,32.389]],["name/48-10",[]],["text/48-10",[]],["component/48-10",[]],["title/48-11",[1034,32.389]],["name/48-11",[]],["text/48-11",[]],["component/48-11",[]],["title/48-12",[158,23.307,318,22.662]],["name/48-12",[]],["text/48-12",[]],["component/48-12",[]],["title/48-13",[26,18.567]],["name/48-13",[]],["text/48-13",[]],["component/48-13",[]],["title/48-14",[334,23.439]],["name/48-14",[]],["text/48-14",[]],["component/48-14",[]],["title/48-15",[269,18.198]],["name/48-15",[]],["text/48-15",[]],["component/48-15",[]],["title/48-16",[887,25.345]],["name/48-16",[]],["text/48-16",[]],["component/48-16",[]],["title/48-17",[15,18.786,341,23.087]],["name/48-17",[]],["text/48-17",[]],["component/48-17",[]],["title/48-18",[67,30.299]],["name/48-18",[]],["text/48-18",[]],["component/48-18",[]],["title/48-19",[1208,38.35]],["name/48-19",[]],["text/48-19",[]],["component/48-19",[]],["title/48-20",[158,18.516,318,18.004,608,33.723]],["name/48-20",[]],["text/48-20",[]],["component/48-20",[]],["title/48-21",[26,18.567]],["name/48-21",[]],["text/48-21",[]],["component/48-21",[]],["title/48-22",[334,23.439]],["name/48-22",[]],["text/48-22",[]],["component/48-22",[]],["title/48-23",[176,34.971]],["name/48-23",[]],["text/48-23",[]],["component/48-23",[]],["title/48-24",[788,25.698]],["name/48-24",[]],["text/48-24",[]],["component/48-24",[]],["title/48-25",[1034,32.389]],["name/48-25",[]],["text/48-25",[]],["component/48-25",[]],["title/48",[158,23.307,318,22.662]],["name/48",[2110,1.258]],["text/48",[8,1.579,10,0.94,12,1.924,13,0.252,15,0.606,16,0.5,21,0.816,24,0.488,26,0.628,30,0.835,31,0.331,32,0.358,48,0.29,55,0.321,67,0.199,69,0.264,75,0.846,86,0.18,91,0.42,92,0.495,93,3.675,95,0.855,96,1.136,98,0.693,103,0.376,104,0.903,112,0.343,114,1.751,132,0.358,135,0.369,141,0.961,142,0.331,145,0.26,147,2.169,148,0.532,150,0.856,151,0.331,152,0.699,154,0.532,156,1.874,157,1.014,158,2.121,160,0.389,167,0.321,168,1.163,169,1.228,173,0.256,182,3.784,189,1.085,190,1.054,195,0.4,204,0.278,207,0.474,212,1.207,220,0.4,227,0.197,229,0.248,230,0.709,233,0.68,243,0.29,249,0.769,269,0.777,276,0.693,291,0.621,317,1.769,318,1.431,320,0.562,328,0.358,330,0.278,331,0.312,332,0.264,333,0.809,339,0.52,341,0.205,343,0.321,347,0.312,348,0.562,350,0.23,355,1.471,363,3.465,365,2.008,389,0.488,390,0.331,392,0.977,406,0.331,425,0.835,430,0.857,449,1.034,454,0.835,466,3.74,471,0.743,480,0.511,483,0.857,491,0.312,492,0.29,504,0.358,506,0.358,508,0.855,509,2.68,510,0.641,511,0.278,512,0.621,537,0.343,541,0.4,547,0.321,558,0.343,563,0.358,569,0.29,570,0.931,580,0.343,587,0.903,589,3.108,592,0.376,593,1.014,599,0.278,603,0.312,608,1.662,625,0.728,659,0.775,664,0.304,670,0.4,677,2.279,694,1.056,695,0.562,707,1.007,718,1.769,734,0.728,747,0.693,760,0.358,763,3.959,764,0.55,773,0.574,788,0.327,789,0.331,792,1.014,795,0.343,796,0.278,798,0.4,799,0.4,801,1.707,802,2.762,803,0.4,804,0.588,813,0.4,834,0.376,840,0.284,882,0.232,888,0.238,889,0.187,900,0.488,906,0.358,912,0.593,913,0.915,915,0.809,923,0.728,927,0.29,931,0.376,947,0.208,950,0.376,959,0.376,968,0.376,969,0.878,986,1.034,996,0.4,998,0.4,1010,0.358,1018,1.067,1021,0.358,1053,0.312,1057,0.731,1063,0.55,1074,0.208,1090,0.641,1097,5.869,1100,1.528,1101,3.335,1104,0.995,1109,0.284,1141,0.358,1148,1.566,1209,0.343,1223,0.304,1270,1.886,1284,1.206,1287,0.4,1299,0.728,1316,0.331,1328,0.304,1336,0.321,1342,0.343,1372,0.358,1376,0.376,1396,0.4,1406,0.903,1419,0.621,1435,0.343,1437,0.641,1459,0.331,1483,0.321,1513,0.331,1544,0.331,1549,0.4,1551,0.693,1626,2.092,1761,0.358,1775,0.967,2068,0.728,2084,0.728,2103,0.343,2105,0.4,2107,0.4,2110,4.29,2111,0.437,2112,0.437,2113,0.437,2114,0.4,2115,0.775,2116,0.775,2117,1.127,2118,0.4,2119,0.847,2120,0.437,2121,0.437,2122,2.844,2123,0.437,2124,0.847,2125,1.933,2126,0.437,2127,0.437,2128,0.847,2129,0.437,2130,0.437,2131,1.231,2132,1.231,2133,0.437,2134,0.847,2135,0.847,2136,0.437,2137,0.665,2138,0.437,2139,2.557,2140,1.933,2141,0.437,2142,0.437,2143,0.437,2144,0.437,2145,0.437,2146,1.933,2147,0.437,2148,0.437,2149,0.437,2150,0.437,2151,0.437,2152,0.331,2153,0.437,2154,0.437,2155,0.437,2156,0.437,2157,0.437,2158,0.847,2159,0.437,2160,0.437,2161,0.437,2162,0.437,2163,0.437,2164,0.437,2165,0.437,2166,0.437,2167,0.437,2168,0.437,2169,0.437,2170,1.127,2171,0.847,2172,0.437,2173,0.847,2174,0.437,2175,0.847,2176,0.4,2177,0.847,2178,0.437,2179,0.847,2180,0.437,2181,0.437,2182,0.437,2183,0.437,2184,0.437,2185,0.437,2186,0.437,2187,0.437,2188,0.437,2189,0.437,2190,0.437,2191,0.437,2192,0.437,2193,0.437,2194,0.437,2195,0.437,2196,0.437,2197,0.437,2198,0.437,2199,0.4,2200,0.437,2201,0.437,2202,0.437,2203,0.376,2204,0.437,2205,0.437,2206,0.437,2207,0.437,2208,0.437,2209,0.437,2210,0.437,2211,0.437,2212,0.437,2213,0.437,2214,0.437,2215,0.437]],["component/48",[1,0.416]],["title/49-1",[23,25.698]],["name/49-1",[]],["text/49-1",[]],["component/49-1",[]],["title/49-2",[26,18.567]],["name/49-2",[]],["text/49-2",[]],["component/49-2",[]],["title/49-3",[334,23.439]],["name/49-3",[]],["text/49-3",[]],["component/49-3",[]],["title/49-4",[269,18.198]],["name/49-4",[]],["text/49-4",[]],["component/49-4",[]],["title/49-5",[887,25.345]],["name/49-5",[]],["text/49-5",[]],["component/49-5",[]],["title/49-6",[788,25.698]],["name/49-6",[]],["text/49-6",[]],["component/49-6",[]],["title/49-7",[1034,32.389]],["name/49-7",[]],["text/49-7",[]],["component/49-7",[]],["title/49",[318,18.004,509,24.503,510,29.707]],["name/49",[2118,1.258]],["text/49",[1,0.523,8,1.125,12,1.624,16,1.24,19,0.941,20,0.966,26,0.481,45,1.025,53,1.355,67,1.39,75,1.147,86,0.711,93,2.407,114,0.896,124,0.966,143,1.267,147,2.915,148,0.746,150,2.518,152,2.334,153,1.145,154,2.714,158,0.815,160,0.793,189,2.736,190,2.657,192,0.953,197,1.413,208,1.355,210,1.876,227,0.778,269,1.358,318,2.609,330,1.099,333,1.279,339,1.06,430,1.644,454,1.171,480,1.042,508,1.199,509,4.245,510,6.26,529,1.308,572,1.581,592,1.485,593,1.946,677,2,695,1.145,705,1.568,723,1.199,764,0.772,788,0.666,882,0.917,913,1.24,915,1.279,916,0.785,947,0.823,977,1.199,1018,0.953,1074,1.457,1098,2.4,1100,3.371,1101,4.103,1104,1.079,1112,0.966,1125,1.581,1211,2.123,1265,1.308,1270,4.506,1298,2.798,1305,2.628,1306,1.485,1312,2.628,1313,1.485,1315,2.4,1336,2.243,1821,1.485,2102,1.413,2117,5.751,2170,1.581,2199,6.22,2216,6.282,2217,8.265,2218,1.726,2219,1.726,2220,3.056,2221,1.726,2222,1.726,2223,1.726,2224,1.726,2225,1.726,2226,4.971,2227,1.726]],["component/49",[1,0.416]],["title/50-1",[23,25.698]],["name/50-1",[]],["text/50-1",[]],["component/50-1",[]],["title/50-2",[26,18.567]],["name/50-2",[]],["text/50-2",[]],["component/50-2",[]],["title/50-3",[334,23.439]],["name/50-3",[]],["text/50-3",[]],["component/50-3",[]],["title/50-4",[269,18.198]],["name/50-4",[]],["text/50-4",[]],["component/50-4",[]],["title/50-5",[887,25.345]],["name/50-5",[]],["text/50-5",[]],["component/50-5",[]],["title/50-6",[788,25.698]],["name/50-6",[]],["text/50-6",[]],["component/50-6",[]],["title/50-7",[1034,32.389]],["name/50-7",[]],["text/50-7",[]],["component/50-7",[]],["title/50",[318,18.004,505,25.466,507,32.093]],["name/50",[2228,1.258]],["text/50",[0,1.628,1,0.71,8,1.466,12,1.245,15,1.516,16,1.617,19,1.277,20,1.311,25,1.917,26,0.653,35,1.216,56,1.839,67,1.066,75,1.496,86,0.965,91,1.163,93,2.35,111,1.464,114,2.697,124,1.311,147,2.47,148,1.012,150,2.303,154,1.012,156,1.938,158,1.106,160,1.076,182,2.144,189,2.502,190,2.431,227,1.796,255,1.464,269,1.675,318,2.815,330,1.492,331,1.671,333,0.98,339,1.438,344,1.671,376,1.554,427,1.492,471,1.414,505,5.885,507,5.624,570,2.329,579,1.917,589,1.554,677,2.528,705,1.202,732,1.775,764,1.047,913,1.617,915,0.98,916,1.066,947,1.117,1074,1.117,1086,2.015,1091,1.917,1100,4.158,1101,3.959,1104,1.464,1112,1.311,1260,1.839,1270,4.066,1327,1.839,1336,1.719,1361,2.015,1417,1.775,2085,2.145,2089,2.145,2091,2.015,2092,2.015,2095,2.145,2098,2.015,2100,1.917,2102,1.917,2103,1.839,2104,1.917,2228,6.292,2229,2.343,2230,2.343,2231,2.343,2232,2.015,2233,2.343,2234,2.343,2235,2.343,2236,2.343,2237,2.343,2238,2.343]],["component/50",[1,0.416]],["title/51-1",[23,25.698]],["name/51-1",[]],["text/51-1",[]],["component/51-1",[]],["title/51-2",[26,18.567]],["name/51-2",[]],["text/51-2",[]],["component/51-2",[]],["title/51-3",[334,23.439]],["name/51-3",[]],["text/51-3",[]],["component/51-3",[]],["title/51-4",[269,18.198]],["name/51-4",[]],["text/51-4",[]],["component/51-4",[]],["title/51-5",[887,25.345]],["name/51-5",[]],["text/51-5",[]],["component/51-5",[]],["title/51-6",[788,25.698]],["name/51-6",[]],["text/51-6",[]],["component/51-6",[]],["title/51-7",[1034,32.389]],["name/51-7",[]],["text/51-7",[]],["component/51-7",[]],["title/51-8",[318,22.662,509,30.844]],["name/51-8",[]],["text/51-8",[]],["component/51-8",[]],["title/51-9",[334,23.439]],["name/51-9",[]],["text/51-9",[]],["component/51-9",[]],["title/51-10",[269,18.198]],["name/51-10",[]],["text/51-10",[]],["component/51-10",[]],["title/51",[318,18.004,505,25.466,506,32.093]],["name/51",[2239,1.258]],["text/51",[0,1.126,1,0.491,8,1.064,12,0.862,15,1.1,16,1.173,19,0.884,20,0.907,26,0.452,33,1.032,35,0.841,67,0.738,75,1.468,86,0.668,91,0.805,93,3.08,111,1.013,114,2.029,124,0.907,147,2.819,148,1.249,150,1.733,154,1.249,156,0.788,158,0.765,160,0.744,173,0.948,176,0.851,182,1.555,189,1.883,190,2.221,207,0.907,227,0.731,269,1.489,318,3.392,326,0.934,329,1.273,330,1.032,331,2.061,333,1.987,339,0.995,361,1.19,427,1.032,471,0.978,493,1.228,497,1.156,503,3.2,505,5.703,506,6.578,507,1.327,509,3.405,520,1.075,537,1.273,570,1.689,677,2.939,694,1.075,705,0.832,732,1.228,736,1.273,739,1.126,764,0.725,913,1.173,915,0.678,916,0.738,945,1.273,947,0.773,949,1.484,969,2.061,1074,1.378,1079,2.365,1091,3.886,1098,1.273,1099,1.273,1100,2.652,1101,3.991,1104,1.806,1112,1.618,1270,4.641,1315,2.269,1336,2.87,1352,1.327,1451,1.484,1588,1.484,1611,1.484,1775,1.273,2086,1.484,2091,1.394,2092,1.394,2098,1.394,2100,1.327,2102,1.327,2103,1.273,2104,1.327,2239,6.764,2240,1.621,2241,1.621,2242,1.621,2243,1.621,2244,1.621,2245,1.621,2246,1.484,2247,1.621,2248,1.621,2249,1.621,2250,1.621,2251,2.89,2252,1.621,2253,2.89,2254,1.621]],["component/51",[1,0.416]],["title/52-1",[23,25.698]],["name/52-1",[]],["text/52-1",[]],["component/52-1",[]],["title/52-2",[26,18.567]],["name/52-2",[]],["text/52-2",[]],["component/52-2",[]],["title/52-3",[334,23.439]],["name/52-3",[]],["text/52-3",[]],["component/52-3",[]],["title/52-4",[269,18.198]],["name/52-4",[]],["text/52-4",[]],["component/52-4",[]],["title/52",[318,18.004,508,27.246,509,24.503]],["name/52",[2115,1.258]],["text/52",[1,0.889,12,1.56,19,1.6,20,1.643,24,2.769,26,0.818,42,5.593,67,2.779,93,3.388,124,1.643,147,3.717,150,1.301,152,4.009,158,1.386,176,1.541,189,1.413,190,1.373,197,2.402,269,0.802,318,3.579,330,1.869,333,2.556,430,1.579,508,4.245,509,5.524,593,3.889,677,3.436,875,2.524,894,1.906,958,3.123,977,2.039,1018,1.621,1074,1.399,1098,3.776,1101,4.157,1104,3.005,1112,1.643,1211,2.039,1270,5.553,1336,3.529,2114,5.593,2116,5.593,2255,7.065,2256,2.935,2257,2.935,2258,2.935,2259,2.935,2260,2.935,2261,2.935]],["component/52",[1,0.416]],["title/53-1",[23,25.698]],["name/53-1",[]],["text/53-1",[]],["component/53-1",[]],["title/53-2",[26,18.567]],["name/53-2",[]],["text/53-2",[]],["component/53-2",[]],["title/53-3",[334,23.439]],["name/53-3",[]],["text/53-3",[]],["component/53-3",[]],["title/53-4",[269,18.198]],["name/53-4",[]],["text/53-4",[]],["component/53-4",[]],["title/53-5",[887,25.345]],["name/53-5",[]],["text/53-5",[]],["component/53-5",[]],["title/53-6",[788,25.698]],["name/53-6",[]],["text/53-6",[]],["component/53-6",[]],["title/53-7",[1034,32.389]],["name/53-7",[]],["text/53-7",[]],["component/53-7",[]],["title/53",[180,21.654,498,24.071,501,30.791]],["name/53",[2262,1.258]],["text/53",[8,0.796,11,2.291,15,1.416,16,0.878,26,0.603,75,1.397,86,0.891,93,2.937,114,1.123,128,1.246,146,1.467,147,2.64,148,0.935,152,2.78,154,0.935,155,1.435,156,1.052,160,0.993,173,1.265,176,1.954,180,1.195,182,1.164,227,0.976,269,1.956,287,4.625,318,2.248,333,1.557,341,1.012,355,1.757,360,1.588,367,1.328,446,1.699,498,1.328,501,6.018,593,1.377,599,1.377,607,1.467,677,1.052,705,1.91,729,2.819,730,2.417,731,1.639,735,2.819,737,2.654,740,2.819,764,0.967,913,1.511,915,1.557,916,0.984,936,2.956,947,1.031,974,1.377,1018,1.195,1032,3.594,1033,3.71,1074,2.335,1078,1.699,1083,2.819,1087,2.922,1100,3.945,1112,2.083,1118,1.543,1152,1.699,1270,5.367,1284,1.639,1459,1.639,1526,1.699,2094,3.408,2137,1.699,2262,7.018,2263,1.771,2264,8.094,2265,3.201,2266,1.861,2267,3.046,2268,2.164,2269,2.164,2270,2.164,2271,2.164,2272,2.164,2273,2.164,2274,2.164]],["component/53",[1,0.416]],["title/54-1",[23,25.698]],["name/54-1",[]],["text/54-1",[]],["component/54-1",[]],["title/54-2",[26,18.567]],["name/54-2",[]],["text/54-2",[]],["component/54-2",[]],["title/54-3",[334,23.439]],["name/54-3",[]],["text/54-3",[]],["component/54-3",[]],["title/54-4",[269,18.198]],["name/54-4",[]],["text/54-4",[]],["component/54-4",[]],["title/54",[180,17.961,498,19.966,499,26.62,1051,27.972]],["name/54",[2275,1.258]],["text/54",[11,2.589,15,2.107,24,1.471,26,0.712,48,1.694,75,1.609,93,2.996,128,1.471,135,1.113,137,1.874,146,1.732,147,2.611,152,3.142,155,1.694,156,1.242,157,1.626,173,1.493,176,2.25,180,1.41,182,2.306,233,2.366,258,1.732,268,1.471,269,1.171,287,4.718,318,2.542,331,1.822,333,2.317,341,1.195,346,1.493,355,3.061,360,1.874,367,1.568,446,2.006,448,2.006,498,1.568,499,4.531,529,1.935,599,1.626,607,1.732,729,3.246,730,2.783,731,1.935,735,3.246,737,3.056,740,3.246,913,1.037,936,3.341,974,1.626,977,1.775,1032,3.145,1033,3.246,1051,2.196,1074,2.043,1078,2.006,1083,3.246,1087,3.365,1112,2.399,1118,1.822,1152,2.006,1284,1.935,1459,1.935,1526,2.006,2137,2.006,2263,2.09,2265,3.685,2266,2.196,2267,3.507,2275,6.613,2276,2.554,2277,2.554,2278,7.224,2279,4.286,2280,3.507,2281,1.874]],["component/54",[1,0.416]],["title/55-1",[23,25.698]],["name/55-1",[]],["text/55-1",[]],["component/55-1",[]],["title/55-2",[26,18.567]],["name/55-2",[]],["text/55-2",[]],["component/55-2",[]],["title/55-3",[334,23.439]],["name/55-3",[]],["text/55-3",[]],["component/55-3",[]],["title/55-4",[269,18.198]],["name/55-4",[]],["text/55-4",[]],["component/55-4",[]],["title/55-5",[887,25.345]],["name/55-5",[]],["text/55-5",[]],["component/55-5",[]],["title/55-6",[788,25.698]],["name/55-6",[]],["text/55-6",[]],["component/55-6",[]],["title/55-7",[15,18.786,341,23.087]],["name/55-7",[]],["text/55-7",[]],["component/55-7",[]],["title/55-8",[1034,32.389]],["name/55-8",[]],["text/55-8",[]],["component/55-8",[]],["title/55",[318,18.004,497,27.968,503,32.093]],["name/55",[2282,1.258]],["text/55",[1,0.446,8,1.628,11,2.898,16,1.077,26,0.411,48,0.977,55,1.081,67,0.67,75,0.553,82,1.947,86,0.607,93,1.695,112,1.157,114,0.765,124,1.485,147,2.832,148,2.206,150,1.604,154,1.912,155,1.759,156,1.76,160,1.218,168,1.207,176,0.774,180,3.421,182,1.947,189,1.742,190,1.692,192,0.814,196,1.601,198,1.206,205,1.051,227,0.664,258,0.999,269,1.395,318,3.228,326,0.848,333,0.617,338,2.984,339,1.628,346,2.586,347,1.051,348,2.4,406,2.01,441,2.083,449,2.35,453,1.206,454,2.454,476,2.025,477,1.76,497,1.892,498,0.904,503,1.206,511,1.689,522,1.267,529,1.116,548,2.083,570,1.551,609,1.892,624,1.157,664,1.024,677,1.76,705,0.756,734,3.112,764,0.659,791,1.446,890,1.024,893,0.977,894,0.957,913,1.469,915,0.617,916,0.67,936,2.67,947,0.702,974,0.938,980,1.267,1050,1.349,1065,1.116,1074,0.702,1101,3.297,1104,1.658,1112,2.025,1120,1.116,1166,1.081,1285,1.349,1354,1.206,1388,1.349,1417,1.116,1518,2.429,1548,1.206,1819,2.429,2068,2.281,2100,1.206,2103,1.157,2104,1.206,2282,6.756,2283,1.474,2284,1.474,2285,1.474,2286,1.474,2287,1.474,2288,1.474,2289,1.349,2290,1.474,2291,1.474,2292,1.474,2293,1.474,2294,1.474,2295,1.474,2296,1.474,2297,1.474,2298,1.474,2299,1.474,2300,1.474,2301,1.474,2302,1.474,2303,3.619,2304,1.474,2305,5.209,2306,5.69,2307,1.474,2308,2.653,2309,1.474,2310,3.619,2311,1.474,2312,1.474,2313,1.474,2314,1.474,2315,1.474]],["component/55",[1,0.416]],["title/56-1",[23,25.698]],["name/56-1",[]],["text/56-1",[]],["component/56-1",[]],["title/56-2",[26,18.567]],["name/56-2",[]],["text/56-2",[]],["component/56-2",[]],["title/56-3",[334,23.439]],["name/56-3",[]],["text/56-3",[]],["component/56-3",[]],["title/56-4",[269,18.198]],["name/56-4",[]],["text/56-4",[]],["component/56-4",[]],["title/56",[180,21.654,497,27.968,498,24.071]],["name/56",[2316,1.258]],["text/56",[7,1.723,11,3.216,15,1.069,17,2.06,24,1.617,26,0.783,27,1.951,28,2.002,35,1.457,48,1.862,69,1.694,75,2.582,86,1.157,93,2.27,108,3.075,111,1.754,128,1.617,135,1.223,137,3.403,147,1.868,157,1.788,176,1.474,177,1.723,180,3.27,182,1.511,192,1.55,207,1.571,233,1.55,238,2.298,258,1.904,268,1.617,269,0.767,287,4.15,310,2.06,318,1.289,330,2.952,333,1.94,343,2.06,347,2.002,355,2.189,422,3.794,430,1.511,436,2.127,440,1.862,442,2.205,448,2.205,476,1.571,497,4.904,498,4.221,729,2.127,730,1.823,740,2.127,756,2.414,804,1.951,913,1.139,936,2.798,947,1.339,977,3.221,1032,3.403,1054,2.414,1074,1.339,1112,1.571,1118,2.002,1128,2.571,1332,2.571,1417,2.127,1548,2.298,1731,2.571,1803,2.414,2280,3.794,2281,2.06,2289,2.571,2305,4.245,2316,6.969,2317,4.637,2318,2.808,2319,4.245,2320,2.808,2321,2.808,2322,2.808]],["component/56",[1,0.416]],["title/57-1",[23,25.698]],["name/57-1",[]],["text/57-1",[]],["component/57-1",[]],["title/57-2",[26,18.567]],["name/57-2",[]],["text/57-2",[]],["component/57-2",[]],["title/57-3",[334,23.439]],["name/57-3",[]],["text/57-3",[]],["component/57-3",[]],["title/57-4",[269,18.198]],["name/57-4",[]],["text/57-4",[]],["component/57-4",[]],["title/57",[180,21.654,498,24.071,500,26.597]],["name/57",[727,1.182]],["text/57",[11,2.654,15,2.16,26,0.737,48,1.753,75,1.656,93,3.049,128,1.522,135,1.152,137,1.94,146,1.793,147,2.669,152,2.503,155,1.753,156,1.286,157,1.683,173,1.545,176,2.316,180,1.46,182,1.423,233,2.436,258,1.793,268,1.522,269,1.205,287,4.801,318,2.605,333,2.375,341,1.236,355,3.128,360,1.94,367,1.623,446,2.076,448,2.076,498,1.623,500,3.849,501,3.463,599,1.683,607,1.793,727,6.333,729,3.341,730,2.864,731,2.003,735,3.341,737,3.146,740,3.341,913,1.073,936,3.425,974,1.683,1032,3.237,1033,3.341,1074,2.103,1078,2.076,1083,3.341,1087,3.463,1112,2.469,1118,1.885,1152,2.076,1270,1.753,1284,2.003,1459,2.003,1526,2.076,2137,2.076,2263,2.164,2265,3.793,2266,2.273,2267,3.61,2280,3.61,2281,1.94,2323,2.644,2324,7.365,2325,4.411]],["component/57",[1,0.416]],["title/58-1",[23,25.698]],["name/58-1",[]],["text/58-1",[]],["component/58-1",[]],["title/58-2",[26,18.567]],["name/58-2",[]],["text/58-2",[]],["component/58-2",[]],["title/58-3",[334,23.439]],["name/58-3",[]],["text/58-3",[]],["component/58-3",[]],["title/58-4",[269,18.198]],["name/58-4",[]],["text/58-4",[]],["component/58-4",[]],["title/58",[180,21.654,498,24.071,502,32.093]],["name/58",[2326,1.258]],["text/58",[11,1.88,15,2.349,26,0.66,48,1.57,75,1.966,93,2.88,128,1.363,135,1.031,137,1.737,141,1.429,147,2.487,152,2.281,155,1.57,156,1.151,157,1.507,173,1.384,176,2.75,180,1.307,182,1.274,233,2.219,258,1.606,268,1.363,269,1.098,287,4.536,318,2.404,321,2.167,333,2.192,341,1.107,355,2.915,407,3.289,440,1.57,446,1.859,448,1.859,498,1.453,502,5.658,509,3.857,520,1.57,563,1.937,593,2.559,599,1.507,607,1.606,695,2.665,707,1.937,729,3.045,730,2.61,731,1.793,735,1.793,737,1.688,740,3.045,890,2.792,913,0.961,936,3.725,974,1.507,1032,2.95,1033,3.045,1074,1.916,1078,1.859,1083,3.045,1087,3.156,1112,2.25,1118,1.688,1397,2.036,1459,1.793,1526,1.859,2137,1.859,2263,1.937,2267,1.937,2280,3.289,2281,1.737,2326,6.331,2327,6.915,2328,4.019,2329,4.019,2330,4.019,2331,4.019,2332,2.367,2333,2.367,2334,2.367,2335,4.019]],["component/58",[1,0.416]],["title/59-1",[23,25.698]],["name/59-1",[]],["text/59-1",[]],["component/59-1",[]],["title/59-2",[26,18.567]],["name/59-2",[]],["text/59-2",[]],["component/59-2",[]],["title/59-3",[334,23.439]],["name/59-3",[]],["text/59-3",[]],["component/59-3",[]],["title/59-4",[269,18.198]],["name/59-4",[]],["text/59-4",[]],["component/59-4",[]],["title/59-5",[887,25.345]],["name/59-5",[]],["text/59-5",[]],["component/59-5",[]],["title/59-6",[788,25.698]],["name/59-6",[]],["text/59-6",[]],["component/59-6",[]],["title/59-7",[221,43.248]],["name/59-7",[]],["text/59-7",[]],["component/59-7",[]],["title/59-8",[9,46.271]],["name/59-8",[]],["text/59-8",[]],["component/59-8",[]],["title/59",[13,38.35]],["name/59",[13,0.791]],["text/59",[1,0.306,4,0.685,6,1.675,8,0.691,9,3.375,10,0.913,13,5.28,15,1.672,16,0.762,20,1.051,21,0.67,26,0.282,30,0.685,33,2.095,43,0.643,48,0.67,67,1.197,69,0.61,71,1.422,75,2.371,86,0.416,93,2.971,99,2.693,117,0.741,125,1.195,135,0.44,141,0.61,142,0.765,143,0.741,147,1.957,148,1.422,149,0.543,154,2.444,155,0.67,156,1.279,157,0.643,158,0.477,160,0.862,161,0.518,162,1.876,163,0.67,164,0.61,165,0.643,168,1.497,169,0.55,170,0.62,175,0.827,177,1.152,178,0.61,181,0.793,185,1.728,192,1.452,204,1.195,205,0.72,206,2.934,207,1.051,208,1.474,209,5.102,213,2.056,216,0.67,221,2.137,223,2.651,227,0.455,233,1.452,243,1.245,245,0.741,246,0.67,249,0.631,255,0.631,259,0.643,267,0.827,268,0.582,269,1.2,287,1.587,289,1.954,291,1.378,292,0.67,303,0.925,304,0.925,316,0.765,318,0.464,333,0.786,346,0.59,361,1.378,363,1.115,365,1.474,389,1.081,391,2.493,422,0.827,508,4.588,511,0.643,540,1.115,548,0.793,593,2.095,612,0.827,616,0.631,617,0.827,664,1.828,705,0.518,735,0.765,764,0.451,788,1.015,796,0.643,804,0.702,834,0.869,841,2.408,900,0.582,913,1.335,915,0.786,916,0.46,927,1.745,939,0.925,941,0.741,947,0.895,952,0.869,977,3.052,1002,0.869,1074,0.482,1079,0.827,1092,2.262,1112,0.565,1118,0.72,1120,0.765,1134,0.765,1168,0.582,1211,1.304,1212,1.614,1215,0.72,1233,0.925,1297,0.827,1342,0.793,1373,0.793,1397,0.869,1413,0.869,1416,0.925,1432,1.536,1435,0.793,1467,0.925,1468,0.925,1481,1.339,1658,0.827,1669,0.869,2041,0.827,2152,0.765,2176,0.925,2281,0.741,2319,0.925,2336,0.765,2337,1.719,2338,2.631,2339,1.01,2340,1.01,2341,1.01,2342,1.01,2343,1.01,2344,1.01,2345,0.925,2346,0.925,2347,1.01,2348,1.878,2349,1.474,2350,0.793,2351,1.01,2352,1.01,2353,1.01,2354,1.01,2355,1.01,2356,1.878,2357,1.01,2358,1.01,2359,1.01,2360,1.01,2361,1.01,2362,1.01,2363,1.01,2364,1.01,2365,1.01,2366,1.01,2367,1.01,2368,1.01,2369,2.631,2370,1.01,2371,1.01,2372,1.01,2373,1.01,2374,1.01,2375,1.536,2376,1.01,2377,0.869,2378,1.01,2379,0.869,2380,0.869]],["component/59",[1,0.416]],["title/60-1",[23,25.698]],["name/60-1",[]],["text/60-1",[]],["component/60-1",[]],["title/60-2",[26,18.567]],["name/60-2",[]],["text/60-2",[]],["component/60-2",[]],["title/60-3",[334,23.439]],["name/60-3",[]],["text/60-3",[]],["component/60-3",[]],["title/60-4",[269,18.198]],["name/60-4",[]],["text/60-4",[]],["component/60-4",[]],["title/60-5",[887,25.345]],["name/60-5",[]],["text/60-5",[]],["component/60-5",[]],["title/60-6",[221,43.248]],["name/60-6",[]],["text/60-6",[]],["component/60-6",[]],["title/60-7",[9,46.271]],["name/60-7",[]],["text/60-7",[]],["component/60-7",[]],["title/60",[12,35.395]],["name/60",[12,0.73]],["text/60",[4,1.212,6,2.691,8,1.556,9,4.813,10,0.869,12,5.347,15,0.68,16,0.726,26,0.498,67,2.919,71,1.354,75,2.409,91,1.565,93,3.634,147,2.342,148,1.362,152,4.182,168,3.152,185,3.369,190,2.719,192,0.987,194,2.579,213,1.117,223,1.902,227,0.806,233,0.987,243,1.186,245,2.313,246,1.186,259,1.138,267,1.463,268,1.029,269,1.393,276,1.463,278,1.637,287,4.447,289,3.809,291,4.708,292,2.803,297,1.637,298,1.637,299,1.637,300,1.637,301,1.637,302,1.637,318,0.821,333,1.319,365,1.404,389,1.029,459,1.404,540,1.871,612,1.463,617,1.463,664,1.242,804,1.242,913,1.279,947,0.852,1055,1.312,1074,0.852,1134,1.354,1168,2.935,1297,1.463,1373,1.404,1481,2.248,1551,1.463,1674,1.637,2041,1.463,2054,1.637,2152,1.354,2281,1.312,2336,1.354,2349,2.475,2350,1.404,2375,2.579,2377,1.537,2379,1.537,2380,1.537,2381,3.152,2382,1.788,2383,1.788,2384,1.788,2385,1.788,2386,1.788,2387,1.788,2388,1.788,2389,1.788,2390,3.152,2391,1.788,2392,1.788,2393,1.788,2394,1.788]],["component/60",[1,0.416]],["title/61-1",[23,25.698]],["name/61-1",[]],["text/61-1",[]],["component/61-1",[]],["title/61-2",[26,18.567]],["name/61-2",[]],["text/61-2",[]],["component/61-2",[]],["title/61-3",[334,23.439]],["name/61-3",[]],["text/61-3",[]],["component/61-3",[]],["title/61-4",[269,18.198]],["name/61-4",[]],["text/61-4",[]],["component/61-4",[]],["title/61-5",[887,25.345]],["name/61-5",[]],["text/61-5",[]],["component/61-5",[]],["title/61-6",[221,43.248]],["name/61-6",[]],["text/61-6",[]],["component/61-6",[]],["title/61-7",[2395,66.602]],["name/61-7",[]],["text/61-7",[]],["component/61-7",[]],["title/61-8",[9,46.271]],["name/61-8",[]],["text/61-8",[]],["component/61-8",[]],["title/61",[11,31.147]],["name/61",[11,0.643]],["text/61",[4,1.04,6,2.38,8,1.677,9,4.408,10,0.746,11,4.803,15,0.584,16,0.622,26,0.427,67,3.089,71,1.162,75,2.191,91,1.365,93,3.574,147,2.114,148,1.188,152,4.271,168,3.424,180,0.847,185,3.332,188,1.094,189,0.738,191,1.961,192,0.847,196,2.75,213,2.336,223,1.659,227,0.691,233,0.847,239,1.404,243,1.017,245,2.018,259,0.976,267,1.255,268,0.883,269,1.434,272,2.518,287,4.728,288,1.404,289,4.031,290,1.404,291,4.982,292,3.022,293,2.518,294,2.518,295,1.404,296,1.404,318,0.704,333,1.151,338,2.185,355,0.724,365,1.204,389,0.883,540,2.22,597,4.173,612,1.255,617,1.255,664,1.065,758,1.319,804,1.065,913,1.517,947,0.731,1055,1.125,1074,0.731,1112,0.858,1131,1.319,1134,1.162,1168,0.883,1297,1.255,1373,1.204,1481,1.961,2041,1.255,2152,1.162,2281,1.125,2336,1.162,2349,2.159,2350,1.204,2375,2.25,2377,1.319,2379,1.319,2380,1.319,2396,2.75,2397,1.533,2398,1.533,2399,1.533,2400,1.404,2401,1.404,2402,1.533,2403,1.404,2404,1.533,2405,1.533,2406,2.75,2407,1.533,2408,2.75,2409,1.533,2410,1.533,2411,1.533,2412,1.533]],["component/61",[1,0.416]],["title/62-1",[23,25.698]],["name/62-1",[]],["text/62-1",[]],["component/62-1",[]],["title/62-2",[26,18.567]],["name/62-2",[]],["text/62-2",[]],["component/62-2",[]],["title/62-3",[334,23.439]],["name/62-3",[]],["text/62-3",[]],["component/62-3",[]],["title/62-4",[332,29.789,1057,29.309]],["name/62-4",[]],["text/62-4",[]],["component/62-4",[]],["title/62-5",[269,18.198]],["name/62-5",[]],["text/62-5",[]],["component/62-5",[]],["title/62-6",[887,25.345]],["name/62-6",[]],["text/62-6",[]],["component/62-6",[]],["title/62-7",[221,43.248]],["name/62-7",[]],["text/62-7",[]],["component/62-7",[]],["title/62-8",[15,25.345]],["name/62-8",[]],["text/62-8",[]],["component/62-8",[]],["title/62",[474,46.271]],["name/62",[474,0.955]],["text/62",[8,2.528,15,1.329,16,0.816,24,1.157,26,0.56,33,2.223,75,2.352,93,2.994,121,1.433,135,1.522,143,1.475,147,2.229,148,0.868,160,0.923,168,2.517,185,2.431,203,3.843,208,1.578,213,2.182,223,2.794,227,0.906,233,1.11,255,2.893,269,1.512,287,4.453,289,1.193,292,3.071,309,1.523,332,1.213,333,1.461,474,6.595,540,1.193,547,1.475,664,1.396,708,1.84,723,1.396,791,3.015,913,1.417,927,1.333,947,0.958,961,1.728,1057,5.057,1063,2.268,1074,0.958,1083,1.523,1112,1.125,1129,1.84,1133,1.475,1134,1.523,1136,3.789,1147,2.742,1364,1.645,1389,2.742,1480,1.84,1660,1.645,2065,1.84,2152,1.523,2232,1.728,2336,1.523,2349,2.742,2350,1.578,2413,1.84,2414,3.197,2415,2.01,2416,2.01,2417,2.01,2418,9.288,2419,3.492,2420,2.01,2421,2.01,2422,2.01,2423,2.01,2424,2.01,2425,2.01,2426,2.01,2427,4.631,2428,2.01,2429,2.01,2430,2.01,2431,2.01,2432,2.01,2433,2.01,2434,1.84,2435,2.01,2436,1.84,2437,2.01]],["component/62",[1,0.416]],["title/63-1",[23,25.698]],["name/63-1",[]],["text/63-1",[]],["component/63-1",[]],["title/63-2",[26,18.567]],["name/63-2",[]],["text/63-2",[]],["component/63-2",[]],["title/63-3",[334,23.439]],["name/63-3",[]],["text/63-3",[]],["component/63-3",[]],["title/63-4",[269,18.198]],["name/63-4",[]],["text/63-4",[]],["component/63-4",[]],["title/63-5",[887,25.345]],["name/63-5",[]],["text/63-5",[]],["component/63-5",[]],["title/63-6",[788,25.698]],["name/63-6",[]],["text/63-6",[]],["component/63-6",[]],["title/63-7",[221,43.248]],["name/63-7",[]],["text/63-7",[]],["component/63-7",[]],["title/63",[196,40.19]],["name/63",[196,0.829]],["text/63",[8,3.263,11,3.658,12,4.157,15,1.84,16,2.491,26,0.824,75,1.815,86,1.217,93,2.352,135,1.287,147,1.948,168,1.344,180,1.631,185,2.539,188,2.107,190,2.261,192,1.631,196,5.945,207,1.653,213,3.021,223,2.918,227,1.332,243,1.959,245,2.168,269,1.938,287,2.918,333,1.236,338,3.587,348,3.206,392,4.353,406,2.238,558,2.32,694,3.206,705,2.481,730,1.918,758,2.54,764,1.32,900,1.701,913,1.962,915,2.023,916,1.344,947,1.408,1055,2.168,1074,1.408,1109,1.918,1112,1.653,1168,3.534,1483,3.548,1486,2.053,1544,2.238,2400,2.705,2401,2.705,2403,2.705,2438,2.954,2439,2.954,2440,2.954,2441,2.954,2442,2.954]],["component/63",[1,0.416]],["title/64-1",[23,25.698]],["name/64-1",[]],["text/64-1",[]],["component/64-1",[]],["title/64-2",[26,18.567]],["name/64-2",[]],["text/64-2",[]],["component/64-2",[]],["title/64-3",[334,23.439]],["name/64-3",[]],["text/64-3",[]],["component/64-3",[]],["title/64-4",[269,18.198]],["name/64-4",[]],["text/64-4",[]],["component/64-4",[]],["title/64-5",[887,25.345]],["name/64-5",[]],["text/64-5",[]],["component/64-5",[]],["title/64-6",[788,25.698]],["name/64-6",[]],["text/64-6",[]],["component/64-6",[]],["title/64-7",[221,43.248]],["name/64-7",[]],["text/64-7",[]],["component/64-7",[]],["title/64-8",[1208,38.35]],["name/64-8",[]],["text/64-8",[]],["component/64-8",[]],["title/64",[182,35.835]],["name/64",[182,0.74]],["text/64",[3,0.878,7,0.776,8,1.892,11,1.49,15,0.481,16,0.937,26,0.352,69,0.763,75,2.115,80,0.857,86,0.521,92,2.676,93,2.476,114,0.656,147,2.27,148,2.435,150,2.029,152,1.31,154,2.624,156,1.123,160,2.967,161,0.648,168,1.449,178,0.763,180,0.698,182,5.591,185,1.673,188,0.901,189,0.608,190,0.591,192,0.698,196,1.393,198,2.607,199,2.917,200,2.501,201,1.157,202,1.034,203,2.213,204,2.504,205,0.901,211,0.878,212,1.442,213,1.991,223,1.923,227,0.57,233,0.698,244,0.992,245,0.927,247,1.034,258,0.857,259,0.805,268,0.728,269,1.251,287,3.664,289,0.75,316,0.957,318,0.58,333,0.966,364,1.157,391,0.957,406,0.957,441,0.992,453,3.219,459,0.992,471,0.763,472,0.878,473,0.927,540,1.37,542,1.087,558,0.992,570,1.349,588,0.927,589,0.838,593,2.028,653,0.992,664,0.878,730,1.499,732,0.957,733,1.157,764,1.032,776,2.74,876,1.694,882,0.672,900,0.728,913,1.293,915,0.966,916,0.575,927,0.838,933,0.992,936,1.923,943,0.957,947,1.519,958,0.821,983,0.927,985,0.957,986,0.821,1055,0.927,1071,1.985,1074,0.602,1101,1.953,1112,0.707,1133,0.927,1134,0.957,1168,0.728,1213,0.878,1215,0.901,1223,0.878,1342,0.992,1366,1.034,1419,0.927,1437,2.413,1534,1.087,1589,2.113,1609,1.087,1627,2.607,1761,1.034,1775,0.992,2031,1.087,2152,0.957,2336,0.957,2337,1.157,2345,1.157,2349,1.812,2350,0.992,2443,2.308,2444,1.264,2445,1.264,2446,1.157,2447,1.264,2448,1.264,2449,1.264,2450,1.264,2451,1.264,2452,1.264,2453,1.264,2454,1.264,2455,1.264,2456,1.264,2457,1.264,2458,1.157,2459,1.264,2460,2.308,2461,1.264,2462,1.264,2463,2.308,2464,1.264,2465,1.264,2466,1.264,2467,1.264,2468,1.264,2469,1.264,2470,1.264,2471,1.264,2472,1.264,2473,1.264,2474,1.157,2475,1.157]],["component/64",[1,0.416]],["title/65-1",[23,25.698]],["name/65-1",[]],["text/65-1",[]],["component/65-1",[]],["title/65-2",[26,18.567]],["name/65-2",[]],["text/65-2",[]],["component/65-2",[]],["title/65-3",[334,23.439]],["name/65-3",[]],["text/65-3",[]],["component/65-3",[]],["title/65-4",[269,18.198]],["name/65-4",[]],["text/65-4",[]],["component/65-4",[]],["title/65-5",[887,25.345]],["name/65-5",[]],["text/65-5",[]],["component/65-5",[]],["title/65-6",[788,19.048,889,21.157]],["name/65-6",[]],["text/65-6",[]],["component/65-6",[]],["title/65-7",[690,50.451]],["name/65-7",[]],["text/65-7",[]],["component/65-7",[]],["title/65-8",[1034,32.389]],["name/65-8",[]],["text/65-8",[]],["component/65-8",[]],["title/65-9",[449,32.056,2203,42.449]],["name/65-9",[]],["text/65-9",[]],["component/65-9",[]],["title/65-10",[1208,38.35]],["name/65-10",[]],["text/65-10",[]],["component/65-10",[]],["title/65",[473,48.874]],["name/65",[473,1.009]],["text/65",[8,1.708,11,2.393,16,1.14,26,0.304,33,0.694,53,0.856,67,1.278,71,1.527,75,0.409,86,0.449,92,2.046,93,1.96,114,1.817,135,0.475,147,1.132,148,0.471,150,1.551,154,1.774,160,0.501,168,3.13,182,5.163,188,2.928,189,0.525,190,0.51,204,2.954,211,0.757,212,1.259,229,0.619,247,0.892,269,0.956,287,4.459,292,0.723,333,0.456,355,2.191,369,1.527,392,0.669,449,1.309,453,5.63,454,0.739,459,0.856,471,1.696,472,1.4,473,7.395,520,1.337,570,1.178,589,1.337,653,0.856,677,0.98,690,3.515,695,0.723,705,1.034,730,1.825,732,1.527,737,0.778,752,0.856,755,0.8,764,0.901,776,3.99,796,0.694,876,2.062,882,1.071,888,1.531,889,0.864,912,1.353,913,1.421,915,1.176,916,0.496,936,3.087,943,0.826,985,0.826,986,0.708,1017,3.675,1018,0.602,1045,1.845,1053,0.778,1071,0.938,1081,1.649,1082,0.892,1089,0.998,1101,2.752,1109,1.309,1148,2.432,1213,0.757,1406,1.479,1419,0.8,1435,0.856,1437,0.826,1513,3.515,1527,4.766,1551,0.892,1557,0.998,1667,3.01,1752,0.892,1775,2.206,1977,3.205,2031,0.938,2203,3.01,2246,0.998,2458,0.998,2474,1.845,2475,0.998,2476,1.09,2477,1.09,2478,1.09,2479,1.845,2480,1.09,2481,1.09,2482,1.09,2483,1.09,2484,1.09,2485,2.015,2486,2.015,2487,1.09,2488,1.09,2489,1.09,2490,4.106,2491,2.015,2492,1.09,2493,1.09,2494,1.09,2495,1.09,2496,1.09,2497,1.09]],["component/65",[1,0.416]],["title/66-1",[23,25.698]],["name/66-1",[]],["text/66-1",[]],["component/66-1",[]],["title/66-2",[26,18.567]],["name/66-2",[]],["text/66-2",[]],["component/66-2",[]],["title/66-3",[334,23.439]],["name/66-3",[]],["text/66-3",[]],["component/66-3",[]],["title/66-4",[269,18.198]],["name/66-4",[]],["text/66-4",[]],["component/66-4",[]],["title/66-5",[887,25.345]],["name/66-5",[]],["text/66-5",[]],["component/66-5",[]],["title/66-6",[788,25.698]],["name/66-6",[]],["text/66-6",[]],["component/66-6",[]],["title/66-7",[221,43.248]],["name/66-7",[]],["text/66-7",[]],["component/66-7",[]],["title/66-8",[15,25.345]],["name/66-8",[]],["text/66-8",[]],["component/66-8",[]],["title/66-9",[15,18.786,1658,40.397]],["name/66-9",[]],["text/66-9",[]],["component/66-9",[]],["title/66",[121,47.496]],["name/66",[121,0.98]],["text/66",[8,1.62,11,3.585,15,1.004,16,1.07,26,1.004,36,1.592,53,1.149,67,2.003,68,1.074,75,0.99,86,0.603,93,3.386,121,7.746,124,0.819,125,1.679,141,2.172,143,1.074,147,1.45,152,0.831,154,1.555,160,1.653,168,2.312,178,0.883,185,1.89,191,1.881,203,2.501,204,0.932,208,2.826,221,1.713,223,2.172,227,1.985,229,0.831,233,0.808,255,2.249,269,1.687,287,3.419,320,0.971,333,0.613,338,2.104,346,0.856,355,0.691,389,1.519,391,1.109,474,3.059,547,1.074,593,0.932,664,1.017,723,1.017,730,2.859,764,0.654,882,1.402,900,1.519,912,2.447,913,1.461,915,1.506,916,0.666,927,0.971,947,0.698,986,1.713,1074,2.701,1131,1.259,1147,2.071,1148,1.833,1150,2.501,1172,2.071,1251,3.937,1302,1.149,1323,1.109,1389,1.149,1406,1.074,1470,1.34,1627,1.198,1658,3.603,1660,1.198,1719,1.34,1722,1.259,2232,1.259,2336,1.109,2346,1.34,2375,1.198,2413,1.34,2414,1.34,2434,1.34,2436,1.34,2498,3.6,2499,1.464,2500,1.464,2501,1.464,2502,1.464,2503,1.464,2504,1.464,2505,1.464,2506,1.464,2507,3.6,2508,1.464,2509,1.464,2510,1.464,2511,1.464,2512,1.464,2513,1.464,2514,1.464,2515,1.464,2516,1.464,2517,2.638,2518,1.464,2519,1.464,2520,1.464,2521,1.464,2522,1.464,2523,1.464,2524,1.464]],["component/66",[1,0.416]],["title/67-1",[23,25.698]],["name/67-1",[]],["text/67-1",[]],["component/67-1",[]],["title/67-2",[26,18.567]],["name/67-2",[]],["text/67-2",[]],["component/67-2",[]],["title/67-3",[334,23.439]],["name/67-3",[]],["text/67-3",[]],["component/67-3",[]],["title/67-4",[269,18.198]],["name/67-4",[]],["text/67-4",[]],["component/67-4",[]],["title/67-5",[887,25.345]],["name/67-5",[]],["text/67-5",[]],["component/67-5",[]],["title/67-6",[8,18.168,915,20.657]],["name/67-6",[]],["text/67-6",[]],["component/67-6",[]],["title/67-7",[10,32.389]],["name/67-7",[]],["text/67-7",[]],["component/67-7",[]],["title/67-8",[8,18.168,1208,28.426]],["name/67-8",[]],["text/67-8",[]],["component/67-8",[]],["title/67-9",[1208,38.35]],["name/67-9",[]],["text/67-9",[]],["component/67-9",[]],["title/67",[203,27.246,513,24.071,516,28.779]],["name/67",[1485,1.182]],["text/67",[7,1.102,8,3.61,15,0.683,16,1.284,21,1.19,26,0.5,45,3.034,67,0.817,75,3.043,86,1.303,91,1.57,93,3.701,115,2.72,135,1.378,147,2.059,150,1.402,168,0.817,203,2.946,227,1.426,230,1.821,249,3.642,269,1.593,332,1.083,348,1.19,355,2.413,392,1.941,425,5.88,472,2.197,513,1.102,516,1.317,656,4.361,694,2.098,705,0.921,791,0.978,840,1.166,900,1.034,912,1.523,913,1.721,947,0.856,983,1.317,1057,1.066,1063,4.176,1074,0.856,1109,1.166,1126,1.409,1133,3.75,1158,1.317,1168,1.821,1482,4.395,1483,1.317,1484,4.013,1485,7.455,1486,2.197,1487,2.896,1489,1.543,1491,1.643,1493,1.643,1507,5.888,1536,1.469,1544,1.36,1626,1.469,1768,2.72,2036,1.643,2525,3.163,2526,1.795,2527,1.795,2528,1.643,2529,2.896,2530,1.643,2531,1.643,2532,1.795,2533,1.795,2534,1.643,2535,1.643,2536,1.795,2537,1.795,2538,1.643,2539,1.643,2540,1.643,2541,1.795,2542,1.643]],["component/67",[1,0.416]],["title/68-1",[23,25.698]],["name/68-1",[]],["text/68-1",[]],["component/68-1",[]],["title/68-2",[26,18.567]],["name/68-2",[]],["text/68-2",[]],["component/68-2",[]],["title/68-3",[334,23.439]],["name/68-3",[]],["text/68-3",[]],["component/68-3",[]],["title/68-4",[269,18.198]],["name/68-4",[]],["text/68-4",[]],["component/68-4",[]],["title/68-5",[887,25.345]],["name/68-5",[]],["text/68-5",[]],["component/68-5",[]],["title/68-6",[8,18.168,915,20.657]],["name/68-6",[]],["text/68-6",[]],["component/68-6",[]],["title/68-7",[10,32.389]],["name/68-7",[]],["text/68-7",[]],["component/68-7",[]],["title/68-8",[8,18.168,1208,28.426]],["name/68-8",[]],["text/68-8",[]],["component/68-8",[]],["title/68-9",[788,19.048,889,21.157]],["name/68-9",[]],["text/68-9",[]],["component/68-9",[]],["title/68-10",[1034,32.389]],["name/68-10",[]],["text/68-10",[]],["component/68-10",[]],["title/68-11",[1208,38.35]],["name/68-11",[]],["text/68-11",[]],["component/68-11",[]],["title/68",[513,30.3,516,36.227]],["name/68",[1484,1.079]],["text/68",[7,1.868,8,2.924,16,1.53,26,0.334,45,1.304,67,0.545,69,0.722,75,2.043,80,1.49,86,1.254,91,1.09,92,1.779,93,2.867,135,0.957,147,0.482,168,0.545,198,2.49,227,0.54,230,3.133,246,0.794,249,1.372,269,1.202,289,1.304,291,0.878,332,0.722,347,2.17,355,4.099,361,2.233,425,2.064,440,0.794,472,2.114,513,4.059,516,3.993,563,1.797,569,0.794,616,0.748,656,5.238,666,0.878,677,1.48,695,0.794,705,0.614,711,0.94,723,1.526,764,0.535,773,2.557,788,0.847,791,0.652,840,2.448,882,2.632,888,0.652,889,0.513,912,2.119,913,1.786,915,1.578,916,0.545,980,1.029,983,0.878,1017,4.787,1018,1.68,1057,1.304,1063,5.416,1126,0.94,1133,2.233,1158,0.878,1168,1.265,1364,0.98,1366,0.98,1437,0.907,1482,6.207,1484,5.668,1486,0.832,1489,1.029,1512,1.797,1513,0.907,1536,3.085,1559,2.011,1570,2.011,1626,1.797,1660,1.797,1699,1.096,2045,1.096,2074,2.011,2446,1.096,2479,3.452,2528,2.786,2529,4.535,2530,1.096,2531,1.096,2534,1.096,2535,1.096,2538,1.096,2539,1.096,2540,1.096,2542,2.011,2543,1.197,2544,3.043,2545,1.197,2546,1.197,2547,2.196,2548,2.196,2549,1.197,2550,2.196,2551,1.197,2552,1.197,2553,1.197,2554,1.197,2555,1.197,2556,1.197,2557,1.197,2558,1.197,2559,1.197,2560,1.197,2561,1.197,2562,1.197]],["component/68",[1,0.416]]],"invertedIndex":[["",{"_index":93,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{}},"component":{}}],["0",{"_index":204,"title":{},"name":{},"text":{"2":{},"4":{},"13":{},"32":{},"33":{},"37":{},"43":{},"46":{},"48":{},"59":{},"64":{},"65":{},"66":{}},"component":{}}],["0..n",{"_index":2058,"title":{},"name":{},"text":{"46":{}},"component":{}}],["0.0",{"_index":593,"title":{},"name":{},"text":{"4":{},"10":{},"25":{},"29":{},"39":{},"48":{},"49":{},"52":{},"53":{},"58":{},"59":{},"64":{},"66":{}},"component":{}}],["0.08",{"_index":2096,"title":{},"name":{},"text":{"47":{}},"component":{}}],["0.0_db",{"_index":2376,"title":{},"name":{},"text":{"59":{}},"component":{}}],["0.0f",{"_index":2068,"title":{},"name":{},"text":{"46":{},"48":{},"55":{}},"component":{}}],["0.0…​1.0",{"_index":1247,"title":{},"name":{},"text":{"22":{},"24":{}},"component":{}}],["0.0…​inf",{"_index":1273,"title":{},"name":{},"text":{"23":{}},"component":{}}],["0.25",{"_index":1250,"title":{},"name":{},"text":{"22":{},"24":{}},"component":{}}],["0.42",{"_index":2093,"title":{},"name":{},"text":{"47":{}},"component":{}}],["0.46",{"_index":2236,"title":{},"name":{},"text":{"50":{}},"component":{}}],["0.5",{"_index":2094,"title":{},"name":{},"text":{"47":{},"53":{}},"component":{}}],["0.5*(1",{"_index":2247,"title":{},"name":{},"text":{"51":{}},"component":{}}],["0.54",{"_index":2235,"title":{},"name":{},"text":{"50":{}},"component":{}}],["0.5_mhz",{"_index":273,"title":{},"name":{},"text":{"2":{}},"component":{}}],["0.5_pi",{"_index":284,"title":{},"name":{},"text":{"2":{}},"component":{}}],["0.707",{"_index":1165,"title":{},"name":{},"text":{"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{}},"component":{}}],["0.8",{"_index":676,"title":{},"name":{},"text":{"4":{}},"component":{}}],["0.85",{"_index":594,"title":{},"name":{},"text":{"4":{}},"component":{}}],["0.95",{"_index":2220,"title":{},"name":{},"text":{"49":{}},"component":{}}],["0/1",{"_index":640,"title":{},"name":{},"text":{"4":{}},"component":{}}],["0/2",{"_index":648,"title":{},"name":{},"text":{"4":{}},"component":{}}],["0_db",{"_index":939,"title":{},"name":{},"text":{"7":{},"59":{}},"component":{}}],["0x00",{"_index":1851,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x01",{"_index":1852,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x02",{"_index":1854,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x04",{"_index":1856,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x05",{"_index":1858,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x06",{"_index":1860,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x07",{"_index":1862,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x08",{"_index":1864,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x0a",{"_index":1866,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x0b",{"_index":1867,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x0c",{"_index":1869,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x0d",{"_index":1871,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x10",{"_index":1873,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x11",{"_index":1875,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x12",{"_index":1877,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x13",{"_index":1879,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x20",{"_index":1881,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x21",{"_index":1883,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x22",{"_index":1885,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x24",{"_index":1887,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x25",{"_index":1889,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x26",{"_index":1891,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x27",{"_index":1893,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x28",{"_index":1895,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x2a",{"_index":1897,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x2b",{"_index":1899,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x2c",{"_index":1901,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x2d",{"_index":1903,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x30",{"_index":1905,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x31",{"_index":1907,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x32",{"_index":1909,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x33",{"_index":1911,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x40",{"_index":1912,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x41",{"_index":1914,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x42",{"_index":1916,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x43",{"_index":1918,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x44",{"_index":1920,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x45",{"_index":1922,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x46",{"_index":1924,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x47",{"_index":1926,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x48",{"_index":1929,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x49",{"_index":1931,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x4a",{"_index":1933,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x4b",{"_index":1936,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x4c",{"_index":1938,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x4d",{"_index":1940,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x4e",{"_index":1942,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x4f",{"_index":1944,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x50",{"_index":1946,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x51",{"_index":1948,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x52",{"_index":1950,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x53",{"_index":1952,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x54",{"_index":1954,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x5b",{"_index":1956,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x5c",{"_index":1960,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x5d",{"_index":1964,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x5e",{"_index":1967,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x5f",{"_index":1971,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x60",{"_index":1974,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x61",{"_index":1976,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x62",{"_index":1979,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x63",{"_index":1981,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x64",{"_index":1983,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x65",{"_index":1985,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x78",{"_index":1987,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x79",{"_index":1988,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x7a",{"_index":1990,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x7b",{"_index":1992,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x7c",{"_index":1994,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x7d",{"_index":1996,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x7e",{"_index":1997,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x7f",{"_index":1999,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x80",{"_index":1824,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0x90",{"_index":1825,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0xa0",{"_index":1826,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0xb0",{"_index":1827,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0xc0",{"_index":1828,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0xd0",{"_index":1829,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0xe0",{"_index":1830,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0xf0",{"_index":1832,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0xf2",{"_index":1833,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0xf3",{"_index":1834,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0xf6",{"_index":1835,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0xf7",{"_index":1837,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0xf8",{"_index":1838,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0xfa",{"_index":1839,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0xfb",{"_index":1840,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0xfc",{"_index":1841,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0xfe",{"_index":1842,"title":{},"name":{},"text":{"44":{}},"component":{}}],["0xff",{"_index":1843,"title":{},"name":{},"text":{"44":{}},"component":{}}],["1",{"_index":91,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"8":{},"13":{},"14":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"31":{},"32":{},"33":{},"39":{},"44":{},"46":{},"47":{},"48":{},"50":{},"51":{},"60":{},"61":{},"67":{},"68":{}},"component":{}}],["1.0",{"_index":152,"title":{},"name":{},"text":{"2":{},"4":{},"10":{},"11":{},"25":{},"29":{},"39":{},"44":{},"45":{},"48":{},"49":{},"52":{},"53":{},"54":{},"57":{},"58":{},"60":{},"61":{},"64":{},"66":{}},"component":{}}],["1.0_",{"_index":2387,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1.0_hz",{"_index":2404,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1.0_khz",{"_index":2406,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1.0_m",{"_index":2388,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1.0_mhz",{"_index":2407,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1.0_u",{"_index":2389,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1.0f",{"_index":734,"title":{},"name":{},"text":{"4":{},"48":{},"55":{}},"component":{}}],["1.0r",{"_index":2470,"title":{},"name":{},"text":{"64":{}},"component":{}}],["1.13",{"_index":1371,"title":{},"name":{},"text":{"26":{},"27":{}},"component":{}}],["1.31",{"_index":199,"title":{},"name":{},"text":{"2":{},"64":{}},"component":{}}],["1.5_khz",{"_index":271,"title":{},"name":{},"text":{"2":{}},"component":{}}],["1/0",{"_index":634,"title":{},"name":{},"text":{"4":{}},"component":{}}],["1/4",{"_index":1249,"title":{},"name":{},"text":{"22":{},"24":{}},"component":{}}],["1/6",{"_index":2287,"title":{},"name":{},"text":{"55":{}},"component":{}}],["1/div",{"_index":1368,"title":{},"name":{},"text":{"26":{},"27":{}},"component":{}}],["1/n",{"_index":1245,"title":{},"name":{},"text":{"22":{},"24":{}},"component":{}}],["1/nth",{"_index":1705,"title":{},"name":{},"text":{"39":{},"42":{}},"component":{}}],["10",{"_index":834,"title":{},"name":{},"text":{"5":{},"48":{},"59":{}},"component":{}}],["10.14",{"_index":848,"title":{},"name":{},"text":{"5":{}},"component":{}}],["10.3_",{"_index":275,"title":{},"name":{},"text":{"2":{}},"component":{}}],["10.5_u",{"_index":279,"title":{},"name":{},"text":{"2":{}},"component":{}}],["100_m",{"_index":798,"title":{},"name":{},"text":{"4":{},"48":{}},"component":{}}],["10:1",{"_index":1233,"title":{},"name":{},"text":{"22":{},"59":{}},"component":{}}],["10_db",{"_index":282,"title":{},"name":{},"text":{"2":{}},"component":{}}],["11",{"_index":835,"title":{},"name":{},"text":{"5":{}},"component":{}}],["12",{"_index":2499,"title":{},"name":{},"text":{"66":{}},"component":{}}],["128",{"_index":783,"title":{},"name":{},"text":{"4":{}},"component":{}}],["12_db",{"_index":799,"title":{},"name":{},"text":{"4":{},"48":{}},"component":{}}],["12db",{"_index":1531,"title":{},"name":{},"text":{"32":{}},"component":{}}],["15.8",{"_index":257,"title":{},"name":{},"text":{"2":{},"4":{}},"component":{}}],["16",{"_index":1820,"title":{},"name":{},"text":{"44":{}},"component":{}}],["16.04",{"_index":850,"title":{},"name":{},"text":{"5":{}},"component":{}}],["17",{"_index":857,"title":{},"name":{},"text":{"5":{}},"component":{}}],["180",{"_index":2475,"title":{},"name":{},"text":{"64":{},"65":{}},"component":{}}],["1958",{"_index":2090,"title":{},"name":{},"text":{"47":{}},"component":{}}],["1:10",{"_index":2343,"title":{},"name":{},"text":{"59":{}},"component":{}}],["1:2",{"_index":2342,"title":{},"name":{},"text":{"59":{}},"component":{}}],["1:4",{"_index":1274,"title":{},"name":{},"text":{"23":{}},"component":{}}],["1:inf",{"_index":1275,"title":{},"name":{},"text":{"23":{}},"component":{}}],["1:n",{"_index":1272,"title":{},"name":{},"text":{"23":{}},"component":{}}],["1_",{"_index":276,"title":{},"name":{},"text":{"2":{},"4":{},"48":{},"60":{}},"component":{}}],["1_hz",{"_index":2405,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1_khz",{"_index":272,"title":{},"name":{},"text":{"2":{},"61":{}},"component":{}}],["1_m",{"_index":278,"title":{},"name":{},"text":{"2":{},"60":{}},"component":{}}],["1_mhz",{"_index":2409,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1_u",{"_index":2391,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1db",{"_index":1252,"title":{},"name":{},"text":{"22":{},"23":{},"24":{}},"component":{}}],["2",{"_index":92,"title":{},"name":{},"text":{"2":{},"4":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"39":{},"44":{},"46":{},"48":{},"64":{},"65":{},"68":{}},"component":{}}],["2*pi*freq/sp",{"_index":2292,"title":{},"name":{},"text":{"55":{}},"component":{}}],["20",{"_index":2338,"title":{},"name":{},"text":{"59":{}},"component":{}}],["20.5_m",{"_index":277,"title":{},"name":{},"text":{"2":{}},"component":{}}],["2014",{"_index":410,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"8":{}},"component":{}}],["2022",{"_index":837,"title":{},"name":{},"text":{"5":{}},"component":{}}],["2023",{"_index":411,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"8":{}},"component":{}}],["24",{"_index":253,"title":{},"name":{},"text":{"2":{},"4":{},"44":{}},"component":{}}],["24_db",{"_index":252,"title":{},"name":{},"text":{"2":{},"4":{}},"component":{}}],["26/26",{"_index":649,"title":{},"name":{},"text":{"4":{}},"component":{}}],["2626",{"_index":633,"title":{},"name":{},"text":{"4":{}},"component":{}}],["2:1",{"_index":2340,"title":{},"name":{},"text":{"59":{}},"component":{}}],["2_pi",{"_index":283,"title":{},"name":{},"text":{"2":{}},"component":{}}],["3",{"_index":95,"title":{},"name":{},"text":{"2":{},"4":{},"22":{},"23":{},"24":{},"27":{},"39":{},"44":{},"48":{}},"component":{}}],["3.5.1",{"_index":827,"title":{},"name":{},"text":{"5":{}},"component":{}}],["3.5_db",{"_index":281,"title":{},"name":{},"text":{"2":{}},"component":{}}],["30",{"_index":1621,"title":{},"name":{},"text":{"36":{}},"component":{}}],["300_m",{"_index":2195,"title":{},"name":{},"text":{"48":{}},"component":{}}],["30_m",{"_index":2172,"title":{},"name":{},"text":{"48":{}},"component":{}}],["31",{"_index":201,"title":{},"name":{},"text":{"2":{},"64":{}},"component":{}}],["32",{"_index":1692,"title":{},"name":{},"text":{"38":{}},"component":{}}],["350_m",{"_index":595,"title":{},"name":{},"text":{"4":{}},"component":{}}],["360",{"_index":2474,"title":{},"name":{},"text":{"64":{},"65":{}},"component":{}}],["3_db",{"_index":228,"title":{},"name":{},"text":{"2":{}},"component":{}}],["3_m",{"_index":235,"title":{},"name":{},"text":{"2":{}},"component":{}}],["3_mhz",{"_index":274,"title":{},"name":{},"text":{"2":{}},"component":{}}],["3rd",{"_index":109,"title":{},"name":{},"text":{"2":{}},"component":{}}],["4",{"_index":96,"title":{},"name":{},"text":{"2":{},"4":{},"23":{},"27":{},"32":{},"44":{},"46":{},"48":{}},"component":{}}],["440",{"_index":884,"title":{},"name":{},"text":{"5":{},"26":{},"27":{}},"component":{}}],["440_hz",{"_index":239,"title":{},"name":{},"text":{"2":{},"61":{}},"component":{}}],["44100",{"_index":578,"title":{},"name":{},"text":{"4":{}},"component":{}}],["4:1",{"_index":1248,"title":{},"name":{},"text":{"22":{},"23":{},"24":{}},"component":{}}],["4db",{"_index":1253,"title":{},"name":{},"text":{"22":{},"23":{},"24":{}},"component":{}}],["5",{"_index":98,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"48":{}},"component":{}}],["50",{"_index":2323,"title":{},"name":{},"text":{"57":{}},"component":{}}],["500",{"_index":1620,"title":{},"name":{},"text":{"36":{}},"component":{}}],["500_u",{"_index":280,"title":{},"name":{},"text":{"2":{}},"component":{}}],["50_",{"_index":2178,"title":{},"name":{},"text":{"48":{}},"component":{}}],["5_",{"_index":803,"title":{},"name":{},"text":{"4":{},"48":{}},"component":{}}],["5_m",{"_index":236,"title":{},"name":{},"text":{"2":{}},"component":{}}],["6",{"_index":99,"title":{},"name":{},"text":{"2":{},"4":{},"27":{},"59":{}},"component":{}}],["60",{"_index":2023,"title":{},"name":{},"text":{"44":{}},"component":{}}],["61",{"_index":635,"title":{},"name":{},"text":{"4":{}},"component":{}}],["6_db",{"_index":2176,"title":{},"name":{},"text":{"48":{},"59":{}},"component":{}}],["6_m",{"_index":2386,"title":{},"name":{},"text":{"60":{}},"component":{}}],["6db/octav",{"_index":1610,"title":{},"name":{},"text":{"35":{}},"component":{}}],["7",{"_index":100,"title":{},"name":{},"text":{"2":{},"4":{}},"component":{}}],["70_m",{"_index":2174,"title":{},"name":{},"text":{"48":{}},"component":{}}],["8",{"_index":641,"title":{},"name":{},"text":{"4":{}},"component":{}}],["8.1757989156437",{"_index":2500,"title":{},"name":{},"text":{"66":{}},"component":{}}],["80",{"_index":518,"title":{},"name":{},"text":{"3":{}},"component":{}}],["82.4069_hz",{"_index":270,"title":{},"name":{},"text":{"2":{}},"component":{}}],["9",{"_index":642,"title":{},"name":{},"text":{"4":{},"44":{}},"component":{}}],["_bw",{"_index":1174,"title":{},"name":{},"text":{"13":{},"14":{},"19":{},"20":{}},"component":{}}],["_clip",{"_index":394,"title":{},"name":{},"text":{"2":{}},"component":{}}],["_clip(",{"_index":371,"title":{},"name":{},"text":{"2":{}},"component":{}}],["_comp",{"_index":401,"title":{},"name":{},"text":{"2":{}},"component":{}}],["_db",{"_index":2378,"title":{},"name":{},"text":{"59":{}},"component":{}}],["_db(long",{"_index":304,"title":{},"name":{},"text":{"2":{},"59":{}},"component":{}}],["_db(unsign",{"_index":303,"title":{},"name":{},"text":{"2":{},"59":{}},"component":{}}],["_delay",{"_index":582,"title":{},"name":{},"text":{"4":{}},"component":{}}],["_delay.push(_i",{"_index":584,"title":{},"name":{},"text":{"4":{}},"component":{}}],["_delay{350_m",{"_index":577,"title":{},"name":{},"text":{"4":{}},"component":{}}],["_env",{"_index":400,"title":{},"name":{},"text":{"2":{}},"component":{}}],["_env(std::abs(",{"_index":375,"title":{},"name":{},"text":{"2":{}},"component":{}}],["_feedback",{"_index":585,"title":{},"name":{},"text":{"4":{}},"component":{}}],["_gate",{"_index":403,"title":{},"name":{},"text":{"2":{}},"component":{}}],["_gate(env",{"_index":378,"title":{},"name":{},"text":{"2":{}},"component":{}}],["_gate_env",{"_index":405,"title":{},"name":{},"text":{"2":{}},"component":{}}],["_gate_env(g",{"_index":379,"title":{},"name":{},"text":{"2":{}},"component":{}}],["_hp",{"_index":396,"title":{},"name":{},"text":{"2":{}},"component":{}}],["_hp(",{"_index":368,"title":{},"name":{},"text":{"2":{}},"component":{}}],["_hz",{"_index":2410,"title":{},"name":{},"text":{"61":{}},"component":{}}],["_hz(long",{"_index":288,"title":{},"name":{},"text":{"2":{},"61":{}},"component":{}}],["_hz(unsign",{"_index":290,"title":{},"name":{},"text":{"2":{},"61":{}},"component":{}}],["_key",{"_index":774,"title":{},"name":{},"text":{"4":{}},"component":{}}],["_khz",{"_index":2411,"title":{},"name":{},"text":{"61":{}},"component":{}}],["_khz(long",{"_index":293,"title":{},"name":{},"text":{"2":{},"61":{}},"component":{}}],["_khz(unsign",{"_index":294,"title":{},"name":{},"text":{"2":{},"61":{}},"component":{}}],["_lp(_delay",{"_index":604,"title":{},"name":{},"text":{"4":{}},"component":{}}],["_lp{1_khz",{"_index":601,"title":{},"name":{},"text":{"4":{}},"component":{}}],["_m",{"_index":2393,"title":{},"name":{},"text":{"60":{}},"component":{}}],["_makeup_gain",{"_index":384,"title":{},"name":{},"text":{"2":{}},"component":{}}],["_mhz",{"_index":2412,"title":{},"name":{},"text":{"61":{}},"component":{}}],["_mhz(long",{"_index":295,"title":{},"name":{},"text":{"2":{},"61":{}},"component":{}}],["_mhz(unsign",{"_index":296,"title":{},"name":{},"text":{"2":{},"61":{}},"component":{}}],["_ms(long",{"_index":299,"title":{},"name":{},"text":{"2":{},"60":{}},"component":{}}],["_ms(unsign",{"_index":300,"title":{},"name":{},"text":{"2":{},"60":{}},"component":{}}],["_phase",{"_index":2482,"title":{},"name":{},"text":{"65":{}},"component":{}}],["_pi(long",{"_index":305,"title":{},"name":{},"text":{"2":{}},"component":{}}],["_pi(unsign",{"_index":306,"title":{},"name":{},"text":{"2":{}},"component":{}}],["_post_env",{"_index":385,"title":{},"name":{},"text":{"2":{}},"component":{}}],["_s",{"_index":2392,"title":{},"name":{},"text":{"60":{}},"component":{}}],["_s(long",{"_index":297,"title":{},"name":{},"text":{"2":{},"60":{}},"component":{}}],["_s(unsign",{"_index":298,"title":{},"name":{},"text":{"2":{},"60":{}},"component":{}}],["_slope",{"_index":940,"title":{},"name":{},"text":{"7":{}},"component":{}}],["_sm",{"_index":398,"title":{},"name":{},"text":{"2":{}},"component":{}}],["_sm(",{"_index":373,"title":{},"name":{},"text":{"2":{}},"component":{}}],["_step",{"_index":1089,"title":{},"name":{},"text":{"10":{},"65":{}},"component":{}}],["_synth",{"_index":787,"title":{},"name":{},"text":{"4":{}},"component":{}}],["_synth(synth",{"_index":770,"title":{},"name":{},"text":{"4":{}},"component":{}}],["_synth.env.attack",{"_index":780,"title":{},"name":{},"text":{"4":{}},"component":{}}],["_synth.env.releas",{"_index":785,"title":{},"name":{},"text":{"4":{}},"component":{}}],["_synth.phase.set(freq",{"_index":778,"title":{},"name":{},"text":{"4":{}},"component":{}}],["_synth.sampling_r",{"_index":779,"title":{},"name":{},"text":{"4":{}},"component":{}}],["_synth.veloc",{"_index":781,"title":{},"name":{},"text":{"4":{}},"component":{}}],["_threshold",{"_index":938,"title":{},"name":{},"text":{"7":{}},"component":{}}],["_u",{"_index":2394,"title":{},"name":{},"text":{"60":{}},"component":{}}],["_unspecified_base_type_",{"_index":2349,"title":{},"name":{},"text":{"59":{},"60":{},"61":{},"62":{},"64":{}},"component":{}}],["_us(long",{"_index":301,"title":{},"name":{},"text":{"2":{},"60":{}},"component":{}}],["_us(unsign",{"_index":302,"title":{},"name":{},"text":{"2":{},"60":{}},"component":{}}],["_y",{"_index":581,"title":{},"name":{},"text":{"4":{}},"component":{}}],["a.rep",{"_index":1146,"title":{},"name":{},"text":{"11":{}},"component":{}}],["aan",{"_index":1149,"title":{},"name":{},"text":{"11":{}},"component":{}}],["abbrevi",{"_index":2449,"title":{},"name":{},"text":{"64":{}},"component":{}}],["abov",{"_index":173,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"11":{},"16":{},"21":{},"22":{},"23":{},"24":{},"27":{},"34":{},"44":{},"48":{},"51":{},"53":{},"54":{},"57":{},"58":{}},"component":{}}],["abrupt",{"_index":960,"title":{},"name":{},"text":{"7":{}},"component":{}}],["abruptli",{"_index":942,"title":{},"name":{},"text":{"7":{},"22":{}},"component":{}}],["absolut",{"_index":1323,"title":{},"name":{},"text":{"25":{},"26":{},"27":{},"28":{},"29":{},"66":{}},"component":{}}],["abstract",{"_index":1023,"title":{},"name":{},"text":{"9":{},"42":{}},"component":{}}],["abund",{"_index":242,"title":{},"name":{},"text":{"2":{},"4":{}},"component":{}}],["accept",{"_index":167,"title":{},"name":{},"text":{"2":{},"6":{},"7":{},"11":{},"28":{},"45":{},"48":{}},"component":{}}],["access",{"_index":1109,"title":{"11-9":{}},"name":{},"text":{"11":{},"31":{},"32":{},"36":{},"39":{},"43":{},"46":{},"48":{},"63":{},"65":{},"67":{}},"component":{}}],["accessor",{"_index":1208,"title":{"21-9":{},"22-9":{},"23-9":{},"24-9":{},"31-8":{},"33-7":{},"33-10":{},"34-9":{},"37-8":{},"38-8":{},"38-15":{},"39-7":{},"48-19":{},"64-8":{},"65-10":{},"67-8":{},"67-9":{},"68-8":{},"68-11":{}},"name":{},"text":{},"component":{}}],["accident",{"_index":1121,"title":{},"name":{},"text":{"11":{}},"component":{}}],["accommod",{"_index":461,"title":{},"name":{},"text":{"3":{},"32":{},"33":{}},"component":{}}],["accord",{"_index":319,"title":{},"name":{},"text":{"2":{}},"component":{}}],["accordingli",{"_index":1225,"title":{},"name":{},"text":{"21":{},"33":{}},"component":{}}],["accumul",{"_index":453,"title":{},"name":{},"text":{"3":{},"55":{},"64":{},"65":{}},"component":{}}],["accur",{"_index":1002,"title":{},"name":{},"text":{"8":{},"29":{},"59":{}},"component":{}}],["achiev",{"_index":1048,"title":{},"name":{},"text":{"10":{}},"component":{}}],["act",{"_index":1030,"title":{},"name":{},"text":{"9":{},"45":{}},"component":{}}],["action",{"_index":1236,"title":{},"name":{},"text":{"22":{}},"component":{}}],["activ",{"_index":2132,"title":{},"name":{},"text":{"48":{}},"component":{}}],["active_sens",{"_index":1793,"title":{"44-22":{}},"name":{},"text":{"44":{}},"component":{}}],["actual",{"_index":666,"title":{},"name":{},"text":{"4":{},"10":{},"31":{},"32":{},"33":{},"38":{},"68":{}},"component":{}}],["ad",{"_index":1419,"title":{},"name":{},"text":{"28":{},"33":{},"37":{},"39":{},"48":{},"64":{},"65":{}},"component":{}}],["ad.default_sample_r",{"_index":1644,"title":{},"name":{},"text":{"37":{}},"component":{}}],["ad.id",{"_index":1640,"title":{},"name":{},"text":{"37":{}},"component":{}}],["ad.input_channel",{"_index":1642,"title":{},"name":{},"text":{"37":{}},"component":{}}],["ad.nam",{"_index":1641,"title":{},"name":{},"text":{"37":{}},"component":{}}],["ad.output_channel",{"_index":1643,"title":{},"name":{},"text":{"37":{}},"component":{}}],["adc",{"_index":73,"title":{},"name":{},"text":{"2":{}},"component":{}}],["add",{"_index":603,"title":{},"name":{},"text":{"4":{},"11":{},"22":{},"24":{},"32":{},"33":{},"46":{},"48":{}},"component":{}}],["addit",{"_index":947,"title":{},"name":{},"text":{"7":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"26":{},"27":{},"31":{},"32":{},"36":{},"38":{},"39":{},"47":{},"48":{},"49":{},"50":{},"51":{},"53":{},"55":{},"56":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"66":{},"67":{}},"component":{}}],["addition",{"_index":828,"title":{},"name":{},"text":{"5":{}},"component":{}}],["adher",{"_index":2297,"title":{},"name":{},"text":{"55":{}},"component":{}}],["adjust",{"_index":1038,"title":{},"name":{},"text":{"10":{},"21":{},"31":{}},"component":{}}],["admir",{"_index":1523,"title":{},"name":{},"text":{"32":{}},"component":{}}],["adsr",{"_index":608,"title":{"48-20":{}},"name":{},"text":{"4":{},"48":{}},"component":{}}],["adsr_envelope_gen",{"_index":718,"title":{},"name":{},"text":{"4":{},"48":{}},"component":{}}],["adsr_envelope_gen(config",{"_index":2180,"title":{},"name":{},"text":{"48":{}},"component":{}}],["adsr_envelope_gen::adsr_envelope_gen(config",{"_index":2186,"title":{},"name":{},"text":{"48":{}},"component":{}}],["adsr_envelope_gen::attack_rate(dur",{"_index":2206,"title":{},"name":{},"text":{"48":{}},"component":{}}],["adsr_envelope_gen::decay_rate(dur",{"_index":2208,"title":{},"name":{},"text":{"48":{}},"component":{}}],["adsr_envelope_gen::release_rate(dur",{"_index":2214,"title":{},"name":{},"text":{"48":{}},"component":{}}],["adsr_envelope_gen::sustain_level(decibel",{"_index":2210,"title":{},"name":{},"text":{"48":{}},"component":{}}],["adsr_envelope_gen::sustain_rate(dur",{"_index":2212,"title":{},"name":{},"text":{"48":{}},"component":{}}],["advanc",{"_index":538,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["advantag",{"_index":244,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"26":{},"64":{}},"component":{}}],["advoc",{"_index":539,"title":{},"name":{},"text":{"3":{}},"component":{}}],["affect",{"_index":1726,"title":{},"name":{},"text":{"39":{}},"component":{}}],["aforement",{"_index":1005,"title":{},"name":{},"text":{"8":{}},"component":{}}],["again",{"_index":797,"title":{},"name":{},"text":{"4":{},"26":{},"27":{}},"component":{}}],["agc",{"_index":489,"title":{"21":{}},"name":{"21":{}},"text":{"3":{},"21":{},"28":{}},"component":{}}],["agc(decibel",{"_index":1217,"title":{},"name":{},"text":{"21":{}},"component":{}}],["agc(g",{"_index":1224,"title":{},"name":{},"text":{"21":{}},"component":{}}],["agc(max",{"_index":1222,"title":{},"name":{},"text":{"21":{}},"component":{}}],["aim",{"_index":1127,"title":{},"name":{},"text":{"11":{}},"component":{}}],["air",{"_index":645,"title":{},"name":{},"text":{"4":{}},"component":{}}],["alert",{"_index":2363,"title":{},"name":{},"text":{"59":{}},"component":{}}],["algorithm",{"_index":321,"title":{},"name":{},"text":{"2":{},"58":{}},"component":{}}],["alia",{"_index":140,"title":{},"name":{},"text":{"2":{},"26":{},"27":{},"28":{}},"component":{}}],["alias",{"_index":1083,"title":{},"name":{},"text":{"10":{},"53":{},"54":{},"57":{},"58":{},"62":{}},"component":{}}],["all_notes_off",{"_index":1991,"title":{},"name":{},"text":{"44":{}},"component":{}}],["all_sounds_off",{"_index":1986,"title":{},"name":{},"text":{"44":{}},"component":{}}],["allow",{"_index":227,"title":{},"name":{},"text":{"2":{},"4":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"23":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"36":{},"38":{},"39":{},"43":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"53":{},"55":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"66":{},"67":{},"68":{}},"component":{}}],["allpass",{"_index":920,"title":{},"name":{"12":{}},"text":{"6":{},"12":{},"13":{}},"component":{}}],["allpass(f",{"_index":1169,"title":{},"name":{},"text":{"12":{}},"component":{}}],["allpass(frequ",{"_index":1164,"title":{},"name":{},"text":{"12":{}},"component":{}}],["along",{"_index":2037,"title":{},"name":{},"text":{"45":{}},"component":{}}],["alreadi",{"_index":1416,"title":{},"name":{},"text":{"28":{},"59":{}},"component":{}}],["alter",{"_index":1467,"title":{},"name":{},"text":{"31":{},"59":{}},"component":{}}],["altern",{"_index":1638,"title":{},"name":{},"text":{"37":{},"46":{}},"component":{}}],["although",{"_index":980,"title":{},"name":{},"text":{"8":{},"55":{},"68":{}},"component":{}}],["alway",{"_index":979,"title":{},"name":{},"text":{"8":{},"46":{}},"component":{}}],["amount",{"_index":590,"title":{},"name":{},"text":{"4":{},"22":{},"23":{},"24":{}},"component":{}}],["amplifi",{"_index":610,"title":{},"name":{},"text":{"4":{}},"component":{}}],["amplitud",{"_index":977,"title":{},"name":{},"text":{"8":{},"10":{},"36":{},"47":{},"49":{},"52":{},"54":{},"56":{},"59":{}},"component":{}}],["analog",{"_index":1050,"title":{},"name":{},"text":{"10":{},"55":{}},"component":{}}],["analysi",{"_index":1403,"title":{},"name":{},"text":{"27":{}},"component":{}}],["analyz",{"_index":989,"title":{},"name":{},"text":{"8":{},"30":{},"42":{},"45":{}},"component":{}}],["angl",{"_index":183,"title":{},"name":{},"text":{"2":{}},"component":{}}],["anoth",{"_index":181,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"10":{},"59":{}},"component":{}}],["anyth",{"_index":592,"title":{},"name":{},"text":{"4":{},"48":{},"49":{}},"component":{}}],["anywher",{"_index":2281,"title":{},"name":{},"text":{"54":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{}},"component":{}}],["ap",{"_index":1167,"title":{},"name":{},"text":{"12":{}},"component":{}}],["ap.config(f",{"_index":1170,"title":{},"name":{},"text":{"12":{}},"component":{}}],["api",{"_index":908,"title":{},"name":{},"text":{"6":{},"26":{},"28":{}},"component":{}}],["app",{"_index":628,"title":{},"name":{},"text":{"4":{}},"component":{}}],["appar",{"_index":1395,"title":{},"name":{},"text":{"27":{}},"component":{}}],["appli",{"_index":599,"title":{},"name":{},"text":{"4":{},"7":{},"11":{},"21":{},"22":{},"23":{},"24":{},"28":{},"48":{},"53":{},"54":{},"57":{},"58":{}},"component":{}}],["applic",{"_index":80,"title":{},"name":{},"text":{"2":{},"4":{},"9":{},"25":{},"27":{},"29":{},"35":{},"45":{},"64":{},"68":{}},"component":{}}],["application’",{"_index":1001,"title":{},"name":{},"text":{"8":{}},"component":{}}],["approach",{"_index":1285,"title":{},"name":{},"text":{"24":{},"55":{}},"component":{}}],["appropri",{"_index":237,"title":{},"name":{},"text":{"2":{}},"component":{}}],["approx_db",{"_index":2372,"title":{},"name":{},"text":{"59":{}},"component":{}}],["approx_db(float",{"_index":2353,"title":{},"name":{},"text":{"59":{}},"component":{}}],["approx_db(v",{"_index":2368,"title":{},"name":{},"text":{"59":{}},"component":{}}],["approxim",{"_index":1397,"title":{},"name":{},"text":{"27":{},"58":{},"59":{}},"component":{}}],["apt",{"_index":864,"title":{},"name":{},"text":{"5":{}},"component":{}}],["aptli",{"_index":426,"title":{},"name":{},"text":{"3":{}},"component":{}}],["ar",{"_index":484,"title":{"25":{}},"name":{},"text":{"3":{},"25":{},"27":{}},"component":{}}],["ar_envelope_follow",{"_index":1296,"title":{},"name":{"25":{}},"text":{"25":{}},"component":{}}],["ar_envelope_follower(atk",{"_index":1343,"title":{},"name":{},"text":{"25":{}},"component":{}}],["ar_envelope_follower(env",{"_index":1344,"title":{},"name":{},"text":{"25":{}},"component":{}}],["arbitrari",{"_index":2031,"title":{},"name":{},"text":{"45":{},"64":{},"65":{}},"component":{}}],["architect",{"_index":533,"title":{},"name":{},"text":{"3":{}},"component":{}}],["arg",{"_index":2154,"title":{},"name":{},"text":{"48":{}},"component":{}}],["argument",{"_index":1090,"title":{},"name":{},"text":{"10":{},"21":{},"22":{},"23":{},"24":{},"48":{}},"component":{}}],["arithmet",{"_index":232,"title":{"11-5":{},"11-11":{},"43-3":{}},"name":{},"text":{"2":{},"11":{},"28":{},"43":{}},"component":{}}],["around",{"_index":2277,"title":{},"name":{},"text":{"54":{}},"component":{}}],["arrang",{"_index":2042,"title":{},"name":{},"text":{"46":{}},"component":{}}],["array",{"_index":1803,"title":{},"name":{},"text":{"44":{},"46":{},"56":{}},"component":{}}],["arriv",{"_index":818,"title":{},"name":{},"text":{"4":{},"33":{}},"component":{}}],["arrow",{"_index":54,"title":{},"name":{},"text":{"2":{}},"component":{}}],["articl",{"_index":1383,"title":{},"name":{},"text":{"27":{}},"component":{}}],["artifact",{"_index":1087,"title":{},"name":{},"text":{"10":{},"53":{},"54":{},"57":{},"58":{}},"component":{}}],["as.cpu_load",{"_index":1728,"title":{},"name":{},"text":{"39":{}},"component":{}}],["as.default_sample_r",{"_index":1739,"title":{},"name":{},"text":{"39":{}},"component":{}}],["as.error",{"_index":1732,"title":{},"name":{},"text":{"39":{}},"component":{}}],["as.input_channel",{"_index":1737,"title":{},"name":{},"text":{"39":{}},"component":{}}],["as.input_lat",{"_index":1734,"title":{},"name":{},"text":{"39":{}},"component":{}}],["as.is_valid",{"_index":1720,"title":{},"name":{},"text":{"39":{}},"component":{}}],["as.output_channel",{"_index":1738,"title":{},"name":{},"text":{"39":{}},"component":{}}],["as.output_lat",{"_index":1736,"title":{},"name":{},"text":{"39":{}},"component":{}}],["as.start",{"_index":1740,"title":{},"name":{},"text":{"39":{}},"component":{}}],["as.stop",{"_index":1741,"title":{},"name":{},"text":{"39":{}},"component":{}}],["as.tim",{"_index":1723,"title":{},"name":{},"text":{"39":{}},"component":{}}],["as_doubl",{"_index":225,"title":{},"name":{},"text":{"2":{},"21":{},"22":{},"23":{},"24":{}},"component":{}}],["as_double(basic_interv",{"_index":2423,"title":{},"name":{},"text":{"62":{}},"component":{}}],["as_double(d",{"_index":2385,"title":{},"name":{},"text":{"60":{}},"component":{}}],["as_double(dur",{"_index":2382,"title":{},"name":{},"text":{"60":{}},"component":{}}],["as_double(f",{"_index":2401,"title":{},"name":{},"text":{"61":{},"63":{}},"component":{}}],["as_double(frequ",{"_index":2398,"title":{},"name":{},"text":{"61":{}},"component":{}}],["as_double(i",{"_index":2431,"title":{},"name":{},"text":{"62":{}},"component":{}}],["as_double(p",{"_index":2519,"title":{},"name":{},"text":{"66":{}},"component":{}}],["as_double(pitch",{"_index":2511,"title":{},"name":{},"text":{"66":{}},"component":{}}],["as_float",{"_index":224,"title":{},"name":{},"text":{"2":{},"21":{},"22":{},"23":{},"24":{}},"component":{}}],["as_float(12_db",{"_index":226,"title":{},"name":{},"text":{"2":{}},"component":{}}],["as_float(_comp(env_db",{"_index":383,"title":{},"name":{},"text":{"2":{}},"component":{}}],["as_float(basic_interv",{"_index":2422,"title":{},"name":{},"text":{"62":{}},"component":{}}],["as_float(comp(env",{"_index":1254,"title":{},"name":{},"text":{"22":{},"24":{}},"component":{}}],["as_float(d",{"_index":2384,"title":{},"name":{},"text":{"60":{}},"component":{}}],["as_float(dur",{"_index":2383,"title":{},"name":{},"text":{"60":{}},"component":{}}],["as_float(exp(env",{"_index":1277,"title":{},"name":{},"text":{"23":{}},"component":{}}],["as_float(f",{"_index":2400,"title":{},"name":{},"text":{"61":{},"63":{}},"component":{}}],["as_float(frequ",{"_index":2399,"title":{},"name":{},"text":{"61":{}},"component":{}}],["as_float(g(env",{"_index":1227,"title":{},"name":{},"text":{"21":{}},"component":{}}],["as_float(i",{"_index":2430,"title":{},"name":{},"text":{"62":{}},"component":{}}],["as_float(p",{"_index":2518,"title":{},"name":{},"text":{"66":{}},"component":{}}],["as_float(pitch",{"_index":2510,"title":{},"name":{},"text":{"66":{}},"component":{}}],["as_frequency(p",{"_index":2520,"title":{},"name":{},"text":{"66":{}},"component":{}}],["as_frequency(pitch",{"_index":2509,"title":{},"name":{},"text":{"66":{}},"component":{}}],["as_int(basic_interv",{"_index":2421,"title":{},"name":{},"text":{"62":{}},"component":{}}],["as_int(i",{"_index":2429,"title":{},"name":{},"text":{"62":{}},"component":{}}],["asid",{"_index":2098,"title":{},"name":{},"text":{"47":{},"50":{},"51":{}},"component":{}}],["ask",{"_index":629,"title":{},"name":{},"text":{"4":{}},"component":{}}],["assign",{"_index":889,"title":{"6-7":{},"10-6":{},"10-22":{},"10-28":{},"11-8":{},"21-6":{},"22-6":{},"23-6":{},"24-6":{},"25-7":{},"26-7":{},"27-9":{},"28-7":{},"29-8":{},"30-7":{},"31-9":{},"33-8":{},"34-6":{},"35-7":{},"37-6":{},"38-7":{},"38-13":{},"38-20":{},"48-8":{},"65-6":{},"68-9":{}},"name":{},"text":{"6":{},"10":{},"11":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"37":{},"48":{},"65":{},"68":{}},"component":{}}],["astut",{"_index":725,"title":{},"name":{},"text":{"4":{}},"component":{}}],["asynchron",{"_index":1020,"title":{},"name":{},"text":{"9":{}},"component":{}}],["asynchrono",{"_index":1028,"title":{},"name":{},"text":{"9":{}},"component":{}}],["atk",{"_index":1341,"title":{},"name":{},"text":{"25":{}},"component":{}}],["attack",{"_index":763,"title":{},"name":{},"text":{"4":{},"10":{},"22":{},"25":{},"27":{},"29":{},"34":{},"36":{},"44":{},"48":{}},"component":{}}],["attack(float",{"_index":1337,"title":{},"name":{},"text":{"25":{}},"component":{}}],["attack_",{"_index":1338,"title":{},"name":{},"text":{"25":{}},"component":{}}],["attack_r",{"_index":2171,"title":{},"name":{},"text":{"48":{}},"component":{}}],["attack_rate(dur",{"_index":2181,"title":{},"name":{},"text":{"48":{}},"component":{}}],["attack_width",{"_index":1618,"title":{},"name":{},"text":{"36":{}},"component":{}}],["attempt",{"_index":1300,"title":{},"name":{},"text":{"25":{}},"component":{}}],["attenu",{"_index":1186,"title":{},"name":{},"text":{"16":{},"18":{},"22":{},"23":{},"24":{},"30":{},"32":{},"34":{}},"component":{}}],["audio",{"_index":35,"title":{"3":{},"9":{},"42":{}},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"11":{},"21":{},"22":{},"23":{},"24":{},"25":{},"29":{},"34":{},"37":{},"38":{},"39":{},"42":{},"47":{},"50":{},"51":{},"56":{}},"component":{}}],["audio_devic",{"_index":1011,"title":{"37":{}},"name":{"37":{}},"text":{"9":{},"37":{},"39":{}},"component":{}}],["audio_device(b",{"_index":1633,"title":{},"name":{},"text":{"37":{}},"component":{}}],["audio_device::get(id",{"_index":1637,"title":{},"name":{},"text":{"37":{}},"component":{}}],["audio_device::list",{"_index":1636,"title":{},"name":{},"text":{"37":{}},"component":{}}],["audio_fil",{"_index":877,"title":{"38":{}},"name":{"38":{}},"text":{"5":{},"9":{},"38":{}},"component":{}}],["audio_stream",{"_index":1016,"title":{"39":{}},"name":{"39":{},"42":{}},"text":{"9":{},"39":{}},"component":{}}],["audio_stream(",{"_index":1717,"title":{},"name":{},"text":{"39":{}},"component":{}}],["audio_stream(1",{"_index":1745,"title":{},"name":{},"text":{"39":{}},"component":{}}],["audio_stream(ad",{"_index":1718,"title":{},"name":{},"text":{"39":{}},"component":{}}],["audio_stream(q::audio_device::get(device_id",{"_index":672,"title":{},"name":{},"text":{"4":{}},"component":{}}],["audio_stream_bas",{"_index":1701,"title":{},"name":{},"text":{"39":{},"42":{}},"component":{}}],["augment",{"_index":240,"title":{},"name":{},"text":{"2":{}},"component":{}}],["austrian",{"_index":2241,"title":{},"name":{},"text":{"51":{}},"component":{}}],["author",{"_index":424,"title":{"3-3":{}},"name":{},"text":{"3":{}},"component":{}}],["auto",{"_index":233,"title":{},"name":{},"text":{"2":{},"4":{},"21":{},"22":{},"23":{},"24":{},"37":{},"38":{},"39":{},"43":{},"46":{},"48":{},"54":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"64":{},"66":{}},"component":{}}],["automat",{"_index":1209,"title":{},"name":{},"text":{"21":{},"25":{},"27":{},"29":{},"48":{}},"component":{}}],["auxiliari",{"_index":134,"title":{},"name":{},"text":{"2":{}},"component":{}}],["avail",{"_index":286,"title":{},"name":{},"text":{"2":{},"4":{},"9":{},"37":{}},"component":{}}],["averag",{"_index":485,"title":{"26":{},"32":{}},"name":{},"text":{"3":{},"26":{},"27":{},"28":{},"32":{}},"component":{}}],["avoid",{"_index":1118,"title":{},"name":{},"text":{"11":{},"29":{},"53":{},"54":{},"56":{},"57":{},"58":{},"59":{}},"component":{}}],["aw",{"_index":1623,"title":{},"name":{},"text":{"36":{}},"component":{}}],["b",{"_index":912,"title":{},"name":{},"text":{"6":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"37":{},"38":{},"44":{},"48":{},"65":{},"66":{},"67":{},"68":{}},"component":{}}],["b.rep",{"_index":1160,"title":{},"name":{},"text":{"11":{}},"component":{}}],["back",{"_index":563,"title":{},"name":{},"text":{"4":{},"48":{},"58":{},"68":{}},"component":{}}],["background",{"_index":1584,"title":{},"name":{},"text":{"34":{}},"component":{}}],["balanc",{"_index":1863,"title":{},"name":{},"text":{"44":{}},"component":{}}],["balance_lsb",{"_index":1894,"title":{},"name":{},"text":{"44":{}},"component":{}}],["band",{"_index":478,"title":{"13":{},"14":{}},"name":{},"text":{"3":{},"6":{},"13":{},"14":{}},"component":{}}],["bandlimit",{"_index":2331,"title":{},"name":{},"text":{"58":{}},"component":{}}],["bandpass_cpg",{"_index":919,"title":{},"name":{"13":{}},"text":{"6":{},"13":{}},"component":{}}],["bandpass_cpg(f",{"_index":1176,"title":{},"name":{},"text":{"13":{}},"component":{}}],["bandpass_cpg(frequ",{"_index":1173,"title":{},"name":{},"text":{"13":{}},"component":{}}],["bandpass_csg",{"_index":918,"title":{},"name":{"14":{}},"text":{"6":{},"14":{}},"component":{}}],["bandpass_csg(f",{"_index":1180,"title":{},"name":{},"text":{"14":{}},"component":{}}],["bandpass_csg(frequ",{"_index":1179,"title":{},"name":{},"text":{"14":{}},"component":{}}],["bandwidth",{"_index":607,"title":{},"name":{},"text":{"4":{},"10":{},"13":{},"14":{},"19":{},"20":{},"53":{},"54":{},"57":{},"58":{}},"component":{}}],["bandwidthlimitedoscil",{"_index":1033,"title":{"10-13":{}},"name":{},"text":{"10":{},"53":{},"54":{},"57":{},"58":{}},"component":{}}],["bank_select",{"_index":1850,"title":{},"name":{},"text":{"44":{}},"component":{}}],["bank_select_lsb",{"_index":1880,"title":{},"name":{},"text":{"44":{}},"component":{}}],["base",{"_index":900,"title":{},"name":{},"text":{"6":{},"8":{},"27":{},"30":{},"31":{},"32":{},"36":{},"38":{},"39":{},"42":{},"43":{},"44":{},"46":{},"48":{},"59":{},"63":{},"64":{},"66":{},"67":{}},"component":{}}],["base::index_typ",{"_index":1492,"title":{},"name":{},"text":{"31":{}},"component":{}}],["base::interpolation_typ",{"_index":1494,"title":{},"name":{},"text":{"31":{}},"component":{}}],["base::storage_typ",{"_index":1490,"title":{},"name":{},"text":{"31":{}},"component":{}}],["base::value_typ",{"_index":1488,"title":{},"name":{},"text":{"31":{}},"component":{}}],["base_frequ",{"_index":2504,"title":{},"name":{},"text":{"66":{}},"component":{}}],["base_typ",{"_index":2152,"title":{},"name":{},"text":{"48":{},"59":{},"60":{},"61":{},"62":{},"64":{}},"component":{}}],["base_type::base_typ",{"_index":2350,"title":{},"name":{},"text":{"59":{},"60":{},"61":{},"62":{},"64":{}},"component":{}}],["basi",{"_index":1129,"title":{},"name":{},"text":{"11":{},"62":{}},"component":{}}],["basic",{"_index":24,"title":{"43":{}},"name":{},"text":{"2":{},"3":{},"5":{},"8":{},"11":{},"27":{},"31":{},"35":{},"38":{},"43":{},"44":{},"45":{},"46":{},"48":{},"52":{},"54":{},"56":{},"62":{}},"component":{}}],["basic_concept",{"_index":1766,"title":{},"name":{"43":{}},"text":{},"component":{}}],["basic_delay",{"_index":1476,"title":{},"name":{},"text":{"31":{}},"component":{}}],["basic_delay(dur",{"_index":1495,"title":{},"name":{},"text":{"31":{}},"component":{}}],["basic_fast_ave_envelope_follow",{"_index":1362,"title":{},"name":{},"text":{"26":{},"28":{}},"component":{}}],["basic_fast_ave_envelope_follower(dur",{"_index":1363,"title":{},"name":{},"text":{"26":{}},"component":{}}],["basic_fast_envelope_follow",{"_index":1408,"title":{},"name":{},"text":{"27":{}},"component":{}}],["basic_fast_envelope_follower(dur",{"_index":1410,"title":{},"name":{},"text":{"27":{}},"component":{}}],["basic_interv",{"_index":2418,"title":{},"name":{},"text":{"62":{}},"component":{}}],["basic_interval(concepts::arithmet",{"_index":2420,"title":{},"name":{},"text":{"62":{}},"component":{}}],["basic_moving_averag",{"_index":1540,"title":{},"name":{},"text":{"32":{}},"component":{}}],["basic_moving_sum",{"_index":1541,"title":{},"name":{},"text":{"32":{},"33":{}},"component":{}}],["basic_moving_sum(dur",{"_index":1555,"title":{},"name":{},"text":{"33":{}},"component":{}}],["basic_moving_sum(std::size_t",{"_index":1553,"title":{},"name":{},"text":{"33":{}},"component":{}}],["basic_moving_sum::basic_moving_sum",{"_index":1542,"title":{},"name":{},"text":{"32":{}},"component":{}}],["basic_pulse_osc",{"_index":2264,"title":{},"name":{},"text":{"53":{}},"component":{}}],["basic_pulse_osc(float",{"_index":2268,"title":{},"name":{},"text":{"53":{}},"component":{}}],["basic_pulse_osc(w",{"_index":2272,"title":{},"name":{},"text":{"53":{}},"component":{}}],["basic_saw",{"_index":2279,"title":{},"name":{},"text":{"54":{}},"component":{}}],["basic_saw_osc",{"_index":2278,"title":{},"name":{},"text":{"54":{}},"component":{}}],["basic_squar",{"_index":2325,"title":{},"name":{},"text":{"57":{}},"component":{}}],["basic_square_osc",{"_index":2324,"title":{},"name":{},"text":{"57":{}},"component":{}}],["basic_triangl",{"_index":2335,"title":{},"name":{},"text":{"58":{}},"component":{}}],["basic_triangle_osc",{"_index":2327,"title":{},"name":{},"text":{"58":{}},"component":{}}],["basicoscil",{"_index":1032,"title":{"10-8":{}},"name":{},"text":{"10":{},"53":{},"54":{},"56":{},"57":{},"58":{}},"component":{}}],["be",{"_index":1669,"title":{},"name":{},"text":{"38":{},"43":{},"59":{}},"component":{}}],["becom",{"_index":522,"title":{},"name":{},"text":{"3":{},"4":{},"55":{}},"component":{}}],["befor",{"_index":587,"title":{},"name":{},"text":{"4":{},"25":{},"27":{},"29":{},"31":{},"39":{},"48":{}},"component":{}}],["begin",{"_index":985,"title":{},"name":{},"text":{"8":{},"29":{},"38":{},"43":{},"64":{},"65":{}},"component":{}}],["behavior",{"_index":983,"title":{},"name":{},"text":{"8":{},"25":{},"29":{},"39":{},"64":{},"67":{},"68":{}},"component":{}}],["behind",{"_index":698,"title":{},"name":{},"text":{"4":{},"6":{}},"component":{}}],["bell",{"_index":2240,"title":{},"name":{},"text":{"51":{}},"component":{}}],["belong",{"_index":2244,"title":{},"name":{},"text":{"51":{}},"component":{}}],["below",{"_index":229,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"9":{},"11":{},"18":{},"21":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"34":{},"37":{},"46":{},"48":{},"65":{},"66":{}},"component":{}}],["bend",{"_index":1798,"title":{},"name":{},"text":{"44":{}},"component":{}}],["best",{"_index":159,"title":{},"name":{},"text":{"2":{},"11":{}},"component":{}}],["between",{"_index":927,"title":{},"name":{},"text":{"7":{},"9":{},"10":{},"31":{},"39":{},"45":{},"48":{},"59":{},"62":{},"64":{},"66":{}},"component":{}}],["beyond",{"_index":186,"title":{},"name":{},"text":{"2":{},"8":{},"10":{}},"component":{}}],["bf",{"_index":1175,"title":{},"name":{},"text":{"13":{},"14":{},"20":{}},"component":{}}],["bf.config(f",{"_index":1178,"title":{},"name":{},"text":{"13":{},"14":{}},"component":{}}],["bf.config(g",{"_index":1207,"title":{},"name":{},"text":{"20":{}},"component":{}}],["binari",{"_index":1155,"title":{},"name":{},"text":{"11":{}},"component":{}}],["biquad",{"_index":475,"title":{"6":{},"6-2":{}},"name":{"6":{}},"text":{"3":{},"6":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{}},"component":{}}],["biquad(biquad",{"_index":911,"title":{},"name":{},"text":{"6":{}},"component":{}}],["biquad(f",{"_index":914,"title":{},"name":{},"text":{"6":{}},"component":{}}],["bissel",{"_index":1386,"title":{},"name":{},"text":{"27":{}},"component":{}}],["bit",{"_index":202,"title":{},"name":{},"text":{"2":{},"38":{},"44":{},"64":{}},"component":{}}],["bk",{"_index":1455,"title":{},"name":{},"text":{"30":{}},"component":{}}],["bk(",{"_index":1458,"title":{},"name":{},"text":{"30":{}},"component":{}}],["bk.cutoff(f",{"_index":1460,"title":{},"name":{},"text":{"30":{}},"component":{}}],["blackman",{"_index":504,"title":{"47":{}},"name":{},"text":{"3":{},"47":{},"48":{}},"component":{}}],["blackman_downward_ramp_gen",{"_index":2107,"title":{},"name":{},"text":{"47":{},"48":{}},"component":{}}],["blackman_downward_ramp_gen(dur",{"_index":2108,"title":{},"name":{},"text":{"47":{}},"component":{}}],["blackman_gen",{"_index":2084,"title":{},"name":{"47":{}},"text":{"47":{},"48":{}},"component":{}}],["blackman_gen(dur",{"_index":2099,"title":{},"name":{},"text":{"47":{}},"component":{}}],["blackman_gen(w",{"_index":2101,"title":{},"name":{},"text":{"47":{}},"component":{}}],["blackman_upward_ramp_gen",{"_index":2105,"title":{},"name":{},"text":{"47":{},"48":{}},"component":{}}],["blackman_upward_ramp_gen(dur",{"_index":2106,"title":{},"name":{},"text":{"47":{}},"component":{}}],["blamp",{"_index":2330,"title":{},"name":{},"text":{"58":{}},"component":{}}],["block",{"_index":28,"title":{"30":{}},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"31":{},"35":{},"56":{}},"component":{}}],["blocker",{"_index":1447,"title":{},"name":{},"text":{"30":{}},"component":{}}],["blue",{"_index":1322,"title":{},"name":{},"text":{"25":{},"26":{},"27":{},"28":{},"29":{}},"component":{}}],["bonu",{"_index":1420,"title":{},"name":{},"text":{"28":{}},"component":{}}],["bool",{"_index":1148,"title":{},"name":{},"text":{"11":{},"33":{},"34":{},"36":{},"38":{},"39":{},"48":{},"65":{},"66":{}},"component":{}}],["bool(w",{"_index":1663,"title":{},"name":{},"text":{"38":{}},"component":{}}],["boolean",{"_index":1602,"title":{},"name":{},"text":{"34":{}},"component":{}}],["boost",{"_index":546,"title":{},"name":{},"text":{"3":{},"16":{},"18":{}},"component":{}}],["boost.fus",{"_index":545,"title":{},"name":{},"text":{"3":{}},"component":{}}],["boost.phoenix",{"_index":544,"title":{},"name":{},"text":{"3":{}},"component":{}}],["boost.spirit",{"_index":543,"title":{},"name":{},"text":{"3":{}},"component":{}}],["both",{"_index":326,"title":{},"name":{},"text":{"2":{},"3":{},"5":{},"7":{},"9":{},"11":{},"22":{},"24":{},"25":{},"27":{},"29":{},"31":{},"32":{},"39":{},"43":{},"44":{},"46":{},"51":{},"55":{}},"component":{}}],["box",{"_index":44,"title":{},"name":{},"text":{"2":{},"3":{}},"component":{}}],["brace",{"_index":916,"title":{},"name":{},"text":{"6":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"38":{},"47":{},"49":{},"50":{},"51":{},"53":{},"55":{},"59":{},"63":{},"64":{},"65":{},"66":{},"68":{}},"component":{}}],["break",{"_index":706,"title":{},"name":{},"text":{"4":{}},"component":{}}],["breath",{"_index":1853,"title":{},"name":{},"text":{"44":{}},"component":{}}],["breath_lsb",{"_index":1884,"title":{},"name":{},"text":{"44":{}},"component":{}}],["breviti",{"_index":388,"title":{},"name":{},"text":{"2":{}},"component":{}}],["brief",{"_index":22,"title":{},"name":{},"text":{"2":{}},"component":{}}],["bright",{"_index":1934,"title":{},"name":{},"text":{"44":{}},"component":{}}],["bring",{"_index":2379,"title":{},"name":{},"text":{"59":{},"60":{},"61":{}},"component":{}}],["bristow",{"_index":902,"title":{},"name":{},"text":{"6":{}},"component":{}}],["browser",{"_index":574,"title":{},"name":{},"text":{"4":{}},"component":{}}],["buffer",{"_index":513,"title":{"46":{},"67":{},"68":{}},"name":{},"text":{"3":{},"4":{},"9":{},"31":{},"32":{},"33":{},"38":{},"39":{},"42":{},"46":{},"67":{},"68":{}},"component":{}}],["buffer_view",{"_index":2070,"title":{},"name":{},"text":{"46":{}},"component":{}}],["buffer’",{"_index":2559,"title":{},"name":{},"text":{"68":{}},"component":{}}],["build",{"_index":27,"title":{"5-9":{}},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"10":{},"31":{},"35":{},"56":{}},"component":{}}],["bw",{"_index":1171,"title":{},"name":{},"text":{"13":{},"14":{},"19":{},"20":{}},"component":{}}],["bw{b",{"_index":1177,"title":{},"name":{},"text":{"13":{},"14":{},"19":{},"20":{}},"component":{}}],["byte",{"_index":1817,"title":{},"name":{},"text":{"44":{}},"component":{}}],["c",{"_index":86,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"38":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"53":{},"55":{},"56":{},"59":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{}},"component":{}}],["c++20",{"_index":822,"title":{"5-2":{}},"name":{},"text":{"5":{}},"component":{}}],["c.begin",{"_index":1777,"title":{},"name":{},"text":{"43":{}},"component":{}}],["c.end",{"_index":1778,"title":{},"name":{},"text":{"43":{}},"component":{}}],["c.size",{"_index":1772,"title":{},"name":{},"text":{"43":{}},"component":{}}],["c4",{"_index":2017,"title":{},"name":{},"text":{"44":{}},"component":{}}],["c[i",{"_index":1773,"title":{},"name":{},"text":{"43":{}},"component":{}}],["calcul",{"_index":1548,"title":{},"name":{},"text":{"32":{},"33":{},"55":{},"56":{}},"component":{}}],["call",{"_index":341,"title":{"6-8":{},"10-7":{},"10-12":{},"10-17":{},"10-23":{},"21-7":{},"22-7":{},"23-7":{},"24-7":{},"25-8":{},"26-8":{},"27-10":{},"28-8":{},"29-9":{},"31-10":{},"32-7":{},"33-9":{},"34-7":{},"45-7":{},"48-17":{},"55-7":{}},"name":{},"text":{"2":{},"4":{},"6":{},"21":{},"22":{},"23":{},"24":{},"28":{},"39":{},"42":{},"45":{},"48":{},"53":{},"54":{},"57":{},"58":{}},"component":{}}],["capabl",{"_index":1015,"title":{},"name":{},"text":{"9":{},"37":{}},"component":{}}],["capacitor",{"_index":1312,"title":{},"name":{},"text":{"25":{},"29":{},"49":{}},"component":{}}],["captur",{"_index":1326,"title":{},"name":{},"text":{"25":{},"27":{},"29":{}},"component":{}}],["care",{"_index":655,"title":{},"name":{},"text":{"4":{}},"component":{}}],["cascad",{"_index":924,"title":{"7-4":{}},"name":{},"text":{"7":{}},"component":{}}],["case",{"_index":789,"title":{},"name":{},"text":{"4":{},"7":{},"10":{},"31":{},"35":{},"48":{}},"component":{}}],["catastroph",{"_index":1119,"title":{},"name":{},"text":{"11":{}},"component":{}}],["caus",{"_index":1084,"title":{},"name":{},"text":{"10":{},"25":{},"26":{},"29":{}},"component":{}}],["cc",{"_index":1849,"title":{},"name":{},"text":{"44":{}},"component":{}}],["cc::control",{"_index":2000,"title":{},"name":{},"text":{"44":{}},"component":{}}],["cd",{"_index":851,"title":{},"name":{},"text":{"5":{}},"component":{}}],["ceil",{"_index":2437,"title":{},"name":{},"text":{"62":{}},"component":{}}],["ceil(basic_interv",{"_index":2425,"title":{},"name":{},"text":{"62":{}},"component":{}}],["ceil(i",{"_index":2433,"title":{},"name":{},"text":{"62":{}},"component":{}}],["ceil(p",{"_index":2523,"title":{},"name":{},"text":{"66":{}},"component":{}}],["ceil(pitch",{"_index":2513,"title":{},"name":{},"text":{"66":{}},"component":{}}],["celest",{"_index":1968,"title":{},"name":{},"text":{"44":{}},"component":{}}],["center",{"_index":2276,"title":{},"name":{},"text":{"54":{}},"component":{}}],["certain",{"_index":1069,"title":{},"name":{},"text":{"10":{},"11":{},"22":{},"23":{},"38":{}},"component":{}}],["ch",{"_index":1696,"title":{},"name":{},"text":{"38":{},"46":{}},"component":{}}],["chamberlin’",{"_index":2284,"title":{},"name":{},"text":{"55":{}},"component":{}}],["chanc",{"_index":817,"title":{},"name":{},"text":{"4":{}},"component":{}}],["chang",{"_index":796,"title":{},"name":{},"text":{"4":{},"5":{},"7":{},"8":{},"22":{},"29":{},"32":{},"33":{},"44":{},"45":{},"48":{},"59":{},"65":{}},"component":{}}],["channel",{"_index":565,"title":{},"name":{},"text":{"4":{},"9":{},"37":{},"38":{},"39":{},"44":{},"46":{}},"component":{}}],["channel_aftertouch",{"_index":1786,"title":{"44-13":{}},"name":{},"text":{"44":{}},"component":{}}],["channel_aftertouch(std::uint8_t",{"_index":2004,"title":{},"name":{},"text":{"44":{}},"component":{}}],["channel_volum",{"_index":1861,"title":{},"name":{},"text":{"44":{}},"component":{}}],["channel_volume_lsb",{"_index":1892,"title":{},"name":{},"text":{"44":{}},"component":{}}],["channels_view",{"_index":2073,"title":{},"name":{},"text":{"46":{}},"component":{}}],["char",{"_index":1683,"title":{},"name":{},"text":{"38":{},"39":{},"44":{}},"component":{}}],["characterist",{"_index":998,"title":{},"name":{},"text":{"8":{},"48":{}},"component":{}}],["charg",{"_index":1313,"title":{},"name":{},"text":{"25":{},"29":{},"49":{}},"component":{}}],["cheapli",{"_index":1635,"title":{},"name":{},"text":{"37":{}},"component":{}}],["check",{"_index":1721,"title":{},"name":{},"text":{"39":{}},"component":{}}],["choos",{"_index":643,"title":{},"name":{},"text":{"4":{},"37":{}},"component":{}}],["chord",{"_index":2417,"title":{},"name":{},"text":{"62":{}},"component":{}}],["choru",{"_index":1965,"title":{},"name":{},"text":{"44":{}},"component":{}}],["chorus",{"_index":1474,"title":{},"name":{},"text":{"31":{}},"component":{}}],["chosen",{"_index":808,"title":{},"name":{},"text":{"4":{},"11":{},"27":{}},"component":{}}],["chromat",{"_index":2498,"title":{},"name":{},"text":{"66":{}},"component":{}}],["chunk",{"_index":1668,"title":{},"name":{},"text":{"38":{}},"component":{}}],["circl",{"_index":2443,"title":{},"name":{},"text":{"64":{}},"component":{}}],["circuit",{"_index":434,"title":{},"name":{},"text":{"3":{}},"component":{}}],["circular",{"_index":2446,"title":{},"name":{},"text":{"64":{},"68":{}},"component":{}}],["clang",{"_index":838,"title":{},"name":{},"text":{"5":{}},"component":{}}],["clariti",{"_index":712,"title":{},"name":{},"text":{"4":{}},"component":{}}],["class",{"_index":135,"title":{"6-9":{}},"name":{},"text":{"2":{},"4":{},"6":{},"7":{},"9":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"28":{},"31":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"42":{},"44":{},"45":{},"46":{},"48":{},"54":{},"56":{},"57":{},"58":{},"59":{},"62":{},"63":{},"65":{},"67":{},"68":{}},"component":{}}],["clear",{"_index":1559,"title":{},"name":{},"text":{"33":{},"68":{}},"component":{}}],["client",{"_index":1029,"title":{"42-4":{}},"name":{},"text":{"9":{},"39":{},"42":{}},"component":{}}],["client’",{"_index":1758,"title":{},"name":{},"text":{"42":{}},"component":{}}],["clion",{"_index":842,"title":{},"name":{},"text":{"5":{}},"component":{}}],["clip",{"_index":370,"title":{},"name":{},"text":{"2":{},"4":{},"5":{}},"component":{}}],["clip(filter(v",{"_index":686,"title":{},"name":{},"text":{"4":{}},"component":{}}],["clock",{"_index":2030,"title":{},"name":{},"text":{"45":{}},"component":{}}],["clone",{"_index":843,"title":{},"name":{},"text":{"5":{}},"component":{}}],["close",{"_index":1405,"title":{},"name":{},"text":{"27":{},"29":{},"34":{}},"component":{}}],["closer",{"_index":1401,"title":{},"name":{},"text":{"27":{}},"component":{}}],["cmake",{"_index":824,"title":{"5-4":{},"5-5":{}},"name":{},"text":{"5":{}},"component":{}}],["co",{"_index":2306,"title":{},"name":{},"text":{"55":{}},"component":{}}],["code",{"_index":142,"title":{"4-2":{}},"name":{},"text":{"2":{},"4":{},"7":{},"48":{},"59":{}},"component":{}}],["codeblock",{"_index":862,"title":{},"name":{},"text":{"5":{}},"component":{}}],["coeffici",{"_index":2291,"title":{},"name":{},"text":{"55":{}},"component":{}}],["coincid",{"_index":991,"title":{},"name":{},"text":{"8":{}},"component":{}}],["collabor",{"_index":551,"title":{},"name":{},"text":{"3":{}},"component":{}}],["combin",{"_index":1054,"title":{},"name":{},"text":{"10":{},"27":{},"56":{}},"component":{}}],["come",{"_index":1376,"title":{},"name":{},"text":{"26":{},"27":{},"48":{}},"component":{}}],["command",{"_index":874,"title":{},"name":{},"text":{"5":{},"45":{}},"component":{}}],["common",{"_index":0,"title":{},"name":{"1":{}},"text":{"7":{},"10":{},"31":{},"32":{},"38":{},"47":{},"50":{},"51":{}},"component":{}}],["commun",{"_index":1026,"title":{},"name":{},"text":{"9":{}},"component":{}}],["comp",{"_index":172,"title":{},"name":{},"text":{"2":{},"22":{},"24":{}},"component":{}}],["comp(env",{"_index":171,"title":{},"name":{},"text":{"2":{},"22":{},"24":{}},"component":{}}],["comp.ratio",{"_index":1264,"title":{},"name":{},"text":{"22":{},"24":{}},"component":{}}],["comp.ratio(r",{"_index":1262,"title":{},"name":{},"text":{"22":{},"24":{}},"component":{}}],["comp.threshold",{"_index":1263,"title":{},"name":{},"text":{"22":{},"24":{}},"component":{}}],["comp.threshold(t",{"_index":1261,"title":{},"name":{},"text":{"22":{},"24":{}},"component":{}}],["comp.width",{"_index":1295,"title":{},"name":{},"text":{"24":{}},"component":{}}],["comp.width(w",{"_index":1294,"title":{},"name":{},"text":{"24":{}},"component":{}}],["compar",{"_index":954,"title":{},"name":{},"text":{"7":{},"21":{},"27":{}},"component":{}}],["comparison",{"_index":1110,"title":{"11-10":{}},"name":{},"text":{},"component":{}}],["compat",{"_index":1142,"title":{},"name":{},"text":{"11":{}},"component":{}}],["compens",{"_index":1259,"title":{},"name":{},"text":{"22":{},"24":{}},"component":{}}],["compil",{"_index":750,"title":{},"name":{},"text":{"4":{},"5":{}},"component":{}}],["complet",{"_index":406,"title":{},"name":{},"text":{"2":{},"4":{},"48":{},"55":{},"63":{},"64":{}},"component":{}}],["complex",{"_index":330,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"26":{},"27":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"56":{}},"component":{}}],["compon",{"_index":360,"title":{"9-2":{}},"name":{},"text":{"2":{},"7":{},"9":{},"53":{},"54":{},"57":{}},"component":{}}],["compos",{"_index":328,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"48":{}},"component":{}}],["composit",{"_index":349,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"26":{},"28":{}},"component":{}}],["comprehens",{"_index":113,"title":{},"name":{},"text":{"2":{},"11":{}},"component":{}}],["compress",{"_index":179,"title":{},"name":{},"text":{"2":{},"7":{},"22":{},"23":{},"24":{}},"component":{}}],["compressor",{"_index":165,"title":{"22":{},"24":{}},"name":{"22":{}},"text":{"2":{},"3":{},"7":{},"11":{},"22":{},"23":{},"24":{},"27":{},"28":{},"59":{}},"component":{}}],["compressor(comp",{"_index":1243,"title":{},"name":{},"text":{"22":{}},"component":{}}],["compressor(decibel",{"_index":1239,"title":{},"name":{},"text":{"22":{}},"component":{}}],["compressor(t",{"_index":1242,"title":{},"name":{},"text":{"22":{}},"component":{}}],["compressor::operator()(decibel",{"_index":937,"title":{},"name":{},"text":{"7":{}},"component":{}}],["compris",{"_index":32,"title":{},"name":{},"text":{"2":{},"9":{},"10":{},"48":{}},"component":{}}],["comput",{"_index":178,"title":{},"name":{},"text":{"2":{},"7":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"32":{},"34":{},"59":{},"64":{},"66":{}},"component":{}}],["computation",{"_index":994,"title":{},"name":{},"text":{"8":{},"35":{}},"component":{}}],["conceiv",{"_index":2111,"title":{},"name":{},"text":{"48":{}},"component":{}}],["concept",{"_index":511,"title":{"43":{},"11-5":{},"11-7":{}},"name":{},"text":{"3":{},"10":{},"11":{},"38":{},"43":{},"45":{},"46":{},"48":{},"55":{},"59":{}},"component":{}}],["concepts::processor",{"_index":2038,"title":{},"name":{},"text":{"45":{}},"component":{}}],["conceptu",{"_index":2048,"title":{},"name":{},"text":{"46":{}},"component":{}}],["concern",{"_index":952,"title":{},"name":{},"text":{"7":{},"34":{},"59":{}},"component":{}}],["concret",{"_index":1757,"title":{},"name":{},"text":{"42":{}},"component":{}}],["condit",{"_index":364,"title":{},"name":{},"text":{"2":{},"64":{}},"component":{}}],["config",{"_index":2170,"title":{},"name":{},"text":{"48":{},"49":{}},"component":{}}],["config(doubl",{"_index":1189,"title":{},"name":{},"text":{"16":{},"18":{},"20":{}},"component":{}}],["config(dur",{"_index":1336,"title":{},"name":{},"text":{"25":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{}},"component":{}}],["config(float",{"_index":2144,"title":{},"name":{},"text":{"48":{}},"component":{}}],["config(frequ",{"_index":1166,"title":{},"name":{},"text":{"12":{},"13":{},"14":{},"15":{},"17":{},"19":{},"55":{}},"component":{}}],["config_",{"_index":2187,"title":{},"name":{},"text":{"48":{}},"component":{}}],["config_.attack_r",{"_index":2188,"title":{},"name":{},"text":{"48":{}},"component":{}}],["config_.decay_r",{"_index":2189,"title":{},"name":{},"text":{"48":{}},"component":{}}],["config_.release_r",{"_index":2192,"title":{},"name":{},"text":{"48":{}},"component":{}}],["config_.sustain_r",{"_index":2191,"title":{},"name":{},"text":{"48":{}},"component":{}}],["configur",{"_index":792,"title":{},"name":{},"text":{"4":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"42":{},"48":{}},"component":{}}],["conflict",{"_index":2377,"title":{},"name":{},"text":{"59":{},"60":{},"61":{}},"component":{}}],["conform",{"_index":1065,"title":{},"name":{},"text":{"10":{},"11":{},"38":{},"43":{},"45":{},"55":{}},"component":{}}],["confus",{"_index":2356,"title":{},"name":{},"text":{"59":{}},"component":{}}],["connect",{"_index":41,"title":{},"name":{},"text":{"2":{},"4":{},"9":{},"25":{},"29":{}},"component":{}}],["consequ",{"_index":1114,"title":{},"name":{},"text":{"11":{}},"component":{}}],["consid",{"_index":2222,"title":{},"name":{},"text":{"49":{}},"component":{}}],["consist",{"_index":1128,"title":{},"name":{},"text":{"11":{},"56":{}},"component":{}}],["consol",{"_index":651,"title":{},"name":{},"text":{"4":{}},"component":{}}],["const",{"_index":355,"title":{},"name":{},"text":{"2":{},"4":{},"6":{},"7":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"39":{},"42":{},"44":{},"45":{},"46":{},"48":{},"53":{},"54":{},"56":{},"57":{},"58":{},"61":{},"65":{},"66":{},"67":{},"68":{}},"component":{}}],["constant",{"_index":259,"title":{"13":{},"14":{}},"name":{},"text":{"2":{},"3":{},"4":{},"13":{},"14":{},"21":{},"29":{},"59":{},"60":{},"61":{},"64":{}},"component":{}}],["constexpr",{"_index":287,"title":{},"name":{},"text":{"2":{},"4":{},"44":{},"53":{},"54":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{}},"component":{}}],["constrain",{"_index":1301,"title":{},"name":{},"text":{"25":{}},"component":{}}],["construct",{"_index":915,"title":{"31-6":{},"32-6":{},"33-6":{},"67-6":{},"68-6":{}},"name":{},"text":{"6":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"53":{},"55":{},"59":{},"63":{},"64":{},"65":{},"66":{},"68":{}},"component":{}}],["constructor",{"_index":788,"title":{"6-7":{},"10-6":{},"10-22":{},"10-28":{},"11-8":{},"12-6":{},"13-6":{},"14-6":{},"15-6":{},"16-6":{},"17-6":{},"18-6":{},"19-6":{},"20-6":{},"21-6":{},"22-6":{},"23-6":{},"24-6":{},"25-7":{},"26-7":{},"27-9":{},"28-7":{},"29-8":{},"30-6":{},"30-7":{},"31-9":{},"33-8":{},"34-6":{},"35-6":{},"35-7":{},"36-6":{},"37-6":{},"38-7":{},"38-13":{},"38-20":{},"39-6":{},"46-8":{},"47-6":{},"48-8":{},"48-24":{},"49-6":{},"50-6":{},"51-6":{},"53-6":{},"55-6":{},"59-6":{},"63-6":{},"64-6":{},"65-6":{},"66-6":{},"68-9":{}},"name":{},"text":{"4":{},"6":{},"21":{},"36":{},"37":{},"46":{},"48":{},"49":{},"59":{},"68":{}},"component":{}}],["consum",{"_index":1730,"title":{},"name":{},"text":{"39":{}},"component":{}}],["contain",{"_index":104,"title":{},"name":{},"text":{"2":{},"4":{},"26":{},"28":{},"43":{},"46":{},"48":{}},"component":{}}],["content",{"_index":423,"title":{"3-2":{}},"name":{},"text":{"3":{},"33":{},"44":{},"45":{}},"component":{}}],["context",{"_index":1040,"title":{},"name":{},"text":{"10":{}},"component":{}}],["contigu",{"_index":2046,"title":{},"name":{},"text":{"46":{}},"component":{}}],["continu",{"_index":459,"title":{},"name":{},"text":{"3":{},"33":{},"60":{},"64":{},"65":{}},"component":{}}],["continue_",{"_index":1792,"title":{"44-20":{}},"name":{},"text":{"44":{}},"component":{}}],["contrast",{"_index":175,"title":{},"name":{},"text":{"2":{},"21":{},"23":{},"59":{}},"component":{}}],["control",{"_index":609,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"21":{},"31":{},"44":{},"45":{},"55":{}},"component":{}}],["control_chang",{"_index":1784,"title":{"44-11":{}},"name":{},"text":{"44":{}},"component":{}}],["convers",{"_index":221,"title":{"59-7":{},"60-6":{},"61-6":{},"62-7":{},"63-7":{},"64-7":{},"66-7":{}},"name":{},"text":{"2":{},"28":{},"44":{},"59":{},"66":{}},"component":{}}],["convert",{"_index":223,"title":{},"name":{},"text":{"2":{},"21":{},"22":{},"23":{},"24":{},"38":{},"43":{},"44":{},"45":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"66":{}},"component":{}}],["cookbook",{"_index":905,"title":{},"name":{},"text":{"6":{}},"component":{}}],["copi",{"_index":888,"title":{"6-7":{}},"name":{},"text":{"6":{},"10":{},"11":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"37":{},"46":{},"48":{},"65":{},"68":{}},"component":{}}],["copyabl",{"_index":1662,"title":{},"name":{},"text":{"38":{},"39":{}},"component":{}}],["copyright",{"_index":409,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"8":{}},"component":{}}],["core",{"_index":49,"title":{},"name":{},"text":{"2":{}},"component":{}}],["corner",{"_index":2329,"title":{},"name":{},"text":{"58":{}},"component":{}}],["correct",{"_index":735,"title":{},"name":{},"text":{"4":{},"53":{},"54":{},"57":{},"58":{},"59":{}},"component":{}}],["correspond",{"_index":391,"title":{},"name":{},"text":{"2":{},"7":{},"46":{},"59":{},"64":{},"66":{}},"component":{}}],["cos(2pi*n/(n",{"_index":2095,"title":{},"name":{},"text":{"47":{},"50":{}},"component":{}}],["cos(2pin/(n",{"_index":2248,"title":{},"name":{},"text":{"51":{}},"component":{}}],["cos(4pi*n/(n",{"_index":2097,"title":{},"name":{},"text":{"47":{}},"component":{}}],["cosin",{"_index":503,"title":{"55":{}},"name":{},"text":{"3":{},"51":{},"55":{}},"component":{}}],["cost",{"_index":1377,"title":{},"name":{},"text":{"26":{},"27":{}},"component":{}}],["count",{"_index":2488,"title":{},"name":{},"text":{"65":{}},"component":{}}],["counter",{"_index":2457,"title":{},"name":{},"text":{"64":{}},"component":{}}],["counterpart",{"_index":955,"title":{},"name":{},"text":{"7":{}},"component":{}}],["coupl",{"_index":60,"title":{},"name":{},"text":{"2":{}},"component":{}}],["cours",{"_index":1396,"title":{},"name":{},"text":{"27":{},"48":{}},"component":{}}],["cover",{"_index":722,"title":{},"name":{},"text":{"4":{},"8":{}},"component":{}}],["cpp",{"_index":612,"title":{},"name":{},"text":{"4":{},"59":{},"60":{},"61":{}},"component":{}}],["cpu",{"_index":1729,"title":{},"name":{},"text":{"39":{}},"component":{}}],["cpu_load",{"_index":1709,"title":{},"name":{},"text":{"39":{}},"component":{}}],["creat",{"_index":804,"title":{},"name":{},"text":{"4":{},"7":{},"10":{},"31":{},"48":{},"56":{},"59":{},"60":{},"61":{}},"component":{}}],["creation",{"_index":1036,"title":{},"name":{},"text":{"10":{}},"component":{}}],["creativ",{"_index":934,"title":{},"name":{},"text":{"7":{}},"component":{}}],["critic",{"_index":1612,"title":{},"name":{},"text":{"35":{}},"component":{}}],["cross",{"_index":38,"title":{},"name":{},"text":{"2":{},"3":{},"9":{}},"component":{}}],["crucial",{"_index":1117,"title":{},"name":{},"text":{"11":{}},"component":{}}],["ctrl",{"_index":814,"title":{},"name":{},"text":{"4":{},"44":{}},"component":{}}],["current",{"_index":570,"title":{},"name":{},"text":{"4":{},"5":{},"27":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"44":{},"45":{},"47":{},"48":{},"50":{},"51":{},"55":{},"64":{},"65":{}},"component":{}}],["curv",{"_index":1315,"title":{},"name":{},"text":{"25":{},"29":{},"47":{},"49":{},"51":{}},"component":{}}],["curvatur",{"_index":2216,"title":{},"name":{},"text":{"49":{}},"component":{}}],["cut",{"_index":2138,"title":{},"name":{},"text":{"48":{}},"component":{}}],["cutoff",{"_index":598,"title":{},"name":{},"text":{"4":{},"8":{},"23":{},"30":{},"35":{}},"component":{}}],["cutoff(frequ",{"_index":1454,"title":{},"name":{},"text":{"30":{},"35":{}},"component":{}}],["cv",{"_index":2217,"title":{},"name":{},"text":{"49":{}},"component":{}}],["cval",{"_index":2308,"title":{},"name":{},"text":{"55":{}},"component":{}}],["cw",{"_index":2226,"title":{},"name":{},"text":{"49":{}},"component":{}}],["cyc",{"_index":2450,"title":{},"name":{},"text":{"64":{}},"component":{}}],["cycfi",{"_index":535,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["cycfi::q",{"_index":138,"title":{},"name":{},"text":{"2":{},"37":{}},"component":{}}],["cycfi::q::concept",{"_index":1056,"title":{},"name":{},"text":{"10":{},"11":{},"43":{}},"component":{}}],["cycfi::q::liter",{"_index":2380,"title":{},"name":{},"text":{"59":{},"60":{},"61":{}},"component":{}}],["cycfi::q::midi_1_0",{"_index":1801,"title":{},"name":{},"text":{"44":{},"45":{}},"component":{}}],["cycfi::q::midi_1_0::concept",{"_index":2026,"title":{},"name":{},"text":{"45":{}},"component":{}}],["cycl",{"_index":188,"title":{},"name":{},"text":{"2":{},"27":{},"29":{},"39":{},"61":{},"63":{},"64":{},"65":{}},"component":{}}],["cycle’",{"_index":1436,"title":{},"name":{},"text":{"29":{}},"component":{}}],["d",{"_index":1168,"title":{},"name":{},"text":{"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"31":{},"33":{},"38":{},"59":{},"60":{},"61":{},"63":{},"64":{},"67":{},"68":{}},"component":{}}],["d(i",{"_index":1510,"title":{},"name":{},"text":{"31":{}},"component":{}}],["d(val",{"_index":1511,"title":{},"name":{},"text":{"31":{}},"component":{}}],["d_type",{"_index":1500,"title":{},"name":{},"text":{"31":{}},"component":{}}],["d_type(d",{"_index":1509,"title":{},"name":{},"text":{"31":{}},"component":{}}],["d_type(max_delay",{"_index":1508,"title":{},"name":{},"text":{"31":{}},"component":{}}],["d_type::index_typ",{"_index":1502,"title":{},"name":{},"text":{"31":{}},"component":{}}],["d_type::interpolation_typ",{"_index":1506,"title":{},"name":{},"text":{"31":{}},"component":{}}],["d_type::storage_typ",{"_index":1505,"title":{},"name":{},"text":{"31":{}},"component":{}}],["d_type::value_typ",{"_index":1501,"title":{},"name":{},"text":{"31":{}},"component":{}}],["dac",{"_index":74,"title":{},"name":{},"text":{"2":{}},"component":{}}],["dark",{"_index":1324,"title":{},"name":{},"text":{"25":{},"26":{},"27":{},"28":{},"29":{}},"component":{}}],["data",{"_index":7,"title":{"2-5":{},"9-2":{}},"name":{},"text":{"2":{},"9":{},"11":{},"32":{},"33":{},"38":{},"43":{},"44":{},"45":{},"56":{},"64":{},"67":{},"68":{}},"component":{}}],["data[1",{"_index":1848,"title":{},"name":{},"text":{"44":{}},"component":{}}],["data[s",{"_index":1806,"title":{},"name":{},"text":{"44":{}},"component":{}}],["data_dec",{"_index":1975,"title":{},"name":{},"text":{"44":{}},"component":{}}],["data_entri",{"_index":1859,"title":{},"name":{},"text":{"44":{}},"component":{}}],["data_entry_lsb",{"_index":1890,"title":{},"name":{},"text":{"44":{}},"component":{}}],["data_inc",{"_index":1973,"title":{},"name":{},"text":{"44":{}},"component":{}}],["daw",{"_index":81,"title":{},"name":{},"text":{"2":{},"9":{}},"component":{}}],["db",{"_index":209,"title":{},"name":{},"text":{"2":{},"11":{},"13":{},"22":{},"23":{},"24":{},"28":{},"36":{},"59":{}},"component":{}}],["db_gain",{"_index":1188,"title":{},"name":{},"text":{"16":{},"18":{},"20":{}},"component":{}}],["dc",{"_index":496,"title":{"30":{}},"name":{},"text":{"3":{},"30":{}},"component":{}}],["dc_block",{"_index":1446,"title":{},"name":{"30":{}},"text":{"30":{}},"component":{}}],["dc_block(b",{"_index":1457,"title":{},"name":{},"text":{"30":{}},"component":{}}],["dc_block(f",{"_index":1456,"title":{},"name":{},"text":{"30":{}},"component":{}}],["dc_block(frequ",{"_index":1453,"title":{},"name":{},"text":{"30":{}},"component":{}}],["de",{"_index":413,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"8":{}},"component":{}}],["deal",{"_index":759,"title":{},"name":{},"text":{"4":{},"8":{}},"component":{}}],["decay",{"_index":801,"title":{},"name":{},"text":{"4":{},"10":{},"25":{},"27":{},"29":{},"48":{}},"component":{}}],["decay_r",{"_index":2173,"title":{},"name":{},"text":{"48":{}},"component":{}}],["decay_rate(dur",{"_index":2182,"title":{},"name":{},"text":{"48":{}},"component":{}}],["decibel",{"_index":13,"title":{"59":{},"2-10":{}},"name":{"59":{}},"text":{"2":{},"3":{},"7":{},"11":{},"16":{},"18":{},"20":{},"21":{},"22":{},"23":{},"24":{},"28":{},"34":{},"36":{},"48":{},"59":{}},"component":{}}],["decibel(env",{"_index":382,"title":{},"name":{},"text":{"2":{}},"component":{}}],["decibel_unit",{"_index":2348,"title":{},"name":{},"text":{"59":{}},"component":{}}],["decibel{6.0",{"_index":2355,"title":{},"name":{},"text":{"59":{}},"component":{}}],["declar",{"_index":334,"title":{"6-4":{},"10-3":{},"10-9":{},"10-14":{},"10-19":{},"10-25":{},"12-3":{},"13-3":{},"14-3":{},"15-3":{},"16-3":{},"17-3":{},"18-3":{},"19-3":{},"20-3":{},"21-3":{},"22-3":{},"23-3":{},"24-3":{},"25-4":{},"26-4":{},"27-6":{},"28-4":{},"29-5":{},"30-3":{},"31-3":{},"32-3":{},"33-3":{},"34-3":{},"35-3":{},"36-3":{},"37-3":{},"38-4":{},"38-10":{},"38-17":{},"39-3":{},"42-3":{},"43-4":{},"43-6":{},"43-8":{},"45-4":{},"46-4":{},"47-3":{},"47-9":{},"48-5":{},"48-14":{},"48-22":{},"49-3":{},"50-3":{},"51-3":{},"51-9":{},"52-3":{},"53-3":{},"54-3":{},"55-3":{},"56-3":{},"57-3":{},"58-3":{},"59-3":{},"60-3":{},"61-3":{},"62-3":{},"63-3":{},"64-3":{},"65-3":{},"66-3":{},"67-3":{},"68-3":{}},"name":{},"text":{"2":{},"11":{},"31":{},"32":{},"33":{},"38":{},"39":{}},"component":{}}],["decltype(a.ref",{"_index":1159,"title":{},"name":{},"text":{"11":{}},"component":{}}],["decltype(g(pi",{"_index":1095,"title":{},"name":{},"text":{"10":{}},"component":{}}],["decltype(o(ph",{"_index":1075,"title":{},"name":{},"text":{"10":{}},"component":{}}],["decltype(o(pi",{"_index":1067,"title":{},"name":{},"text":{"10":{}},"component":{}}],["decoupl",{"_index":1477,"title":{},"name":{},"text":{"31":{}},"component":{}}],["decreas",{"_index":1212,"title":{},"name":{},"text":{"21":{},"23":{},"59":{}},"component":{}}],["decrement",{"_index":1977,"title":{},"name":{},"text":{"44":{},"65":{}},"component":{}}],["dedic",{"_index":2044,"title":{},"name":{},"text":{"46":{}},"component":{}}],["default",{"_index":882,"title":{},"name":{},"text":{"5":{},"6":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"33":{},"37":{},"38":{},"39":{},"42":{},"44":{},"45":{},"48":{},"49":{},"64":{},"65":{},"66":{},"68":{}},"component":{}}],["default_sample_r",{"_index":1632,"title":{},"name":{},"text":{"37":{}},"component":{}}],["defautl",{"_index":2198,"title":{},"name":{},"text":{"48":{}},"component":{}}],["defin",{"_index":31,"title":{},"name":{},"text":{"2":{},"4":{},"11":{},"39":{},"45":{},"48":{}},"component":{}}],["definit",{"_index":312,"title":{"11-6":{},"46-7":{}},"name":{},"text":{"2":{},"4":{}},"component":{}}],["delay",{"_index":491,"title":{"31":{}},"name":{"31":{}},"text":{"3":{},"4":{},"31":{},"32":{},"39":{},"48":{}},"component":{}}],["delet",{"_index":1658,"title":{"66-9":{}},"name":{},"text":{"38":{},"59":{},"66":{}},"component":{}}],["delta",{"_index":1088,"title":{},"name":{},"text":{"10":{},"36":{}},"component":{}}],["demand",{"_index":995,"title":{},"name":{},"text":{"8":{}},"component":{}}],["demo",{"_index":650,"title":{},"name":{},"text":{"4":{}},"component":{}}],["demonstr",{"_index":107,"title":{},"name":{},"text":{"2":{},"27":{}},"component":{}}],["depend",{"_index":3,"title":{"2-2":{}},"name":{},"text":{"2":{},"5":{},"23":{},"25":{},"27":{},"29":{},"42":{},"64":{}},"component":{}}],["depict",{"_index":1010,"title":{},"name":{},"text":{"9":{},"25":{},"29":{},"48":{}},"component":{}}],["depth",{"_index":1962,"title":{},"name":{},"text":{"44":{}},"component":{}}],["deriv",{"_index":890,"title":{"6-9":{}},"name":{},"text":{"7":{},"21":{},"38":{},"39":{},"42":{},"45":{},"55":{},"58":{}},"component":{}}],["describ",{"_index":431,"title":{},"name":{},"text":{"3":{},"47":{}},"component":{}}],["design",{"_index":435,"title":{},"name":{},"text":{"3":{},"7":{},"10":{},"34":{},"46":{}},"component":{}}],["desir",{"_index":588,"title":{},"name":{},"text":{"4":{},"5":{},"22":{},"23":{},"24":{},"39":{},"64":{}},"component":{}}],["destruct",{"_index":2558,"title":{},"name":{},"text":{"68":{}},"component":{}}],["detail",{"_index":717,"title":{},"name":{},"text":{"4":{},"6":{},"21":{},"22":{},"23":{},"24":{},"25":{},"27":{}},"component":{}}],["detect",{"_index":130,"title":{},"name":{},"text":{"2":{},"5":{},"8":{},"25":{},"26":{},"27":{},"28":{},"29":{}},"component":{}}],["detector",{"_index":1330,"title":{},"name":{},"text":{"25":{},"27":{},"28":{}},"component":{}}],["determin",{"_index":53,"title":{},"name":{},"text":{"2":{},"8":{},"49":{},"65":{},"66":{}},"component":{}}],["detun",{"_index":1969,"title":{},"name":{},"text":{"44":{}},"component":{}}],["dev",{"_index":866,"title":{},"name":{},"text":{"5":{}},"component":{}}],["develop",{"_index":458,"title":{},"name":{},"text":{"3":{}},"component":{}}],["devic",{"_index":517,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"9":{},"37":{},"39":{},"45":{}},"component":{}}],["device.id",{"_index":1648,"title":{},"name":{},"text":{"37":{}},"component":{}}],["device.input_channel",{"_index":1652,"title":{},"name":{},"text":{"37":{}},"component":{}}],["device.nam",{"_index":1651,"title":{},"name":{},"text":{"37":{}},"component":{}}],["device.output_channel",{"_index":1653,"title":{},"name":{},"text":{"37":{}},"component":{}}],["device_id",{"_index":671,"title":{},"name":{},"text":{"4":{},"37":{}},"component":{}}],["device_list",{"_index":1625,"title":{},"name":{},"text":{"37":{}},"component":{}}],["device’",{"_index":1715,"title":{},"name":{},"text":{"39":{}},"component":{}}],["diagram",{"_index":959,"title":{},"name":{},"text":{"7":{},"9":{},"48":{}},"component":{}}],["differ",{"_index":216,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"8":{},"11":{},"21":{},"22":{},"23":{},"24":{},"36":{},"59":{}},"component":{}}],["differnt",{"_index":1140,"title":{},"name":{},"text":{"11":{}},"component":{}}],["digit",{"_index":82,"title":{},"name":{},"text":{"2":{},"3":{},"9":{},"30":{},"46":{},"47":{},"55":{}},"component":{}}],["dimens",{"_index":2050,"title":{},"name":{},"text":{"46":{}},"component":{}}],["dimension",{"_index":2049,"title":{},"name":{},"text":{"46":{}},"component":{}}],["dimensionless",{"_index":429,"title":{},"name":{},"text":{"3":{}},"component":{}}],["din",{"_index":637,"title":{},"name":{},"text":{"4":{}},"component":{}}],["diod",{"_index":1308,"title":{},"name":{},"text":{"25":{},"29":{}},"component":{}}],["direct",{"_index":71,"title":{},"name":{},"text":{"2":{},"11":{},"59":{},"60":{},"61":{},"65":{}},"component":{}}],["directli",{"_index":873,"title":{},"name":{},"text":{"5":{},"7":{},"34":{},"42":{},"46":{}},"component":{}}],["directori",{"_index":89,"title":{},"name":{},"text":{"2":{},"4":{},"5":{}},"component":{}}],["disastr",{"_index":218,"title":{},"name":{},"text":{"2":{}},"component":{}}],["discharg",{"_index":1314,"title":{},"name":{},"text":{"25":{},"29":{}},"component":{}}],["discherg",{"_index":2218,"title":{},"name":{},"text":{"49":{}},"component":{}}],["discontinu",{"_index":737,"title":{},"name":{},"text":{"4":{},"10":{},"47":{},"53":{},"54":{},"57":{},"58":{},"65":{}},"component":{}}],["dispatch",{"_index":2024,"title":{"45-9":{}},"name":{},"text":{"45":{}},"component":{}}],["dispatch(raw_messag",{"_index":2039,"title":{},"name":{},"text":{"45":{}},"component":{}}],["disregard",{"_index":2129,"title":{},"name":{},"text":{"48":{}},"component":{}}],["disrupt",{"_index":2359,"title":{},"name":{},"text":{"59":{}},"component":{}}],["distanc",{"_index":2413,"title":{},"name":{},"text":{"62":{},"66":{}},"component":{}}],["distinct",{"_index":996,"title":{},"name":{},"text":{"8":{},"48":{}},"component":{}}],["distinguish",{"_index":1139,"title":{},"name":{},"text":{"11":{},"13":{},"14":{},"19":{},"20":{},"45":{}},"component":{}}],["distort",{"_index":526,"title":{},"name":{},"text":{"3":{},"26":{},"29":{}},"component":{}}],["distribut",{"_index":417,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"8":{}},"component":{}}],["div",{"_index":1365,"title":{},"name":{},"text":{"26":{},"27":{}},"component":{}}],["divid",{"_index":1153,"title":{},"name":{},"text":{"11":{}},"component":{}}],["divis",{"_index":1154,"title":{},"name":{},"text":{"11":{},"28":{}},"component":{}}],["doc",{"_index":90,"title":{},"name":{},"text":{"2":{}},"component":{}}],["document",{"_index":101,"title":{},"name":{},"text":{"2":{},"9":{},"11":{},"30":{}},"component":{}}],["domain",{"_index":163,"title":{},"name":{},"text":{"2":{},"7":{},"11":{},"21":{},"22":{},"23":{},"24":{},"26":{},"28":{},"32":{},"59":{}},"component":{}}],["done",{"_index":946,"title":{},"name":{},"text":{"7":{},"21":{},"22":{},"23":{},"24":{}},"component":{}}],["doubl",{"_index":185,"title":{},"name":{},"text":{"2":{},"4":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"31":{},"37":{},"39":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"66":{}},"component":{}}],["down",{"_index":707,"title":{},"name":{},"text":{"4":{},"23":{},"48":{},"58":{}},"component":{}}],["downsiz",{"_index":1578,"title":{},"name":{},"text":{"33":{}},"component":{}}],["downward",{"_index":1099,"title":{},"name":{},"text":{"10":{},"23":{},"29":{},"47":{},"51":{}},"component":{}}],["dpkg",{"_index":859,"title":{},"name":{},"text":{"5":{}},"component":{}}],["drag",{"_index":829,"title":{},"name":{},"text":{"5":{}},"component":{}}],["dread",{"_index":1521,"title":{},"name":{},"text":{"32":{}},"component":{}}],["drift",{"_index":2301,"title":{},"name":{},"text":{"55":{}},"component":{}}],["driver",{"_index":657,"title":{},"name":{},"text":{"4":{}},"component":{}}],["drop",{"_index":1304,"title":{},"name":{},"text":{"25":{},"29":{}},"component":{}}],["dsp",{"_index":19,"title":{"3":{},"4-2":{}},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"22":{},"24":{},"31":{},"32":{},"43":{},"44":{},"45":{},"47":{},"49":{},"50":{},"51":{},"52":{}},"component":{}}],["dt",{"_index":731,"title":{},"name":{},"text":{"4":{},"10":{},"53":{},"54":{},"57":{},"58":{}},"component":{}}],["due",{"_index":1354,"title":{},"name":{},"text":{"26":{},"32":{},"35":{},"55":{}},"component":{}}],["durat",{"_index":12,"title":{"60":{},"2-9":{}},"name":{"60":{}},"text":{"2":{},"3":{},"4":{},"10":{},"11":{},"25":{},"26":{},"27":{},"28":{},"29":{},"31":{},"33":{},"36":{},"39":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"60":{},"63":{}},"component":{}}],["duration::dur",{"_index":2438,"title":{},"name":{},"text":{"63":{}},"component":{}}],["duration_unit",{"_index":2381,"title":{},"name":{},"text":{"60":{}},"component":{}}],["dure",{"_index":1299,"title":{},"name":{},"text":{"25":{},"29":{},"48":{}},"component":{}}],["dynam",{"_index":164,"title":{"7":{}},"name":{"7":{}},"text":{"2":{},"3":{},"7":{},"8":{},"11":{},"21":{},"22":{},"23":{},"24":{},"28":{},"29":{},"31":{},"34":{},"59":{}},"component":{}}],["dynamic_smooth",{"_index":397,"title":{},"name":{},"text":{"2":{}},"component":{}}],["e",{"_index":1319,"title":{},"name":{},"text":{"25":{},"27":{},"29":{},"43":{}},"component":{}}],["e.g",{"_index":249,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"21":{},"22":{},"23":{},"24":{},"31":{},"32":{},"33":{},"48":{},"59":{},"67":{},"68":{}},"component":{}}],["each",{"_index":986,"title":{},"name":{},"text":{"8":{},"9":{},"11":{},"25":{},"27":{},"33":{},"37":{},"46":{},"48":{},"64":{},"65":{},"66":{}},"component":{}}],["eas",{"_index":614,"title":{},"name":{},"text":{"4":{}},"component":{}}],["easi",{"_index":64,"title":{},"name":{},"text":{"2":{},"4":{},"28":{}},"component":{}}],["easier",{"_index":957,"title":{},"name":{},"text":{"7":{}},"component":{}}],["easili",{"_index":77,"title":{},"name":{},"text":{"2":{},"9":{}},"component":{}}],["echo",{"_index":1466,"title":{},"name":{},"text":{"31":{}},"component":{}}],["edg",{"_index":1361,"title":{},"name":{},"text":{"26":{},"47":{},"50":{}},"component":{}}],["editor",{"_index":639,"title":{},"name":{},"text":{"4":{}},"component":{}}],["efer",{"_index":967,"title":{},"name":{},"text":{"8":{}},"component":{}}],["effect",{"_index":128,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"6":{},"7":{},"22":{},"23":{},"24":{},"26":{},"28":{},"30":{},"31":{},"42":{},"44":{},"53":{},"54":{},"56":{},"57":{},"58":{}},"component":{}}],["effect_1",{"_index":1868,"title":{},"name":{},"text":{"44":{}},"component":{}}],["effect_1_lsb",{"_index":1900,"title":{},"name":{},"text":{"44":{}},"component":{}}],["effect_2",{"_index":1870,"title":{},"name":{},"text":{"44":{}},"component":{}}],["effect_2_lsb",{"_index":1902,"title":{},"name":{},"text":{"44":{}},"component":{}}],["effects_1_depth",{"_index":1955,"title":{},"name":{},"text":{"44":{}},"component":{}}],["effects_2_depth",{"_index":1959,"title":{},"name":{},"text":{"44":{}},"component":{}}],["effects_3_depth",{"_index":1963,"title":{},"name":{},"text":{"44":{}},"component":{}}],["effects_4_depth",{"_index":1966,"title":{},"name":{},"text":{"44":{}},"component":{}}],["effects_5_depth",{"_index":1970,"title":{},"name":{},"text":{"44":{}},"component":{}}],["effici",{"_index":440,"title":{},"name":{},"text":{"3":{},"4":{},"6":{},"7":{},"32":{},"33":{},"35":{},"46":{},"56":{},"58":{},"68":{}},"component":{}}],["effort",{"_index":552,"title":{},"name":{},"text":{"3":{}},"component":{}}],["elabor",{"_index":605,"title":{},"name":{},"text":{"4":{}},"component":{}}],["electron",{"_index":308,"title":{},"name":{},"text":{"2":{},"3":{}},"component":{}}],["eleg",{"_index":437,"title":{},"name":{},"text":{"3":{}},"component":{}}],["element",{"_index":656,"title":{},"name":{},"text":{"4":{},"8":{},"31":{},"32":{},"33":{},"38":{},"43":{},"46":{},"67":{},"68":{}},"component":{}}],["elimin",{"_index":933,"title":{},"name":{},"text":{"7":{},"28":{},"30":{},"34":{},"64":{}},"component":{}}],["ellips",{"_index":2448,"title":{},"name":{},"text":{"64":{}},"component":{}}],["embodi",{"_index":1163,"title":{},"name":{},"text":{"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"28":{}},"component":{}}],["emphas",{"_index":975,"title":{},"name":{},"text":{"8":{}},"component":{}}],["emphasi",{"_index":704,"title":{},"name":{},"text":{"4":{}},"component":{}}],["employ",{"_index":1283,"title":{},"name":{},"text":{"24":{}},"component":{}}],["enabl",{"_index":1039,"title":{},"name":{},"text":{"10":{},"25":{},"27":{},"29":{}},"component":{}}],["encapsul",{"_index":352,"title":{},"name":{},"text":{"2":{},"4":{},"9":{},"44":{}},"component":{}}],["encod",{"_index":1814,"title":{},"name":{},"text":{"44":{}},"component":{}}],["end",{"_index":1775,"title":{},"name":{},"text":{"43":{},"48":{},"51":{},"64":{},"65":{}},"component":{}}],["endian",{"_index":1816,"title":{},"name":{},"text":{"44":{}},"component":{}}],["endl",{"_index":1650,"title":{},"name":{},"text":{"37":{}},"component":{}}],["endpoint",{"_index":2229,"title":{},"name":{},"text":{"50":{}},"component":{}}],["enforc",{"_index":1116,"title":{},"name":{},"text":{"11":{}},"component":{}}],["engag",{"_index":1035,"title":{},"name":{},"text":{"10":{}},"component":{}}],["engin",{"_index":534,"title":{},"name":{},"text":{"3":{}},"component":{}}],["enhanc",{"_index":932,"title":{},"name":{},"text":{"7":{}},"component":{}}],["enjoy",{"_index":524,"title":{},"name":{},"text":{"3":{}},"component":{}}],["enough",{"_index":263,"title":{},"name":{},"text":{"2":{},"3":{}},"component":{}}],["ensur",{"_index":1080,"title":{},"name":{},"text":{"10":{},"22":{},"32":{},"33":{}},"component":{}}],["enter",{"_index":811,"title":{},"name":{},"text":{"4":{}},"component":{}}],["entir",{"_index":1009,"title":{},"name":{},"text":{"9":{}},"component":{}}],["entiti",{"_index":136,"title":{},"name":{},"text":{"2":{}},"component":{}}],["enum",{"_index":1823,"title":{},"name":{},"text":{"44":{}},"component":{}}],["enumer",{"_index":1822,"title":{},"name":{},"text":{"44":{}},"component":{}}],["env",{"_index":374,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"34":{},"36":{}},"component":{}}],["env(",{"_index":1346,"title":{},"name":{},"text":{"25":{},"26":{},"27":{},"28":{},"29":{}},"component":{}}],["env(env_cfg",{"_index":673,"title":{},"name":{},"text":{"4":{}},"component":{}}],["env.attack(atk",{"_index":1348,"title":{},"name":{},"text":{"25":{}},"component":{}}],["env.config(atk",{"_index":1347,"title":{},"name":{},"text":{"25":{}},"component":{}}],["env.release(rel",{"_index":1349,"title":{},"name":{},"text":{"25":{},"29":{}},"component":{}}],["env_",{"_index":683,"title":{},"name":{},"text":{"4":{}},"component":{}}],["env_cfg",{"_index":670,"title":{},"name":{},"text":{"4":{},"48":{}},"component":{}}],["env_db",{"_index":381,"title":{},"name":{},"text":{"2":{}},"component":{}}],["env_gen",{"_index":2196,"title":{},"name":{},"text":{"48":{}},"component":{}}],["env_t",{"_index":1378,"title":{},"name":{},"text":{"26":{},"27":{},"28":{}},"component":{}}],["env_t(env",{"_index":1380,"title":{},"name":{},"text":{"26":{},"27":{},"28":{}},"component":{}}],["env_t(hold",{"_index":1379,"title":{},"name":{},"text":{"26":{},"27":{},"28":{}},"component":{}}],["envelop",{"_index":158,"title":{"8":{},"25":{},"26":{},"27":{},"28":{},"29":{},"48":{},"29-3":{},"48-3":{},"48-12":{},"48-20":{}},"name":{"8":{}},"text":{"2":{},"3":{},"4":{},"7":{},"8":{},"10":{},"11":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"34":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"59":{}},"component":{}}],["envelope::config",{"_index":793,"title":{},"name":{},"text":{"4":{}},"component":{}}],["envelope_follow",{"_index":404,"title":{},"name":{},"text":{"2":{}},"component":{}}],["envelope_gen",{"_index":2110,"title":{},"name":{"48":{}},"text":{"48":{}},"component":{}}],["envelope_gen(t",{"_index":2153,"title":{},"name":{},"text":{"48":{}},"component":{}}],["envelope_gen::reset",{"_index":2161,"title":{},"name":{},"text":{"48":{}},"component":{}}],["envelope_seg",{"_index":2140,"title":{},"name":{},"text":{"48":{}},"component":{}}],["envelope_segment(",{"_index":2147,"title":{},"name":{},"text":{"48":{}},"component":{}}],["envelope_segment(envelope_seg",{"_index":2141,"title":{},"name":{},"text":{"48":{}},"component":{}}],["envelope’",{"_index":765,"title":{},"name":{},"text":{"4":{},"26":{},"36":{}},"component":{}}],["eq",{"_index":904,"title":{},"name":{},"text":{"6":{}},"component":{}}],["equal",{"_index":1147,"title":{},"name":{},"text":{"11":{},"26":{},"27":{},"62":{},"66":{}},"component":{}}],["equival",{"_index":258,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"10":{},"54":{},"55":{},"56":{},"57":{},"58":{},"64":{}},"component":{}}],["erron",{"_index":1124,"title":{},"name":{},"text":{"11":{}},"component":{}}],["error",{"_index":1120,"title":{},"name":{},"text":{"11":{},"32":{},"33":{},"39":{},"55":{},"59":{}},"component":{}}],["especi",{"_index":447,"title":{},"name":{},"text":{"3":{}},"component":{}}],["essenti",{"_index":958,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"26":{},"28":{},"31":{},"43":{},"44":{},"45":{},"46":{},"52":{},"64":{}},"component":{}}],["etc",{"_index":195,"title":{},"name":{},"text":{"2":{},"48":{}},"component":{}}],["evalu",{"_index":1000,"title":{},"name":{},"text":{"8":{},"38":{}},"component":{}}],["even",{"_index":728,"title":{},"name":{},"text":{"4":{},"7":{},"10":{}},"component":{}}],["event",{"_index":758,"title":{},"name":{},"text":{"4":{},"61":{},"63":{}},"component":{}}],["everyth",{"_index":519,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["everywher",{"_index":139,"title":{},"name":{},"text":{"2":{}},"component":{}}],["evolv",{"_index":460,"title":{},"name":{},"text":{"3":{}},"component":{}}],["exact",{"_index":1480,"title":{},"name":{},"text":{"31":{},"62":{}},"component":{}}],["exact_interv",{"_index":2427,"title":{},"name":{},"text":{"62":{}},"component":{}}],["exactli",{"_index":1532,"title":{},"name":{},"text":{"32":{}},"component":{}}],["exampl",{"_index":10,"title":{"2-7":{},"7-2":{},"31-7":{},"37-9":{},"39-9":{},"48-10":{},"67-7":{},"68-7":{}},"name":{},"text":{"2":{},"4":{},"5":{},"7":{},"8":{},"9":{},"11":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"29":{},"32":{},"36":{},"42":{},"44":{},"45":{},"46":{},"48":{},"59":{},"60":{},"61":{}},"component":{}}],["example/delay.cpp",{"_index":559,"title":{},"name":{},"text":{"4":{}},"component":{}}],["example/square_synth.cpp",{"_index":615,"title":{},"name":{},"text":{"4":{}},"component":{}}],["exce",{"_index":943,"title":{},"name":{},"text":{"7":{},"22":{},"33":{},"36":{},"64":{},"65":{}},"component":{}}],["exceed",{"_index":1234,"title":{},"name":{},"text":{"22":{}},"component":{}}],["except",{"_index":84,"title":{},"name":{},"text":{"2":{},"6":{}},"component":{}}],["execut",{"_index":872,"title":{},"name":{},"text":{"5":{}},"component":{}}],["exemplifi",{"_index":721,"title":{},"name":{},"text":{"4":{}},"component":{}}],["exhibit",{"_index":2300,"title":{},"name":{},"text":{"55":{}},"component":{}}],["exist",{"_index":2360,"title":{},"name":{},"text":{"59":{}},"component":{}}],["exit",{"_index":812,"title":{},"name":{},"text":{"4":{}},"component":{}}],["exp",{"_index":1268,"title":{},"name":{},"text":{"23":{}},"component":{}}],["exp(env",{"_index":1276,"title":{},"name":{},"text":{"23":{}},"component":{}}],["exp.ratio",{"_index":1281,"title":{},"name":{},"text":{"23":{}},"component":{}}],["exp.ratio(r",{"_index":1279,"title":{},"name":{},"text":{"23":{}},"component":{}}],["exp.threshold",{"_index":1280,"title":{},"name":{},"text":{"23":{}},"component":{}}],["exp.threshold(t",{"_index":1278,"title":{},"name":{},"text":{"23":{}},"component":{}}],["exp_downward_ramp_gen",{"_index":2117,"title":{},"name":{},"text":{"48":{},"49":{}},"component":{}}],["exp_downward_ramp_gen(w",{"_index":2227,"title":{},"name":{},"text":{"49":{}},"component":{}}],["exp_upward_ramp_gen",{"_index":2199,"title":{},"name":{},"text":{"48":{},"49":{}},"component":{}}],["exp_upward_ramp_gen(dur",{"_index":2219,"title":{},"name":{},"text":{"49":{}},"component":{}}],["exp_upward_ramp_gen(w",{"_index":2225,"title":{},"name":{},"text":{"49":{}},"component":{}}],["exp_upward_ramp_gen::exp_upward_ramp_gen",{"_index":2221,"title":{},"name":{},"text":{"49":{}},"component":{}}],["expand",{"_index":166,"title":{"23":{}},"name":{"23":{}},"text":{"2":{},"3":{},"7":{},"11":{},"23":{},"28":{}},"component":{}}],["expander(decibel",{"_index":1267,"title":{},"name":{},"text":{"23":{}},"component":{}}],["expander(exp",{"_index":1271,"title":{},"name":{},"text":{"23":{}},"component":{}}],["expander(t",{"_index":1269,"title":{},"name":{},"text":{"23":{}},"component":{}}],["expans",{"_index":930,"title":{},"name":{},"text":{"7":{},"23":{}},"component":{}}],["expens",{"_index":1440,"title":{},"name":{},"text":{"29":{}},"component":{}}],["experiment",{"_index":452,"title":{},"name":{},"text":{"3":{}},"component":{}}],["explanatori",{"_index":2202,"title":{},"name":{},"text":{"48":{}},"component":{}}],["explicit",{"_index":1660,"title":{},"name":{},"text":{"38":{},"62":{},"66":{},"68":{}},"component":{}}],["explicitli",{"_index":1115,"title":{},"name":{},"text":{"11":{}},"component":{}}],["explor",{"_index":665,"title":{},"name":{},"text":{"4":{}},"component":{}}],["exponenti",{"_index":510,"title":{"49":{}},"name":{},"text":{"3":{},"25":{},"29":{},"48":{},"49":{}},"component":{}}],["exponential_gen",{"_index":2118,"title":{},"name":{"49":{}},"text":{"48":{}},"component":{}}],["express",{"_index":269,"title":{"6-5":{},"10-4":{},"10-10":{},"10-15":{},"10-20":{},"10-26":{},"11-3":{},"12-4":{},"13-4":{},"14-4":{},"15-4":{},"16-4":{},"17-4":{},"18-4":{},"19-4":{},"20-4":{},"21-4":{},"22-4":{},"23-4":{},"24-4":{},"25-5":{},"26-5":{},"27-7":{},"28-5":{},"29-6":{},"30-4":{},"31-4":{},"32-4":{},"33-4":{},"34-4":{},"35-4":{},"36-4":{},"37-4":{},"38-5":{},"38-11":{},"38-18":{},"39-4":{},"45-5":{},"46-5":{},"47-4":{},"47-10":{},"48-6":{},"48-15":{},"49-4":{},"50-4":{},"51-4":{},"51-10":{},"52-4":{},"53-4":{},"54-4":{},"55-4":{},"56-4":{},"57-4":{},"58-4":{},"59-4":{},"60-4":{},"61-4":{},"62-5":{},"63-4":{},"64-4":{},"65-4":{},"66-4":{},"67-4":{},"68-4":{}},"name":{},"text":{"2":{},"6":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{}},"component":{}}],["expression_lsb",{"_index":1898,"title":{},"name":{},"text":{"44":{}},"component":{}}],["extend",{"_index":1077,"title":{},"name":{},"text":{"10":{},"46":{}},"component":{}}],["extern",{"_index":94,"title":{},"name":{},"text":{"2":{},"21":{},"22":{},"23":{},"24":{}},"component":{}}],["extract",{"_index":966,"title":{},"name":{},"text":{"8":{},"35":{},"45":{}},"component":{}}],["extractor",{"_index":992,"title":{},"name":{},"text":{"8":{}},"component":{}}],["extrem",{"_index":751,"title":{},"name":{},"text":{"4":{}},"component":{}}],["f",{"_index":338,"title":{},"name":{},"text":{"2":{},"6":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"30":{},"35":{},"38":{},"55":{},"61":{},"63":{},"66":{}},"component":{}}],["f#0",{"_index":2501,"title":{},"name":{},"text":{"66":{}},"component":{}}],["f(",{"_index":345,"title":{},"name":{},"text":{"2":{},"6":{}},"component":{}}],["f.period",{"_index":2402,"title":{},"name":{},"text":{"61":{}},"component":{}}],["f_x",{"_index":336,"title":{},"name":{},"text":{"2":{}},"component":{}}],["facil",{"_index":132,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"48":{}},"component":{}}],["facilit",{"_index":1025,"title":{},"name":{},"text":{"9":{}},"component":{}}],["factor",{"_index":428,"title":{},"name":{},"text":{"3":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{}},"component":{}}],["factori",{"_index":2109,"title":{"48-9":{}},"name":{},"text":{},"component":{}}],["fair",{"_index":2233,"title":{},"name":{},"text":{"50":{}},"component":{}}],["fall",{"_index":739,"title":{},"name":{},"text":{"4":{},"10":{},"21":{},"23":{},"25":{},"29":{},"33":{},"47":{},"51":{}},"component":{}}],["fals",{"_index":816,"title":{},"name":{},"text":{"4":{},"33":{},"34":{},"38":{},"39":{}},"component":{}}],["famili",{"_index":2245,"title":{},"name":{},"text":{"51":{}},"component":{}}],["far",{"_index":1004,"title":{},"name":{},"text":{"8":{}},"component":{}}],["fashion",{"_index":1391,"title":{},"name":{},"text":{"27":{}},"component":{}}],["fast",{"_index":125,"title":{"26":{},"27":{},"28":{}},"name":{},"text":{"2":{},"3":{},"8":{},"22":{},"26":{},"27":{},"28":{},"29":{},"59":{},"66":{}},"component":{}}],["fast_ave_envelope_follow",{"_index":1350,"title":{},"name":{"26":{}},"text":{"26":{}},"component":{}}],["fast_envelope_follow",{"_index":399,"title":{},"name":{"27":{}},"text":{"2":{},"27":{}},"component":{}}],["fast_rms_envelope_follow",{"_index":1411,"title":{},"name":{"28":{}},"text":{"28":{}},"component":{}}],["fast_rms_envelope_follower(dur",{"_index":1425,"title":{},"name":{},"text":{"28":{}},"component":{}}],["fast_rms_envelope_follower::fast_rms_envelope_follow",{"_index":1426,"title":{},"name":{},"text":{"28":{}},"component":{}}],["fast_rms_envelope_follower_db",{"_index":1414,"title":{},"name":{},"text":{"28":{}},"component":{}}],["faster",{"_index":1432,"title":{},"name":{},"text":{"29":{},"32":{},"33":{},"59":{}},"component":{}}],["featur",{"_index":25,"title":{},"name":{},"text":{"2":{},"8":{},"27":{},"50":{}},"component":{}}],["feed",{"_index":583,"title":{},"name":{},"text":{"4":{}},"component":{}}],["feedback",{"_index":591,"title":{},"name":{},"text":{"4":{},"21":{},"31":{}},"component":{}}],["feedforward",{"_index":1216,"title":{},"name":{},"text":{"21":{}},"component":{}}],["feel",{"_index":663,"title":{},"name":{},"text":{"4":{}},"component":{}}],["few",{"_index":931,"title":{},"name":{},"text":{"7":{},"8":{},"48":{}},"component":{}}],["fft",{"_index":119,"title":{},"name":{},"text":{"2":{}},"component":{}}],["fg_x",{"_index":353,"title":{},"name":{},"text":{"2":{}},"component":{}}],["figur",{"_index":982,"title":{},"name":{},"text":{"8":{},"25":{},"26":{},"27":{},"28":{},"29":{},"31":{},"32":{},"33":{},"44":{},"46":{}},"component":{}}],["file",{"_index":4,"title":{"2-3":{}},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"9":{},"38":{},"59":{},"60":{},"61":{}},"component":{}}],["filenam",{"_index":1693,"title":{},"name":{},"text":{"38":{}},"component":{}}],["filepath",{"_index":1671,"title":{},"name":{},"text":{"38":{}},"component":{}}],["file’",{"_index":1665,"title":{},"name":{},"text":{"38":{}},"component":{}}],["fill",{"_index":1577,"title":{},"name":{},"text":{"33":{}},"component":{}}],["fill(t",{"_index":1560,"title":{},"name":{},"text":{"33":{}},"component":{}}],["film",{"_index":1042,"title":{},"name":{},"text":{"10":{}},"component":{}}],["filter",{"_index":477,"title":{"6":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{}},"name":{},"text":{"3":{},"4":{},"6":{},"8":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"35":{},"55":{}},"component":{}}],["filter(0.5",{"_index":675,"title":{},"name":{},"text":{"4":{}},"component":{}}],["filter.cutoff(env_",{"_index":684,"title":{},"name":{},"text":{"4":{}},"component":{}}],["final",{"_index":572,"title":{},"name":{},"text":{"4":{},"49":{}},"component":{}}],["fine",{"_index":357,"title":{},"name":{},"text":{"2":{},"3":{},"4":{}},"component":{}}],["finer",{"_index":1374,"title":{},"name":{},"text":{"26":{},"27":{}},"component":{}}],["fir",{"_index":1517,"title":{},"name":{},"text":{"32":{}},"component":{}}],["first",{"_index":520,"title":{},"name":{},"text":{"3":{},"32":{},"33":{},"37":{},"42":{},"45":{},"46":{},"47":{},"51":{},"58":{},"65":{}},"component":{}}],["five",{"_index":2204,"title":{},"name":{},"text":{"48":{}},"component":{}}],["fix",{"_index":198,"title":{},"name":{},"text":{"2":{},"55":{},"64":{},"68":{}},"component":{}}],["flag",{"_index":815,"title":{},"name":{},"text":{"4":{},"34":{}},"component":{}}],["flanger",{"_index":1473,"title":{},"name":{},"text":{"31":{}},"component":{}}],["flash",{"_index":2322,"title":{},"name":{},"text":{"56":{}},"component":{}}],["flatter",{"_index":2224,"title":{},"name":{},"text":{"49":{}},"component":{}}],["flavor",{"_index":1586,"title":{},"name":{},"text":{"34":{}},"component":{}}],["flexibl",{"_index":953,"title":{},"name":{},"text":{"7":{},"10":{},"25":{},"27":{},"29":{},"34":{}},"component":{}}],["float",{"_index":147,"title":{},"name":{},"text":{"2":{},"4":{},"6":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"38":{},"39":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{}},"component":{}}],["float(msg.veloc",{"_index":782,"title":{},"name":{},"text":{"4":{}},"component":{}}],["floor",{"_index":961,"title":{},"name":{},"text":{"7":{},"23":{},"62":{}},"component":{}}],["floor(basic_interv",{"_index":2426,"title":{},"name":{},"text":{"62":{}},"component":{}}],["floor(i",{"_index":2435,"title":{},"name":{},"text":{"62":{}},"component":{}}],["floor(p",{"_index":2524,"title":{},"name":{},"text":{"66":{}},"component":{}}],["floor(pitch",{"_index":2514,"title":{},"name":{},"text":{"66":{}},"component":{}}],["flow",{"_index":1007,"title":{"9-2":{}},"name":{},"text":{},"component":{}}],["fluctuat",{"_index":1428,"title":{},"name":{},"text":{"29":{}},"component":{}}],["folder",{"_index":878,"title":{},"name":{},"text":{"5":{}},"component":{}}],["follow",{"_index":483,"title":{"25":{},"26":{},"27":{},"28":{},"29":{}},"name":{},"text":{"3":{},"4":{},"5":{},"7":{},"8":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"34":{},"44":{},"45":{},"46":{},"48":{}},"component":{}}],["follower'",{"_index":1424,"title":{},"name":{},"text":{"28":{}},"component":{}}],["follower’",{"_index":1358,"title":{},"name":{},"text":{"26":{},"27":{},"28":{},"29":{}},"component":{}}],["foot",{"_index":1855,"title":{},"name":{},"text":{"44":{}},"component":{}}],["foot_lsb",{"_index":1886,"title":{},"name":{},"text":{"44":{}},"component":{}}],["forev",{"_index":2295,"title":{},"name":{},"text":{"55":{}},"component":{}}],["form",{"_index":329,"title":{},"name":{},"text":{"2":{},"4":{},"6":{},"10":{},"51":{}},"component":{}}],["format",{"_index":200,"title":{},"name":{},"text":{"2":{},"9":{},"38":{},"46":{},"64":{}},"component":{}}],["formula",{"_index":2091,"title":{},"name":{},"text":{"47":{},"50":{},"51":{}},"component":{}}],["forward",{"_index":2158,"title":{},"name":{},"text":{"48":{}},"component":{}}],["found",{"_index":407,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"58":{}},"component":{}}],["four",{"_index":2121,"title":{},"name":{},"text":{"48":{}},"component":{}}],["fourier",{"_index":126,"title":{},"name":{},"text":{"2":{}},"component":{}}],["fr",{"_index":1716,"title":{},"name":{},"text":{"39":{}},"component":{}}],["frac",{"_index":2463,"title":{},"name":{},"text":{"64":{}},"component":{}}],["frac_double(p",{"_index":2469,"title":{},"name":{},"text":{"64":{}},"component":{}}],["frac_double(phas",{"_index":2464,"title":{},"name":{},"text":{"64":{}},"component":{}}],["frac_float(p",{"_index":2468,"title":{},"name":{},"text":{"64":{}},"component":{}}],["frac_float(phas",{"_index":2465,"title":{},"name":{},"text":{"64":{}},"component":{}}],["frac_to_phase(frac",{"_index":2471,"title":{},"name":{},"text":{"64":{}},"component":{}}],["frac_to_phase(std::floating_point",{"_index":2462,"title":{},"name":{},"text":{"64":{}},"component":{}}],["fraction",{"_index":203,"title":{"67":{}},"name":{},"text":{"2":{},"3":{},"4":{},"31":{},"62":{},"64":{},"66":{},"67":{}},"component":{}}],["fractional_ring_buff",{"_index":1485,"title":{},"name":{"67":{}},"text":{"31":{},"67":{}},"component":{}}],["frame",{"_index":681,"title":{},"name":{},"text":{"4":{},"39":{},"46":{}},"component":{}}],["frames_view",{"_index":2072,"title":{},"name":{},"text":{"46":{}},"component":{}}],["free",{"_index":664,"title":{},"name":{},"text":{"4":{},"48":{},"55":{},"59":{},"60":{},"61":{},"62":{},"64":{},"66":{}},"component":{}}],["freq",{"_index":776,"title":{},"name":{},"text":{"4":{},"64":{},"65":{}},"component":{}}],["frequenc",{"_index":11,"title":{"61":{},"2-8":{}},"name":{"61":{}},"text":{"2":{},"3":{},"4":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"26":{},"27":{},"30":{},"31":{},"32":{},"35":{},"39":{},"42":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"61":{},"63":{},"64":{},"65":{},"66":{}},"component":{}}],["frequency_unit",{"_index":2396,"title":{},"name":{},"text":{"61":{}},"component":{}}],["frequency{8.1757989156437",{"_index":2505,"title":{},"name":{},"text":{"66":{}},"component":{}}],["frill",{"_index":50,"title":{},"name":{},"text":{"2":{}},"component":{}}],["front",{"_index":2550,"title":{},"name":{},"text":{"68":{}},"component":{}}],["fulfil",{"_index":463,"title":{},"name":{},"text":{"3":{}},"component":{}}],["full",{"_index":558,"title":{},"name":{},"text":{"4":{},"7":{},"48":{},"63":{},"64":{}},"component":{}}],["fulli",{"_index":606,"title":{},"name":{},"text":{"4":{}},"component":{}}],["function",{"_index":15,"title":{"2-12":{},"4-8":{},"6-8":{},"10-7":{},"10-12":{},"10-17":{},"10-23":{},"21-7":{},"22-7":{},"23-7":{},"24-7":{},"25-8":{},"26-8":{},"27-10":{},"28-8":{},"29-9":{},"31-10":{},"32-7":{},"33-9":{},"34-7":{},"45-7":{},"48-17":{},"55-7":{},"62-8":{},"66-8":{},"66-9":{}},"name":{},"text":{"2":{},"3":{},"4":{},"6":{},"7":{},"9":{},"10":{},"21":{},"22":{},"23":{},"24":{},"28":{},"32":{},"36":{},"38":{},"39":{},"42":{},"43":{},"44":{},"45":{},"47":{},"48":{},"50":{},"51":{},"53":{},"54":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"66":{},"67":{}},"component":{}}],["fundament",{"_index":17,"title":{"2":{}},"name":{"2":{}},"text":{"2":{},"3":{},"9":{},"11":{},"56":{}},"component":{}}],["further",{"_index":1215,"title":{},"name":{},"text":{"21":{},"22":{},"23":{},"24":{},"27":{},"29":{},"59":{},"64":{}},"component":{}}],["futur",{"_index":2028,"title":{},"name":{},"text":{"45":{}},"component":{}}],["fx",{"_index":120,"title":{},"name":{},"text":{"2":{}},"component":{}}],["g",{"_index":339,"title":{},"name":{},"text":{"2":{},"5":{},"10":{},"16":{},"18":{},"20":{},"21":{},"34":{},"44":{},"47":{},"48":{},"49":{},"50":{},"51":{},"55":{}},"component":{}}],["g\"codeblock",{"_index":867,"title":{},"name":{},"text":{"5":{}},"component":{}}],["g\"visual",{"_index":856,"title":{},"name":{},"text":{"5":{}},"component":{}}],["g\"xcode",{"_index":855,"title":{},"name":{},"text":{"5":{}},"component":{}}],["g().first",{"_index":2311,"title":{},"name":{},"text":{"55":{}},"component":{}}],["g().second",{"_index":2312,"title":{},"name":{},"text":{"55":{}},"component":{}}],["g(env",{"_index":1226,"title":{},"name":{},"text":{"21":{},"34":{}},"component":{}}],["g(f(",{"_index":351,"title":{},"name":{},"text":{"2":{}},"component":{}}],["g.attack",{"_index":2159,"title":{},"name":{},"text":{"48":{}},"component":{}}],["g.config(f",{"_index":2313,"title":{},"name":{},"text":{"55":{}},"component":{}}],["g.config(w",{"_index":2102,"title":{},"name":{},"text":{"47":{},"49":{},"50":{},"51":{}},"component":{}}],["g.current",{"_index":2163,"title":{},"name":{},"text":{"48":{}},"component":{}}],["g.in_attack_phas",{"_index":2165,"title":{},"name":{},"text":{"48":{}},"component":{}}],["g.in_idle_phas",{"_index":2164,"title":{},"name":{},"text":{"48":{}},"component":{}}],["g.in_release_phas",{"_index":2166,"title":{},"name":{},"text":{"48":{}},"component":{}}],["g.index",{"_index":2167,"title":{},"name":{},"text":{"48":{}},"component":{}}],["g.max",{"_index":1230,"title":{},"name":{},"text":{"21":{}},"component":{}}],["g.max(max",{"_index":1229,"title":{},"name":{},"text":{"21":{}},"component":{}}],["g.midpoint",{"_index":2104,"title":{},"name":{},"text":{"47":{},"50":{},"51":{},"55":{}},"component":{}}],["g.onset_threshold",{"_index":1605,"title":{},"name":{},"text":{"34":{}},"component":{}}],["g.onset_threshold(ot",{"_index":1603,"title":{},"name":{},"text":{"34":{}},"component":{}}],["g.releas",{"_index":2160,"title":{},"name":{},"text":{"48":{}},"component":{}}],["g.release_threshold",{"_index":1606,"title":{},"name":{},"text":{"34":{}},"component":{}}],["g.release_threshold(rt",{"_index":1604,"title":{},"name":{},"text":{"34":{}},"component":{}}],["g.reset",{"_index":2103,"title":{},"name":{},"text":{"47":{},"48":{},"50":{},"51":{},"55":{}},"component":{}}],["g.reset(0.0f",{"_index":2315,"title":{},"name":{},"text":{"55":{}},"component":{}}],["g.reset(sv",{"_index":2314,"title":{},"name":{},"text":{"55":{}},"component":{}}],["g9",{"_index":2021,"title":{},"name":{},"text":{"44":{}},"component":{}}],["g_x",{"_index":337,"title":{},"name":{},"text":{"2":{}},"component":{}}],["gain",{"_index":170,"title":{"13":{},"14":{}},"name":{},"text":{"2":{},"3":{},"4":{},"13":{},"14":{},"16":{},"18":{},"20":{},"21":{},"22":{},"23":{},"24":{},"59":{}},"component":{}}],["game",{"_index":1043,"title":{},"name":{},"text":{"10":{}},"component":{}}],["gate",{"_index":377,"title":{"34":{},"36":{}},"name":{},"text":{"2":{},"3":{},"7":{},"23":{},"34":{},"36":{}},"component":{}}],["gcc",{"_index":839,"title":{},"name":{},"text":{"5":{}},"component":{}}],["gen",{"_index":2119,"title":{},"name":{},"text":{"48":{}},"component":{}}],["gener",{"_index":318,"title":{"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"55":{},"5-5":{},"10-18":{},"44-4":{},"47-8":{},"48-12":{},"48-20":{},"51-8":{}},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"7":{},"10":{},"26":{},"27":{},"44":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"64":{}},"component":{}}],["general_1",{"_index":1872,"title":{},"name":{},"text":{"44":{}},"component":{}}],["general_1_lsb",{"_index":1904,"title":{},"name":{},"text":{"44":{}},"component":{}}],["general_2",{"_index":1874,"title":{},"name":{},"text":{"44":{}},"component":{}}],["general_2_lsb",{"_index":1906,"title":{},"name":{},"text":{"44":{}},"component":{}}],["general_3",{"_index":1876,"title":{},"name":{},"text":{"44":{}},"component":{}}],["general_3_lsb",{"_index":1908,"title":{},"name":{},"text":{"44":{}},"component":{}}],["general_4",{"_index":1878,"title":{},"name":{},"text":{"44":{}},"component":{}}],["general_4_lsb",{"_index":1910,"title":{},"name":{},"text":{"44":{}},"component":{}}],["general_5",{"_index":1945,"title":{},"name":{},"text":{"44":{}},"component":{}}],["general_6",{"_index":1947,"title":{},"name":{},"text":{"44":{}},"component":{}}],["general_7",{"_index":1949,"title":{},"name":{},"text":{"44":{}},"component":{}}],["general_8",{"_index":1951,"title":{},"name":{},"text":{"44":{}},"component":{}}],["generator(g",{"_index":1094,"title":{},"name":{},"text":{"10":{}},"component":{}}],["get(id",{"_index":1634,"title":{},"name":{},"text":{"37":{}},"component":{}}],["get(int",{"_index":1628,"title":{},"name":{},"text":{"37":{}},"component":{}}],["git",{"_index":823,"title":{"5-3":{}},"name":{},"text":{"5":{}},"component":{}}],["give",{"_index":805,"title":{},"name":{},"text":{"4":{},"25":{}},"component":{}}],["given",{"_index":705,"title":{},"name":{},"text":{"4":{},"10":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"35":{},"36":{},"37":{},"38":{},"39":{},"44":{},"47":{},"49":{},"50":{},"51":{},"53":{},"55":{},"59":{},"63":{},"65":{},"67":{},"68":{}},"component":{}}],["global",{"_index":2280,"title":{},"name":{},"text":{"54":{},"56":{},"57":{},"58":{}},"component":{}}],["go",{"_index":702,"title":{},"name":{},"text":{"4":{}},"component":{}}],["goe",{"_index":1003,"title":{},"name":{},"text":{"8":{},"21":{},"34":{}},"component":{}}],["good",{"_index":611,"title":{},"name":{},"text":{"4":{},"7":{}},"component":{}}],["gradual",{"_index":1266,"title":{},"name":{},"text":{"23":{},"24":{},"25":{},"29":{},"47":{}},"component":{}}],["grain",{"_index":358,"title":{},"name":{},"text":{"2":{},"3":{},"4":{}},"component":{}}],["granular",{"_index":1375,"title":{},"name":{},"text":{"26":{},"27":{}},"component":{}}],["graph",{"_index":965,"title":{},"name":{},"text":{"7":{}},"component":{}}],["greater",{"_index":723,"title":{},"name":{},"text":{"4":{},"11":{},"22":{},"26":{},"27":{},"49":{},"62":{},"66":{},"68":{}},"component":{}}],["green",{"_index":1421,"title":{},"name":{},"text":{"28":{}},"component":{}}],["gui",{"_index":652,"title":{},"name":{},"text":{"4":{}},"component":{}}],["guitar",{"_index":523,"title":{},"name":{},"text":{"3":{}},"component":{}}],["guitar’",{"_index":1318,"title":{},"name":{},"text":{"25":{},"27":{},"29":{}},"component":{}}],["guzman",{"_index":414,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"8":{}},"component":{}}],["hal",{"_index":2283,"title":{},"name":{},"text":{"55":{}},"component":{}}],["half",{"_index":1079,"title":{},"name":{},"text":{"10":{},"47":{},"51":{},"59":{}},"component":{}}],["ham",{"_index":507,"title":{"50":{}},"name":{},"text":{"3":{},"50":{},"51":{}},"component":{}}],["hamming_gen",{"_index":2228,"title":{},"name":{"50":{}},"text":{"50":{}},"component":{}}],["hamming_gen(dur",{"_index":2237,"title":{},"name":{},"text":{"50":{}},"component":{}}],["hamming_gen(w",{"_index":2238,"title":{},"name":{},"text":{"50":{}},"component":{}}],["hand",{"_index":322,"title":{},"name":{},"text":{"2":{},"9":{},"32":{}},"component":{}}],["handl",{"_index":316,"title":{},"name":{},"text":{"2":{},"9":{},"37":{},"45":{},"59":{},"64":{}},"component":{}}],["hann",{"_index":506,"title":{"51":{}},"name":{},"text":{"3":{},"48":{},"51":{}},"component":{}}],["hann_downward_ramp_gen",{"_index":2253,"title":{},"name":{},"text":{"51":{}},"component":{}}],["hann_downward_ramp_gen(dur",{"_index":2254,"title":{},"name":{},"text":{"51":{}},"component":{}}],["hann_gen",{"_index":2239,"title":{},"name":{"51":{}},"text":{"51":{}},"component":{}}],["hann_gen(dur",{"_index":2249,"title":{},"name":{},"text":{"51":{}},"component":{}}],["hann_gen(w",{"_index":2250,"title":{},"name":{},"text":{"51":{}},"component":{}}],["hann_upward_ramp_gen",{"_index":2251,"title":{},"name":{},"text":{"51":{}},"component":{}}],["hann_upward_ramp_gen(dur",{"_index":2252,"title":{},"name":{},"text":{"51":{}},"component":{}}],["happen",{"_index":220,"title":{},"name":{},"text":{"2":{},"48":{}},"component":{}}],["hard",{"_index":941,"title":{},"name":{},"text":{"7":{},"10":{},"22":{},"23":{},"24":{},"26":{},"59":{}},"component":{}}],["hardwar",{"_index":72,"title":{},"name":{},"text":{"2":{},"4":{},"27":{}},"component":{}}],["harmon",{"_index":238,"title":{},"name":{},"text":{"2":{},"10":{},"44":{},"56":{}},"component":{}}],["harmoni",{"_index":2416,"title":{},"name":{},"text":{"62":{}},"component":{}}],["harri",{"_index":1385,"title":{},"name":{},"text":{"27":{}},"component":{}}],["have",{"_index":1332,"title":{},"name":{},"text":{"25":{},"56":{}},"component":{}}],["haven’t",{"_index":790,"title":{},"name":{},"text":{"4":{}},"component":{}}],["header",{"_index":52,"title":{},"name":{},"text":{"2":{}},"component":{}}],["headroom",{"_index":187,"title":{},"name":{},"text":{"2":{}},"component":{}}],["heard",{"_index":573,"title":{},"name":{},"text":{"4":{},"29":{}},"component":{}}],["held",{"_index":1345,"title":{},"name":{},"text":{"25":{},"26":{},"27":{},"28":{},"29":{},"46":{}},"component":{}}],["hello",{"_index":553,"title":{"4-1":{},"4-4":{}},"name":{},"text":{"4":{}},"component":{}}],["here",{"_index":117,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"39":{},"43":{},"44":{},"59":{}},"component":{}}],["here’",{"_index":285,"title":{},"name":{},"text":{"2":{},"4":{},"7":{}},"component":{}}],["hertz",{"_index":1131,"title":{},"name":{},"text":{"11":{},"61":{},"66":{}},"component":{}}],["hide",{"_index":909,"title":{},"name":{},"text":{"6":{}},"component":{}}],["high",{"_index":367,"title":{"15":{},"16":{}},"name":{},"text":{"2":{},"3":{},"6":{},"7":{},"15":{},"16":{},"22":{},"23":{},"24":{},"30":{},"53":{},"54":{},"57":{}},"component":{}}],["higher",{"_index":362,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"26":{},"27":{}},"component":{}}],["highest",{"_index":1393,"title":{},"name":{},"text":{"27":{},"42":{}},"component":{}}],["highli",{"_index":541,"title":{},"name":{},"text":{"3":{},"48":{}},"component":{}}],["highlight",{"_index":557,"title":{},"name":{},"text":{"4":{}},"component":{}}],["highpass",{"_index":395,"title":{},"name":{"15":{}},"text":{"2":{},"6":{},"15":{}},"component":{}}],["highpass(f",{"_index":1183,"title":{},"name":{},"text":{"15":{}},"component":{}}],["highpass(frequ",{"_index":1181,"title":{},"name":{},"text":{"15":{}},"component":{}}],["highshelf",{"_index":922,"title":{},"name":{"16":{}},"text":{"6":{},"16":{}},"component":{}}],["highshelf(doubl",{"_index":1187,"title":{},"name":{},"text":{"16":{}},"component":{}}],["highshelf(g",{"_index":1191,"title":{},"name":{},"text":{"16":{}},"component":{}}],["hoist",{"_index":264,"title":{},"name":{},"text":{"2":{}},"component":{}}],["hold",{"_index":1053,"title":{},"name":{},"text":{"10":{},"26":{},"27":{},"28":{},"44":{},"46":{},"48":{},"65":{}},"component":{}}],["hold_2",{"_index":1921,"title":{},"name":{},"text":{"44":{}},"component":{}}],["hold_line_gen",{"_index":2114,"title":{},"name":{},"text":{"48":{},"52":{}},"component":{}}],["hold_line_gen(dur",{"_index":2261,"title":{},"name":{},"text":{"52":{}},"component":{}}],["home",{"_index":530,"title":{},"name":{},"text":{"3":{}},"component":{}}],["hook",{"_index":2040,"title":{},"name":{},"text":{"45":{}},"component":{}}],["horizont",{"_index":2258,"title":{},"name":{},"text":{"52":{}},"component":{}}],["host",{"_index":40,"title":{},"name":{},"text":{"2":{},"3":{},"9":{},"37":{}},"component":{}}],["hp",{"_index":1182,"title":{},"name":{},"text":{"15":{}},"component":{}}],["hp.config(f",{"_index":1184,"title":{},"name":{},"text":{"15":{}},"component":{}}],["hs",{"_index":1190,"title":{},"name":{},"text":{"16":{}},"component":{}}],["hs.config(g",{"_index":1192,"title":{},"name":{},"text":{"16":{}},"component":{}}],["https://en.wikipedia.org/wiki/angular_unit",{"_index":2456,"title":{},"name":{},"text":{"64":{}},"component":{}}],["https://github.com/cycfi/q.git",{"_index":845,"title":{},"name":{},"text":{"5":{}},"component":{}}],["hum",{"_index":1585,"title":{},"name":{},"text":{"34":{}},"component":{}}],["human",{"_index":1733,"title":{},"name":{},"text":{"39":{}},"component":{}}],["hypothet",{"_index":335,"title":{},"name":{},"text":{"2":{}},"component":{}}],["hz",{"_index":191,"title":{},"name":{},"text":{"2":{},"5":{},"8":{},"11":{},"26":{},"27":{},"61":{},"66":{}},"component":{}}],["i+1",{"_index":1514,"title":{},"name":{},"text":{"31":{}},"component":{}}],["i.",{"_index":2491,"title":{},"name":{},"text":{"65":{}},"component":{}}],["i._incr",{"_index":742,"title":{},"name":{},"text":{"4":{}},"component":{}}],["i._phas",{"_index":2496,"title":{},"name":{},"text":{"65":{}},"component":{}}],["i._step",{"_index":2497,"title":{},"name":{},"text":{"65":{}},"component":{}}],["i.begin",{"_index":2493,"title":{},"name":{},"text":{"65":{}},"component":{}}],["i.end",{"_index":2494,"title":{},"name":{},"text":{"65":{}},"component":{}}],["i.first",{"_index":2489,"title":{},"name":{},"text":{"65":{}},"component":{}}],["i.last",{"_index":2492,"title":{},"name":{},"text":{"65":{}},"component":{}}],["i.middl",{"_index":2495,"title":{},"name":{},"text":{"65":{}},"component":{}}],["i/o",{"_index":37,"title":{"9":{}},"name":{},"text":{"2":{},"3":{},"5":{},"9":{},"42":{},"45":{}},"component":{}}],["ic",{"_index":1712,"title":{},"name":{},"text":{"39":{}},"component":{}}],["id",{"_index":630,"title":{},"name":{},"text":{"4":{},"5":{},"37":{}},"component":{}}],["ideal",{"_index":1307,"title":{},"name":{},"text":{"25":{},"29":{},"46":{}},"component":{}}],["identifi",{"_index":1014,"title":{},"name":{},"text":{"9":{},"37":{}},"component":{}}],["idl",{"_index":2122,"title":{},"name":{},"text":{"48":{}},"component":{}}],["ieee",{"_index":2293,"title":{},"name":{},"text":{"55":{}},"component":{}}],["ignor",{"_index":118,"title":{},"name":{},"text":{"2":{}},"component":{}}],["iir",{"_index":893,"title":{},"name":{},"text":{"6":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"55":{}},"component":{}}],["imag",{"_index":1439,"title":{},"name":{},"text":{"29":{}},"component":{}}],["immedi",{"_index":747,"title":{},"name":{},"text":{"4":{},"24":{},"27":{},"48":{}},"component":{}}],["implement",{"_index":176,"title":{"48-23":{}},"name":{},"text":{"2":{},"6":{},"7":{},"21":{},"22":{},"23":{},"24":{},"27":{},"30":{},"31":{},"33":{},"34":{},"39":{},"44":{},"45":{},"46":{},"47":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{}},"component":{}}],["import",{"_index":720,"title":{},"name":{},"text":{"4":{},"8":{},"31":{},"35":{}},"component":{}}],["imposs",{"_index":1047,"title":{},"name":{},"text":{"10":{}},"component":{}}],["improv",{"_index":1530,"title":{},"name":{},"text":{"32":{}},"component":{}}],["impuls",{"_index":895,"title":{},"name":{},"text":{"6":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{}},"component":{}}],["in[0",{"_index":1749,"title":{},"name":{},"text":{"39":{}},"component":{}}],["in_attack_phas",{"_index":2156,"title":{},"name":{},"text":{"48":{}},"component":{}}],["in_channel",{"_index":1754,"title":{},"name":{},"text":{"42":{}},"component":{}}],["in_idle_phas",{"_index":2155,"title":{},"name":{},"text":{"48":{}},"component":{}}],["in_release_phas",{"_index":2157,"title":{},"name":{},"text":{"48":{}},"component":{}}],["includ",{"_index":26,"title":{"6-3":{},"12-2":{},"13-2":{},"14-2":{},"15-2":{},"16-2":{},"17-2":{},"18-2":{},"19-2":{},"20-2":{},"21-2":{},"22-2":{},"23-2":{},"24-2":{},"25-3":{},"26-3":{},"27-5":{},"28-3":{},"29-4":{},"30-2":{},"31-2":{},"32-2":{},"33-2":{},"34-2":{},"35-2":{},"36-2":{},"37-2":{},"38-2":{},"39-2":{},"42-2":{},"43-2":{},"44-2":{},"45-2":{},"46-3":{},"47-2":{},"48-4":{},"48-13":{},"48-21":{},"49-2":{},"50-2":{},"51-2":{},"52-2":{},"53-2":{},"54-2":{},"55-2":{},"56-2":{},"57-2":{},"58-2":{},"59-2":{},"60-2":{},"61-2":{},"62-2":{},"63-2":{},"64-2":{},"65-2":{},"66-2":{},"67-2":{},"68-2":{}},"name":{},"text":{"2":{},"6":{},"8":{},"9":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{}},"component":{}}],["incom",{"_index":580,"title":{},"name":{},"text":{"4":{},"32":{},"33":{},"45":{},"48":{}},"component":{}}],["increas",{"_index":1211,"title":{},"name":{},"text":{"21":{},"23":{},"24":{},"25":{},"32":{},"39":{},"49":{},"52":{},"59":{}},"component":{}}],["increment",{"_index":1667,"title":{},"name":{},"text":{"38":{},"44":{},"65":{}},"component":{}}],["index",{"_index":425,"title":{"46-9":{}},"name":{"3":{}},"text":{"31":{},"32":{},"33":{},"43":{},"46":{},"48":{},"67":{},"68":{}},"component":{}}],["index_iter",{"_index":2076,"title":{},"name":{},"text":{"46":{}},"component":{}}],["index_typ",{"_index":1491,"title":{},"name":{},"text":{"31":{},"67":{}},"component":{}}],["indexablecontain",{"_index":1682,"title":{"43-5":{}},"name":{},"text":{"38":{},"43":{},"46":{}},"component":{}}],["indic",{"_index":1328,"title":{},"name":{},"text":{"25":{},"27":{},"29":{},"32":{},"33":{},"39":{},"44":{},"46":{},"48":{}},"component":{}}],["indirectli",{"_index":2370,"title":{},"name":{},"text":{"59":{}},"component":{}}],["indistinguish",{"_index":1423,"title":{},"name":{},"text":{"28":{}},"component":{}}],["individu",{"_index":1012,"title":{},"name":{},"text":{"9":{},"31":{},"37":{},"46":{}},"component":{}}],["infinit",{"_index":894,"title":{},"name":{},"text":{"6":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"52":{},"55":{}},"component":{}}],["influenc",{"_index":1471,"title":{},"name":{},"text":{"31":{}},"component":{}}],["info",{"_index":1751,"title":{},"name":{},"text":{"39":{}},"component":{}}],["inform",{"_index":211,"title":{},"name":{},"text":{"2":{},"9":{},"27":{},"35":{},"42":{},"45":{},"46":{},"64":{},"65":{}},"component":{}}],["infra",{"_index":831,"title":{},"name":{},"text":{"5":{}},"component":{}}],["infrastructur",{"_index":899,"title":{},"name":{},"text":{"6":{}},"component":{}}],["inher",{"_index":1071,"title":{},"name":{},"text":{"10":{},"64":{},"65":{}},"component":{}}],["inherit",{"_index":1483,"title":{},"name":{},"text":{"31":{},"32":{},"36":{},"39":{},"48":{},"63":{},"67":{}},"component":{}}],["initi",{"_index":764,"title":{},"name":{},"text":{"4":{},"6":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"38":{},"47":{},"48":{},"49":{},"50":{},"51":{},"53":{},"55":{},"59":{},"63":{},"64":{},"65":{},"66":{},"68":{}},"component":{}}],["inlin",{"_index":365,"title":{},"name":{},"text":{"2":{},"48":{},"59":{},"60":{},"61":{}},"component":{}}],["input",{"_index":149,"title":{},"name":{},"text":{"2":{},"4":{},"6":{},"7":{},"9":{},"11":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"34":{},"35":{},"37":{},"38":{},"39":{},"42":{},"44":{},"59":{}},"component":{}}],["input_channel",{"_index":1630,"title":{},"name":{},"text":{"37":{},"39":{}},"component":{}}],["input_lat",{"_index":1710,"title":{},"name":{},"text":{"39":{}},"component":{}}],["inputs/output",{"_index":631,"title":{},"name":{},"text":{"4":{}},"component":{}}],["insert",{"_index":602,"title":{},"name":{},"text":{"4":{}},"component":{}}],["insid",{"_index":356,"title":{},"name":{},"text":{"2":{},"4":{},"45":{}},"component":{}}],["instabl",{"_index":2296,"title":{},"name":{},"text":{"55":{}},"component":{}}],["instal",{"_index":469,"title":{"5":{}},"name":{},"text":{"3":{},"4":{},"5":{}},"component":{}}],["instanc",{"_index":157,"title":{},"name":{},"text":{"2":{},"7":{},"10":{},"11":{},"43":{},"45":{},"46":{},"48":{},"54":{},"56":{},"57":{},"58":{},"59":{}},"component":{}}],["instantan",{"_index":1237,"title":{},"name":{},"text":{"22":{}},"component":{}}],["instanti",{"_index":332,"title":{"37-7":{},"62-4":{}},"name":{},"text":{"2":{},"4":{},"26":{},"27":{},"28":{},"31":{},"32":{},"33":{},"42":{},"46":{},"48":{},"62":{},"67":{},"68":{}},"component":{}}],["instead",{"_index":246,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"28":{},"33":{},"34":{},"37":{},"46":{},"59":{},"60":{},"68":{}},"component":{}}],["int",{"_index":292,"title":{},"name":{},"text":{"2":{},"4":{},"11":{},"37":{},"39":{},"44":{},"59":{},"60":{},"61":{},"62":{},"65":{}},"component":{}}],["intact",{"_index":1357,"title":{},"name":{},"text":{"26":{}},"component":{}}],["integ",{"_index":1481,"title":{},"name":{},"text":{"31":{},"32":{},"33":{},"37":{},"38":{},"59":{},"60":{},"61":{}},"component":{}}],["intend",{"_index":871,"title":{},"name":{},"text":{"5":{},"9":{},"45":{}},"component":{}}],["intent",{"_index":713,"title":{},"name":{},"text":{"4":{}},"component":{}}],["interchang",{"_index":1123,"title":{},"name":{},"text":{"11":{}},"component":{}}],["interest",{"_index":760,"title":{},"name":{},"text":{"4":{},"30":{},"45":{},"48":{}},"component":{}}],["interfac",{"_index":1013,"title":{"42-4":{}},"name":{},"text":{"9":{},"37":{},"38":{},"39":{},"42":{}},"component":{}}],["interleav",{"_index":2043,"title":{},"name":{},"text":{"46":{}},"component":{}}],["intermedi",{"_index":2125,"title":{},"name":{},"text":{"48":{}},"component":{}}],["intermediari",{"_index":1031,"title":{},"name":{},"text":{"9":{},"45":{}},"component":{}}],["intermmedi",{"_index":2134,"title":{},"name":{},"text":{"48":{}},"component":{}}],["intern",{"_index":1552,"title":{},"name":{},"text":{"33":{}},"component":{}}],["interpol",{"_index":1507,"title":{},"name":{},"text":{"31":{},"67":{}},"component":{}}],["interpolation_typ",{"_index":1493,"title":{},"name":{},"text":{"31":{},"67":{}},"component":{}}],["interpret",{"_index":2025,"title":{},"name":{},"text":{"45":{}},"component":{}}],["interv",{"_index":474,"title":{"62":{}},"name":{"62":{}},"text":{"3":{},"11":{},"31":{},"39":{},"42":{},"62":{},"66":{}},"component":{}}],["interval_unit",{"_index":2419,"title":{},"name":{},"text":{"62":{}},"component":{}}],["introduc",{"_index":1461,"title":{},"name":{},"text":{"31":{}},"component":{}}],["introduct",{"_index":421,"title":{"3-1":{}},"name":{},"text":{"30":{}},"component":{}}],["intuit",{"_index":256,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"9":{},"38":{}},"component":{}}],["invalid",{"_index":1722,"title":{},"name":{},"text":{"39":{},"44":{},"66":{}},"component":{}}],["invers",{"_index":197,"title":{},"name":{},"text":{"2":{},"23":{},"49":{},"52":{}},"component":{}}],["invoc",{"_index":342,"title":{},"name":{},"text":{"2":{}},"component":{}}],["invok",{"_index":854,"title":{},"name":{},"text":{"5":{}},"component":{}}],["involv",{"_index":988,"title":{},"name":{},"text":{"8":{},"10":{},"33":{}},"component":{}}],["is_valid",{"_index":1708,"title":{},"name":{},"text":{"39":{}},"component":{}}],["item",{"_index":2201,"title":{},"name":{},"text":{"48":{}},"component":{}}],["iter",{"_index":690,"title":{"65-7":{}},"name":{},"text":{"4":{},"10":{},"43":{},"46":{},"65":{}},"component":{}}],["iterat",{"_index":1774,"title":{},"name":{},"text":{"43":{}},"component":{}}],["iterator_rang",{"_index":2071,"title":{},"name":{},"text":{"46":{}},"component":{}}],["jag",{"_index":1399,"title":{},"name":{},"text":{"27":{}},"component":{}}],["joel",{"_index":412,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"8":{}},"component":{}}],["johnson’",{"_index":903,"title":{},"name":{},"text":{"6":{}},"component":{}}],["jr",{"_index":1387,"title":{},"name":{},"text":{"27":{}},"component":{}}],["judici",{"_index":748,"title":{},"name":{},"text":{"4":{}},"component":{}}],["juliu",{"_index":1451,"title":{},"name":{},"text":{"30":{},"51":{}},"component":{}}],["keep",{"_index":653,"title":{},"name":{},"text":{"4":{},"26":{},"33":{},"64":{},"65":{}},"component":{}}],["kept",{"_index":613,"title":{},"name":{},"text":{"4":{}},"component":{}}],["key",{"_index":923,"title":{"7-3":{}},"name":{},"text":{"44":{},"48":{}},"component":{}}],["keyboard",{"_index":618,"title":{},"name":{},"text":{"4":{}},"component":{}}],["khz",{"_index":597,"title":{},"name":{},"text":{"4":{},"61":{}},"component":{}}],["knee",{"_index":488,"title":{"24":{}},"name":{},"text":{"3":{},"7":{},"22":{},"24":{}},"component":{}}],["know",{"_index":1639,"title":{},"name":{},"text":{"37":{}},"component":{}}],["known",{"_index":945,"title":{},"name":{},"text":{"7":{},"10":{},"22":{},"24":{},"51":{}},"component":{}}],["l",{"_index":2146,"title":{},"name":{},"text":{"48":{}},"component":{}}],["laden",{"_index":527,"title":{},"name":{},"text":{"3":{}},"component":{}}],["larger",{"_index":1162,"title":{},"name":{},"text":{"11":{}},"component":{}}],["largest",{"_index":2436,"title":{},"name":{},"text":{"62":{},"66":{}},"component":{}}],["last",{"_index":1551,"title":{},"name":{},"text":{"33":{},"48":{},"60":{},"65":{}},"component":{}}],["latenc",{"_index":1735,"title":{},"name":{},"text":{"39":{}},"component":{}}],["later",{"_index":724,"title":{},"name":{},"text":{"4":{}},"component":{}}],["latest",{"_index":840,"title":{},"name":{},"text":{"5":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"35":{},"48":{},"67":{},"68":{}},"component":{}}],["layer",{"_index":2,"title":{"2-1":{}},"name":{},"text":{"2":{},"9":{}},"component":{}}],["layout",{"_index":2047,"title":{},"name":{},"text":{"46":{}},"component":{}}],["lead",{"_index":1125,"title":{},"name":{},"text":{"11":{},"49":{}},"component":{}}],["leakag",{"_index":2087,"title":{},"name":{},"text":{"47":{}},"component":{}}],["leav",{"_index":1231,"title":{},"name":{},"text":{"22":{},"23":{},"24":{}},"component":{}}],["left",{"_index":564,"title":{},"name":{},"text":{"4":{},"39":{},"46":{}},"component":{}}],["left[fram",{"_index":688,"title":{},"name":{},"text":{"4":{},"39":{}},"component":{}}],["left[i",{"_index":2063,"title":{},"name":{},"text":{"46":{}},"component":{}}],["left_out",{"_index":1255,"title":{},"name":{},"text":{"22":{},"23":{},"24":{}},"component":{}}],["left_sign",{"_index":1256,"title":{},"name":{},"text":{"22":{},"23":{},"24":{}},"component":{}}],["legato",{"_index":1919,"title":{},"name":{},"text":{"44":{}},"component":{}}],["len",{"_index":1680,"title":{},"name":{},"text":{"38":{}},"component":{}}],["length",{"_index":1674,"title":{},"name":{},"text":{"38":{},"60":{}},"component":{}}],["less",{"_index":143,"title":{},"name":{},"text":{"2":{},"4":{},"26":{},"49":{},"59":{},"62":{},"66":{}},"component":{}}],["letter",{"_index":2020,"title":{},"name":{},"text":{"44":{}},"component":{}}],["level",{"_index":363,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"7":{},"10":{},"11":{},"21":{},"22":{},"23":{},"24":{},"25":{},"29":{},"42":{},"45":{},"47":{},"48":{},"59":{}},"component":{}}],["level(float",{"_index":2143,"title":{},"name":{},"text":{"48":{}},"component":{}}],["leverag",{"_index":444,"title":{},"name":{},"text":{"3":{}},"component":{}}],["lfo",{"_index":1475,"title":{},"name":{},"text":{"31":{}},"component":{}}],["libasound",{"_index":865,"title":{},"name":{},"text":{"5":{}},"component":{}}],["liber",{"_index":467,"title":{},"name":{},"text":{"3":{}},"component":{}}],["librari",{"_index":20,"title":{"3":{}},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"7":{},"8":{},"9":{},"10":{},"11":{},"22":{},"24":{},"43":{},"44":{},"45":{},"47":{},"49":{},"50":{},"51":{},"52":{},"59":{}},"component":{}}],["library’",{"_index":907,"title":{},"name":{},"text":{"6":{}},"component":{}}],["licens",{"_index":420,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"8":{}},"component":{}}],["lightweight",{"_index":51,"title":{},"name":{},"text":{"2":{},"9":{},"37":{},"38":{},"46":{}},"component":{}}],["likewis",{"_index":963,"title":{},"name":{},"text":{"7":{}},"component":{}}],["limit",{"_index":155,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"10":{},"22":{},"53":{},"54":{},"55":{},"57":{},"58":{},"59":{}},"component":{}}],["lin_doubl",{"_index":2374,"title":{},"name":{},"text":{"59":{}},"component":{}}],["lin_double(d",{"_index":2366,"title":{},"name":{},"text":{"59":{}},"component":{}}],["lin_double(decibel",{"_index":2351,"title":{},"name":{},"text":{"59":{}},"component":{}}],["lin_downward_ramp_gen",{"_index":2116,"title":{},"name":{},"text":{"48":{},"52":{}},"component":{}}],["lin_downward_ramp_gen(dur",{"_index":2260,"title":{},"name":{},"text":{"52":{}},"component":{}}],["lin_float",{"_index":2373,"title":{},"name":{},"text":{"59":{}},"component":{}}],["lin_float(config_.sustain_level",{"_index":2190,"title":{},"name":{},"text":{"48":{}},"component":{}}],["lin_float(d",{"_index":2365,"title":{},"name":{},"text":{"59":{}},"component":{}}],["lin_float(decibel",{"_index":2352,"title":{},"name":{},"text":{"59":{}},"component":{}}],["lin_to_db",{"_index":2369,"title":{},"name":{},"text":{"59":{}},"component":{}}],["lin_to_db(2.0",{"_index":2371,"title":{},"name":{},"text":{"59":{}},"component":{}}],["lin_to_db(doubl",{"_index":2354,"title":{},"name":{},"text":{"59":{}},"component":{}}],["lin_to_db(v",{"_index":2367,"title":{},"name":{},"text":{"59":{}},"component":{}}],["lin_upward_ramp_gen",{"_index":2255,"title":{},"name":{},"text":{"52":{}},"component":{}}],["lin_upward_ramp_gen(dur",{"_index":2259,"title":{},"name":{},"text":{"52":{}},"component":{}}],["line",{"_index":875,"title":{},"name":{},"text":{"5":{},"31":{},"52":{}},"component":{}}],["linear",{"_index":508,"title":{"52":{}},"name":{},"text":{"3":{},"7":{},"26":{},"28":{},"48":{},"49":{},"52":{},"59":{}},"component":{}}],["linear_gen",{"_index":2115,"title":{},"name":{"52":{}},"text":{"48":{}},"component":{}}],["linearli",{"_index":2256,"title":{},"name":{},"text":{"52":{}},"component":{}}],["linux",{"_index":825,"title":{"5-8":{}},"name":{},"text":{"5":{}},"component":{}}],["list",{"_index":116,"title":{},"name":{},"text":{"2":{},"4":{},"37":{}},"component":{}}],["list_devices.cpp",{"_index":885,"title":{},"name":{},"text":{"5":{}},"component":{}}],["liter",{"_index":9,"title":{"2-6":{},"59-8":{},"60-7":{},"61-8":{}},"name":{},"text":{"2":{},"4":{},"59":{},"60":{},"61":{}},"component":{}}],["literals.hpp",{"_index":265,"title":{},"name":{},"text":{"2":{}},"component":{}}],["littl",{"_index":1815,"title":{},"name":{},"text":{"44":{}},"component":{}}],["load",{"_index":560,"title":{},"name":{},"text":{"4":{},"39":{}},"component":{}}],["lobe",{"_index":2089,"title":{},"name":{},"text":{"47":{},"50":{}},"component":{}}],["local",{"_index":1989,"title":{},"name":{},"text":{"44":{}},"component":{}}],["locat",{"_index":1537,"title":{},"name":{},"text":{"32":{},"33":{},"46":{}},"component":{}}],["log10(out/in",{"_index":2339,"title":{},"name":{},"text":{"59":{}},"component":{}}],["log2",{"_index":2502,"title":{},"name":{},"text":{"66":{}},"component":{}}],["logarithm",{"_index":162,"title":{},"name":{},"text":{"2":{},"7":{},"11":{},"21":{},"22":{},"23":{},"24":{},"59":{}},"component":{}}],["logic",{"_index":1534,"title":{},"name":{},"text":{"32":{},"33":{},"64":{}},"component":{}}],["long",{"_index":291,"title":{},"name":{},"text":{"2":{},"33":{},"48":{},"59":{},"60":{},"61":{},"68":{}},"component":{}}],["longer",{"_index":1302,"title":{},"name":{},"text":{"25":{},"26":{},"27":{},"31":{},"66":{}},"component":{}}],["look",{"_index":1422,"title":{},"name":{},"text":{"28":{}},"component":{}}],["lookup",{"_index":2319,"title":{},"name":{},"text":{"56":{},"59":{}},"component":{}}],["loop",{"_index":586,"title":{},"name":{},"text":{"4":{},"43":{},"46":{}},"component":{}}],["loos",{"_index":59,"title":{},"name":{},"text":{"2":{}},"component":{}}],["lot",{"_index":701,"title":{},"name":{},"text":{"4":{}},"component":{}}],["loud",{"_index":973,"title":{},"name":{},"text":{"8":{}},"component":{}}],["loudest",{"_index":928,"title":{},"name":{},"text":{"7":{}},"component":{}}],["love",{"_index":521,"title":{},"name":{},"text":{"3":{}},"component":{}}],["low",{"_index":476,"title":{"17":{},"18":{},"35":{}},"name":{},"text":{"3":{},"4":{},"6":{},"17":{},"18":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"29":{},"31":{},"32":{},"35":{},"45":{},"55":{},"56":{}},"component":{}}],["lower",{"_index":1821,"title":{},"name":{},"text":{"44":{},"47":{},"49":{}},"component":{}}],["lowest",{"_index":1369,"title":{},"name":{},"text":{"26":{},"27":{},"30":{}},"component":{}}],["lowpass",{"_index":917,"title":{},"name":{"17":{}},"text":{"6":{},"17":{}},"component":{}}],["lowpass(f",{"_index":1195,"title":{},"name":{},"text":{"17":{}},"component":{}}],["lowpass(frequ",{"_index":1193,"title":{},"name":{},"text":{"17":{}},"component":{}}],["lowshelf",{"_index":921,"title":{},"name":{"18":{}},"text":{"6":{},"18":{}},"component":{}}],["lowshelf(doubl",{"_index":1197,"title":{},"name":{},"text":{"18":{}},"component":{}}],["lowshelf(g",{"_index":1199,"title":{},"name":{},"text":{"18":{}},"component":{}}],["lp",{"_index":1194,"title":{},"name":{},"text":{"17":{},"35":{}},"component":{}}],["lp(",{"_index":231,"title":{},"name":{},"text":{"2":{},"35":{}},"component":{}}],["lp.config(f",{"_index":1196,"title":{},"name":{},"text":{"17":{}},"component":{}}],["lp.cutoff(f",{"_index":1617,"title":{},"name":{},"text":{"35":{}},"component":{}}],["ls",{"_index":1198,"title":{},"name":{},"text":{"18":{}},"component":{}}],["ls.config(g",{"_index":1200,"title":{},"name":{},"text":{"18":{}},"component":{}}],["lsb",{"_index":2007,"title":{},"name":{},"text":{"44":{}},"component":{}}],["ma",{"_index":1545,"title":{},"name":{},"text":{"32":{}},"component":{}}],["ma(",{"_index":1547,"title":{},"name":{},"text":{"32":{}},"component":{}}],["ma_type::value_typ",{"_index":1546,"title":{},"name":{},"text":{"32":{}},"component":{}}],["mac",{"_index":832,"title":{},"name":{},"text":{"5":{}},"component":{}}],["macbook",{"_index":644,"title":{},"name":{},"text":{"4":{}},"component":{}}],["mackie/hui",{"_index":638,"title":{},"name":{},"text":{"4":{}},"component":{}}],["maco",{"_index":623,"title":{"5-6":{}},"name":{},"text":{"4":{},"5":{}},"component":{}}],["made",{"_index":1045,"title":{},"name":{},"text":{"10":{},"65":{}},"component":{}}],["magenta",{"_index":1321,"title":{},"name":{},"text":{"25":{}},"component":{}}],["main",{"_index":555,"title":{"4-8":{}},"name":{},"text":{"4":{},"6":{},"37":{},"47":{}},"component":{}}],["maintain",{"_index":711,"title":{},"name":{},"text":{"4":{},"7":{},"21":{},"39":{},"68":{}},"component":{}}],["major",{"_index":910,"title":{},"name":{},"text":{"6":{}},"component":{}}],["make",{"_index":141,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"7":{},"10":{},"21":{},"22":{},"23":{},"24":{},"28":{},"35":{},"39":{},"48":{},"58":{},"59":{},"66":{}},"component":{}}],["make_envelope_seg",{"_index":2139,"title":{},"name":{},"text":{"48":{}},"component":{}}],["make_envelope_segment(10_m",{"_index":2148,"title":{},"name":{},"text":{"48":{}},"component":{}}],["make_envelope_segment(dur",{"_index":2145,"title":{},"name":{},"text":{"48":{}},"component":{}}],["makefil",{"_index":869,"title":{},"name":{},"text":{"5":{}},"component":{}}],["makeup",{"_index":380,"title":{},"name":{},"text":{"2":{},"22":{},"24":{}},"component":{}}],["manag",{"_index":709,"title":{},"name":{},"text":{"4":{},"31":{}},"component":{}}],["mani",{"_index":1611,"title":{},"name":{},"text":{"35":{},"51":{}},"component":{}}],["manipul",{"_index":925,"title":{},"name":{},"text":{"7":{}},"component":{}}],["mark",{"_index":2362,"title":{},"name":{},"text":{"59":{}},"component":{}}],["math",{"_index":2346,"title":{},"name":{},"text":{"59":{},"66":{}},"component":{}}],["mathemat",{"_index":2454,"title":{},"name":{},"text":{"64":{}},"component":{}}],["max",{"_index":1218,"title":{},"name":{},"text":{"21":{}},"component":{}}],["max(decibel",{"_index":1220,"title":{},"name":{},"text":{"21":{}},"component":{}}],["max_",{"_index":1221,"title":{},"name":{},"text":{"21":{}},"component":{}}],["max_delay",{"_index":1496,"title":{},"name":{},"text":{"31":{}},"component":{}}],["max_siz",{"_index":1554,"title":{},"name":{},"text":{"33":{}},"component":{}}],["maximum",{"_index":1223,"title":{},"name":{},"text":{"21":{},"27":{},"29":{},"31":{},"37":{},"39":{},"46":{},"48":{},"64":{}},"component":{}}],["mb",{"_index":2077,"title":{},"name":{},"text":{"46":{}},"component":{}}],["mb.channel",{"_index":2055,"title":{},"name":{},"text":{"46":{}},"component":{}}],["mb.frame",{"_index":2056,"title":{},"name":{},"text":{"46":{}},"component":{}}],["mb.size",{"_index":2052,"title":{},"name":{},"text":{"46":{}},"component":{}}],["mb::buffer_view",{"_index":2079,"title":{},"name":{},"text":{"46":{}},"component":{}}],["mb::channel_view",{"_index":2080,"title":{},"name":{},"text":{"46":{}},"component":{}}],["mb::channels_view",{"_index":2083,"title":{},"name":{},"text":{"46":{}},"component":{}}],["mb::frames_view",{"_index":2081,"title":{},"name":{},"text":{"46":{}},"component":{}}],["mb::sample_typ",{"_index":2078,"title":{},"name":{},"text":{"46":{}},"component":{}}],["mb[0",{"_index":2060,"title":{},"name":{},"text":{"46":{}},"component":{}}],["mb[1",{"_index":2061,"title":{},"name":{},"text":{"46":{}},"component":{}}],["mb[ch",{"_index":2064,"title":{},"name":{},"text":{"46":{}},"component":{}}],["mb[ch].size",{"_index":2053,"title":{},"name":{},"text":{"46":{}},"component":{}}],["mb[ch][i",{"_index":2051,"title":{},"name":{},"text":{"46":{}},"component":{}}],["mb[i",{"_index":2082,"title":{},"name":{},"text":{"46":{}},"component":{}}],["mcu",{"_index":2320,"title":{},"name":{},"text":{"56":{}},"component":{}}],["mean",{"_index":752,"title":{},"name":{},"text":{"4":{},"11":{},"26":{},"28":{},"65":{}},"component":{}}],["meaning",{"_index":1795,"title":{},"name":{},"text":{"44":{}},"component":{}}],["meant",{"_index":1756,"title":{},"name":{},"text":{"42":{},"46":{}},"component":{}}],["measur",{"_index":2336,"title":{},"name":{},"text":{"59":{},"60":{},"61":{},"62":{},"64":{},"66":{}},"component":{}}],["mechan",{"_index":79,"title":{},"name":{},"text":{"2":{},"8":{},"9":{},"38":{}},"component":{}}],["melodi",{"_index":2415,"title":{},"name":{},"text":{"62":{}},"component":{}}],["member",{"_index":392,"title":{},"name":{},"text":{"2":{},"4":{},"10":{},"26":{},"28":{},"32":{},"36":{},"39":{},"42":{},"43":{},"46":{},"48":{},"63":{},"65":{},"67":{}},"component":{}}],["memori",{"_index":756,"title":{},"name":{},"text":{"4":{},"46":{},"56":{}},"component":{}}],["messag",{"_index":515,"title":{"44":{},"44-4":{},"44-5":{},"44-7":{}},"name":{},"text":{"3":{},"4":{},"9":{},"39":{},"44":{},"45":{}},"component":{}}],["message1",{"_index":1807,"title":{},"name":{},"text":{"44":{}},"component":{}}],["message1(raw_messag",{"_index":1808,"title":{},"name":{},"text":{"44":{}},"component":{}}],["message1::message1",{"_index":2013,"title":{},"name":{},"text":{"44":{}},"component":{}}],["message2",{"_index":1809,"title":{},"name":{},"text":{"44":{}},"component":{}}],["message2(raw_messag",{"_index":1810,"title":{},"name":{},"text":{"44":{}},"component":{}}],["message2::message2",{"_index":2001,"title":{},"name":{},"text":{"44":{}},"component":{}}],["message3",{"_index":1811,"title":{},"name":{},"text":{"44":{}},"component":{}}],["message3(raw_messag",{"_index":1812,"title":{},"name":{},"text":{"44":{}},"component":{}}],["message3::message3",{"_index":1844,"title":{},"name":{},"text":{"44":{}},"component":{}}],["message_bas",{"_index":1804,"title":{},"name":{},"text":{"44":{},"45":{}},"component":{}}],["meteorologist",{"_index":2242,"title":{},"name":{},"text":{"51":{}},"component":{}}],["meter",{"_index":1763,"title":{},"name":{},"text":{"42":{}},"component":{}}],["method",{"_index":984,"title":{},"name":{},"text":{"8":{}},"component":{}}],["mhz",{"_index":2408,"title":{},"name":{},"text":{"61":{}},"component":{}}],["microconrrol",{"_index":2321,"title":{},"name":{},"text":{"56":{}},"component":{}}],["microcontrol",{"_index":443,"title":{},"name":{},"text":{"3":{}},"component":{}}],["microphon",{"_index":646,"title":{},"name":{},"text":{"4":{}},"component":{}}],["microsecond",{"_index":2390,"title":{},"name":{},"text":{"60":{}},"component":{}}],["microton",{"_index":2428,"title":{},"name":{},"text":{"62":{}},"component":{}}],["middl",{"_index":732,"title":{},"name":{},"text":{"4":{},"47":{},"50":{},"51":{},"64":{},"65":{}},"component":{}}],["midi",{"_index":36,"title":{"9":{},"44":{},"45":{},"4-7":{},"44-4":{},"44-5":{},"44-6":{},"44-7":{}},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"9":{},"44":{},"45":{},"66":{}},"component":{}}],["midi::note_frequency(_key",{"_index":777,"title":{},"name":{},"text":{"4":{}},"component":{}}],["midi::processor",{"_index":767,"title":{},"name":{},"text":{"4":{},"45":{}},"component":{}}],["midi::processor::oper",{"_index":768,"title":{},"name":{},"text":{"4":{},"45":{}},"component":{}}],["midi_1_0",{"_index":1802,"title":{},"name":{},"text":{"44":{},"45":{}},"component":{}}],["midi_devic",{"_index":1022,"title":{"40":{}},"name":{"40":{}},"text":{"9":{}},"component":{}}],["midi_input_stream",{"_index":807,"title":{},"name":{},"text":{"4":{}},"component":{}}],["midi_messag",{"_index":1794,"title":{},"name":{"44":{}},"text":{},"component":{}}],["midi_processor",{"_index":757,"title":{},"name":{"45":{}},"text":{"4":{}},"component":{}}],["midi_stream",{"_index":1024,"title":{"41":{}},"name":{"41":{}},"text":{"9":{}},"component":{}}],["midikey",{"_index":622,"title":{},"name":{},"text":{"4":{}},"component":{}}],["midpoint",{"_index":2100,"title":{},"name":{},"text":{"47":{},"50":{},"51":{},"55":{}},"component":{}}],["millisecond",{"_index":194,"title":{},"name":{},"text":{"2":{},"25":{},"45":{},"60":{}},"component":{}}],["minim",{"_index":56,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"9":{},"50":{}},"component":{}}],["minimum",{"_index":1366,"title":{},"name":{},"text":{"26":{},"27":{},"64":{},"68":{}},"component":{}}],["misc",{"_index":2395,"title":{"61-7":{}},"name":{},"text":{},"component":{}}],["miscellan",{"_index":490,"title":{},"name":{},"text":{"3":{}},"component":{}}],["mismatch",{"_index":215,"title":{},"name":{},"text":{"2":{},"4":{},"11":{}},"component":{}}],["mistak",{"_index":219,"title":{},"name":{},"text":{"2":{}},"component":{}}],["mistakenli",{"_index":1122,"title":{},"name":{},"text":{"11":{}},"component":{}}],["mit",{"_index":419,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"8":{}},"component":{}}],["mix",{"_index":579,"title":{},"name":{},"text":{"4":{},"11":{},"46":{},"50":{}},"component":{}}],["mixer",{"_index":2067,"title":{},"name":{},"text":{"46":{}},"component":{}}],["mkdir",{"_index":852,"title":{},"name":{},"text":{"5":{}},"component":{}}],["model",{"_index":1112,"title":{"11-13":{}},"name":{},"text":{"25":{},"29":{},"43":{},"46":{},"47":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"61":{},"62":{},"63":{},"64":{}},"component":{}}],["moder",{"_index":2230,"title":{},"name":{},"text":{"50":{}},"component":{}}],["modern",{"_index":445,"title":{},"name":{},"text":{"3":{},"4":{},"6":{}},"component":{}}],["modifi",{"_index":2203,"title":{"65-9":{}},"name":{},"text":{"48":{},"65":{}},"component":{}}],["modul",{"_index":111,"title":{},"name":{},"text":{"2":{},"8":{},"10":{},"22":{},"23":{},"24":{},"27":{},"29":{},"31":{},"44":{},"47":{},"50":{},"51":{},"56":{}},"component":{}}],["modulation_lsb",{"_index":1882,"title":{},"name":{},"text":{"44":{}},"component":{}}],["mold",{"_index":1037,"title":{},"name":{},"text":{"10":{}},"component":{}}],["moment",{"_index":971,"title":{},"name":{},"text":{"8":{}},"component":{}}],["mono",{"_index":1742,"title":{},"name":{},"text":{"39":{},"44":{},"46":{}},"component":{}}],["mono_in",{"_index":1748,"title":{},"name":{},"text":{"39":{}},"component":{}}],["mono_in[fram",{"_index":1750,"title":{},"name":{},"text":{"39":{}},"component":{}}],["monophon",{"_index":659,"title":{},"name":{},"text":{"4":{},"48":{}},"component":{}}],["monoton",{"_index":1725,"title":{},"name":{},"text":{"39":{}},"component":{}}],["more",{"_index":210,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"7":{},"8":{},"9":{},"10":{},"24":{},"27":{},"30":{},"37":{},"38":{},"39":{},"44":{},"49":{}},"component":{}}],["moreov",{"_index":1070,"title":{},"name":{},"text":{"10":{}},"component":{}}],["move",{"_index":492,"title":{"32":{},"33":{}},"name":{},"text":{"3":{},"4":{},"26":{},"28":{},"32":{},"33":{},"36":{},"38":{},"48":{}},"component":{}}],["movement",{"_index":2447,"title":{},"name":{},"text":{"64":{}},"component":{}}],["moving_averag",{"_index":1516,"title":{},"name":{"32":{}},"text":{"32":{}},"component":{}}],["moving_sum",{"_index":1539,"title":{},"name":{"33":{}},"text":{"32":{},"33":{}},"component":{}}],["ms",{"_index":1372,"title":{},"name":{},"text":{"26":{},"27":{},"33":{},"48":{}},"component":{}}],["ms(",{"_index":1566,"title":{},"name":{},"text":{"33":{}},"component":{}}],["ms.clear",{"_index":1575,"title":{},"name":{},"text":{"33":{}},"component":{}}],["ms.fill(val",{"_index":1576,"title":{},"name":{},"text":{"33":{}},"component":{}}],["ms.resize(d",{"_index":1574,"title":{},"name":{},"text":{"33":{}},"component":{}}],["ms.resize(s",{"_index":1569,"title":{},"name":{},"text":{"33":{}},"component":{}}],["ms.size",{"_index":1568,"title":{},"name":{},"text":{"33":{}},"component":{}}],["ms.sum",{"_index":1567,"title":{},"name":{},"text":{"33":{}},"component":{}}],["ms_type",{"_index":1561,"title":{},"name":{},"text":{"33":{}},"component":{}}],["ms_type(d",{"_index":1564,"title":{},"name":{},"text":{"33":{}},"component":{}}],["ms_type(m",{"_index":1565,"title":{},"name":{},"text":{"33":{}},"component":{}}],["ms_type(s",{"_index":1563,"title":{},"name":{},"text":{"33":{}},"component":{}}],["ms_type::value_typ",{"_index":1562,"title":{},"name":{},"text":{"33":{}},"component":{}}],["msb",{"_index":2008,"title":{},"name":{},"text":{"44":{}},"component":{}}],["msg",{"_index":772,"title":{},"name":{},"text":{"4":{},"44":{},"45":{}},"component":{}}],["msg.key",{"_index":775,"title":{},"name":{},"text":{"4":{}},"component":{}}],["much",{"_index":567,"title":{},"name":{},"text":{"4":{},"29":{}},"component":{}}],["multi",{"_index":512,"title":{"46":{}},"name":{},"text":{"3":{},"7":{},"31":{},"42":{},"46":{},"48":{}},"component":{}}],["multi_buff",{"_index":1755,"title":{},"name":{"46":{}},"text":{"42":{},"46":{}},"component":{}}],["multichannel",{"_index":1702,"title":{},"name":{},"text":{"39":{},"42":{}},"component":{}}],["multipl",{"_index":390,"title":{},"name":{},"text":{"2":{},"5":{},"7":{},"11":{},"31":{},"48":{}},"component":{}}],["multipli",{"_index":948,"title":{},"name":{},"text":{"7":{},"11":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{}},"component":{}}],["music",{"_index":309,"title":{},"name":{},"text":{"2":{},"3":{},"8":{},"10":{},"44":{},"62":{}},"component":{}}],["mutat",{"_index":1034,"title":{"10-29":{},"12-7":{},"13-7":{},"14-7":{},"15-7":{},"16-7":{},"17-7":{},"18-7":{},"19-7":{},"20-7":{},"21-8":{},"22-8":{},"23-8":{},"24-8":{},"25-9":{},"29-10":{},"30-8":{},"33-11":{},"34-8":{},"35-8":{},"38-14":{},"38-21":{},"39-8":{},"47-7":{},"48-11":{},"48-25":{},"49-7":{},"50-7":{},"51-7":{},"53-7":{},"55-8":{},"65-8":{},"68-10":{}},"name":{},"text":{},"component":{}}],["mute",{"_index":1583,"title":{},"name":{},"text":{"34":{}},"component":{}}],["my_delay_type1",{"_index":1503,"title":{},"name":{},"text":{"31":{}},"component":{}}],["my_delay_type2",{"_index":1504,"title":{},"name":{},"text":{"31":{}},"component":{}}],["my_env_t",{"_index":1382,"title":{},"name":{},"text":{"26":{},"27":{}},"component":{}}],["my_midi_processor",{"_index":766,"title":{},"name":{},"text":{"4":{},"45":{}},"component":{}}],["my_midi_processor(my_square_synth",{"_index":769,"title":{},"name":{},"text":{"4":{}},"component":{}}],["my_processor",{"_index":1744,"title":{},"name":{},"text":{"39":{}},"component":{}}],["my_square_synth",{"_index":667,"title":{},"name":{},"text":{"4":{}},"component":{}}],["my_square_synth(q::adsr_envelope_gen::config",{"_index":669,"title":{},"name":{},"text":{"4":{}},"component":{}}],["my_square_synth’",{"_index":761,"title":{},"name":{},"text":{"4":{}},"component":{}}],["n",{"_index":1251,"title":{},"name":{},"text":{"22":{},"23":{},"24":{},"27":{},"32":{},"39":{},"42":{},"46":{},"66":{}},"component":{}}],["n:1",{"_index":1244,"title":{},"name":{},"text":{"22":{},"24":{}},"component":{}}],["n=16",{"_index":1529,"title":{},"name":{},"text":{"32":{}},"component":{}}],["name",{"_index":427,"title":{"44-24":{}},"name":{},"text":{"3":{},"4":{},"8":{},"9":{},"21":{},"22":{},"23":{},"24":{},"37":{},"47":{},"50":{},"51":{}},"component":{}}],["namespac",{"_index":6,"title":{"2-4":{},"44-3":{},"45-3":{}},"name":{},"text":{"2":{},"10":{},"11":{},"37":{},"43":{},"44":{},"45":{},"59":{},"60":{},"61":{}},"component":{}}],["natur",{"_index":1287,"title":{},"name":{},"text":{"24":{},"48":{}},"component":{}}],["nearest",{"_index":2232,"title":{},"name":{},"text":{"50":{},"62":{},"66":{}},"component":{}}],["necessari",{"_index":462,"title":{},"name":{},"text":{"3":{},"25":{},"27":{},"29":{},"46":{}},"component":{}}],["need",{"_index":268,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"22":{},"25":{},"26":{},"27":{},"29":{},"31":{},"37":{},"46":{},"54":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"64":{}},"component":{}}],["neg",{"_index":1151,"title":{},"name":{},"text":{"11":{},"25":{},"27":{},"29":{}},"component":{}}],["new",{"_index":1513,"title":{},"name":{},"text":{"31":{},"32":{},"33":{},"48":{},"65":{},"68":{}},"component":{}}],["newest",{"_index":1535,"title":{},"name":{},"text":{"32":{},"33":{}},"component":{}}],["next",{"_index":1437,"title":{},"name":{},"text":{"29":{},"39":{},"48":{},"64":{},"65":{},"68":{}},"component":{}}],["nf",{"_index":1202,"title":{},"name":{},"text":{"19":{}},"component":{}}],["nf.config(f",{"_index":1204,"title":{},"name":{},"text":{"19":{}},"component":{}}],["nf_delay",{"_index":1499,"title":{},"name":{},"text":{"31":{}},"component":{}}],["nibbl",{"_index":1818,"title":{},"name":{},"text":{"44":{}},"component":{}}],["nois",{"_index":376,"title":{"34":{}},"name":{},"text":{"2":{},"3":{},"7":{},"8":{},"23":{},"29":{},"32":{},"34":{},"35":{},"50":{}},"component":{}}],["noise_g",{"_index":1582,"title":{},"name":{"34":{}},"text":{"34":{},"36":{}},"component":{}}],["noise_gate(b",{"_index":1601,"title":{},"name":{},"text":{"34":{}},"component":{}}],["noise_gate(decibel",{"_index":1590,"title":{},"name":{},"text":{"34":{}},"component":{}}],["noise_gate(ot",{"_index":1600,"title":{},"name":{},"text":{"34":{}},"component":{}}],["noise_gate(rt",{"_index":1599,"title":{},"name":{},"text":{"34":{}},"component":{}}],["noise_gate::oper",{"_index":1622,"title":{},"name":{},"text":{"36":{}},"component":{}}],["non",{"_index":255,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"10":{},"11":{},"31":{},"35":{},"38":{},"39":{},"46":{},"50":{},"59":{},"62":{},"66":{}},"component":{}}],["non_copy",{"_index":1753,"title":{},"name":{},"text":{"42":{}},"component":{}}],["nonintuit",{"_index":2358,"title":{},"name":{},"text":{"59":{}},"component":{}}],["nonrpn_lsb",{"_index":1978,"title":{},"name":{},"text":{"44":{}},"component":{}}],["nonrpn_msb",{"_index":1980,"title":{},"name":{},"text":{"44":{}},"component":{}}],["normal",{"_index":151,"title":{},"name":{},"text":{"2":{},"4":{},"22":{},"23":{},"24":{},"48":{}},"component":{}}],["notat",{"_index":887,"title":{"6-6":{},"10-5":{},"10-11":{},"10-16":{},"10-21":{},"10-27":{},"11-4":{},"12-5":{},"13-5":{},"14-5":{},"15-5":{},"16-5":{},"17-5":{},"18-5":{},"19-5":{},"20-5":{},"21-5":{},"22-5":{},"23-5":{},"24-5":{},"25-6":{},"26-6":{},"27-8":{},"28-6":{},"29-7":{},"30-5":{},"31-5":{},"32-5":{},"33-5":{},"34-5":{},"35-5":{},"36-5":{},"37-5":{},"38-6":{},"38-12":{},"38-19":{},"39-5":{},"45-6":{},"46-6":{},"47-5":{},"48-7":{},"48-16":{},"49-5":{},"50-5":{},"51-5":{},"53-5":{},"55-5":{},"59-5":{},"60-5":{},"61-5":{},"62-6":{},"63-5":{},"64-5":{},"65-5":{},"66-5":{},"67-5":{},"68-5":{}},"name":{},"text":{"22":{},"23":{},"24":{},"26":{},"27":{},"28":{}},"component":{}}],["notch",{"_index":481,"title":{"19":{}},"name":{"19":{}},"text":{"3":{},"6":{},"19":{}},"component":{}}],["notch(f",{"_index":1203,"title":{},"name":{},"text":{"19":{}},"component":{}}],["notch(frequ",{"_index":1201,"title":{},"name":{},"text":{"19":{}},"component":{}}],["note",{"_index":389,"title":{"4-3":{},"44-24":{},"44-25":{}},"name":{},"text":{"2":{},"4":{},"8":{},"25":{},"27":{},"29":{},"34":{},"39":{},"44":{},"45":{},"46":{},"48":{},"59":{},"60":{},"61":{},"66":{}},"component":{}}],["note_nam",{"_index":2014,"title":{},"name":{},"text":{"44":{}},"component":{}}],["note_name(60",{"_index":2016,"title":{},"name":{},"text":{"44":{}},"component":{}}],["note_name(std::uint8_t",{"_index":2015,"title":{},"name":{},"text":{"44":{}},"component":{}}],["note_numb",{"_index":2018,"title":{},"name":{},"text":{"44":{}},"component":{}}],["note_number(\"c4",{"_index":2022,"title":{},"name":{},"text":{"44":{}},"component":{}}],["note_number(std::string_view",{"_index":2019,"title":{},"name":{},"text":{"44":{}},"component":{}}],["note_off",{"_index":1781,"title":{"44-8":{}},"name":{},"text":{"44":{},"45":{}},"component":{}}],["note_off(std::uint8_t",{"_index":1845,"title":{},"name":{},"text":{"44":{}},"component":{}}],["note_on",{"_index":1782,"title":{"44-9":{}},"name":{},"text":{"44":{},"45":{}},"component":{}}],["note_on(std::uint8_t",{"_index":1846,"title":{},"name":{},"text":{"44":{}},"component":{}}],["noth",{"_index":2032,"title":{},"name":{},"text":{"45":{}},"component":{}}],["notic",{"_index":703,"title":{},"name":{},"text":{"4":{}},"component":{}}],["now",{"_index":715,"title":{},"name":{},"text":{"4":{},"10":{}},"component":{}}],["num_channel",{"_index":1661,"title":{},"name":{},"text":{"38":{}},"component":{}}],["number",{"_index":540,"title":{"44-25":{}},"name":{},"text":{"3":{},"9":{},"27":{},"31":{},"33":{},"35":{},"37":{},"38":{},"39":{},"44":{},"46":{},"59":{},"60":{},"61":{},"62":{},"64":{}},"component":{}}],["numer",{"_index":2375,"title":{},"name":{},"text":{"59":{},"60":{},"61":{},"66":{}},"component":{}}],["nyquist",{"_index":1078,"title":{},"name":{},"text":{"10":{},"53":{},"54":{},"57":{},"58":{}},"component":{}}],["n−1)/2",{"_index":1533,"title":{},"name":{},"text":{"32":{}},"component":{}}],["o",{"_index":1062,"title":{},"name":{},"text":{"10":{},"30":{}},"component":{}}],["o(ph",{"_index":1073,"title":{},"name":{},"text":{"10":{}},"component":{}}],["o(pi",{"_index":1064,"title":{},"name":{},"text":{"10":{}},"component":{}}],["object",{"_index":16,"title":{"2-12":{}},"name":{},"text":{"2":{},"3":{},"4":{},"6":{},"7":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"53":{},"55":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{}},"component":{}}],["obtain",{"_index":1228,"title":{},"name":{},"text":{"21":{},"22":{},"23":{},"24":{},"25":{},"27":{},"29":{},"37":{},"45":{},"46":{}},"component":{}}],["oc",{"_index":1713,"title":{},"name":{},"text":{"39":{}},"component":{}}],["occur",{"_index":2137,"title":{},"name":{},"text":{"48":{},"53":{},"54":{},"57":{},"58":{}},"component":{}}],["octav",{"_index":1172,"title":{},"name":{},"text":{"13":{},"14":{},"19":{},"20":{},"66":{}},"component":{}}],["offer",{"_index":1021,"title":{},"name":{},"text":{"9":{},"10":{},"38":{},"48":{}},"component":{}}],["offset",{"_index":1448,"title":{},"name":{},"text":{"30":{}},"component":{}}],["offshoot",{"_index":1006,"title":{},"name":{},"text":{"8":{}},"component":{}}],["ok",{"_index":879,"title":{},"name":{},"text":{"5":{}},"component":{}}],["older",{"_index":1580,"title":{},"name":{},"text":{"33":{}},"component":{}}],["oldest",{"_index":1536,"title":{},"name":{},"text":{"32":{},"33":{},"67":{},"68":{}},"component":{}}],["omni_off",{"_index":1993,"title":{},"name":{},"text":{"44":{}},"component":{}}],["omni_on",{"_index":1995,"title":{},"name":{},"text":{"44":{}},"component":{}}],["on",{"_index":207,"title":{"35":{}},"name":{},"text":{"2":{},"3":{},"4":{},"9":{},"10":{},"25":{},"26":{},"27":{},"32":{},"33":{},"35":{},"37":{},"38":{},"42":{},"44":{},"48":{},"51":{},"56":{},"59":{},"63":{}},"component":{}}],["one_pole_lowpass",{"_index":1607,"title":{},"name":{"35":{}},"text":{"35":{}},"component":{}}],["one_pole_lowpass(b",{"_index":1616,"title":{},"name":{},"text":{"35":{}},"component":{}}],["one_pole_lowpass(f",{"_index":1615,"title":{},"name":{},"text":{"35":{}},"component":{}}],["one_pole_lowpass(frequ",{"_index":1613,"title":{},"name":{},"text":{"35":{}},"component":{}}],["onscreen",{"_index":621,"title":{},"name":{},"text":{"4":{}},"component":{}}],["onset",{"_index":494,"title":{"36":{}},"name":{},"text":{"3":{},"8":{},"34":{},"36":{}},"component":{}}],["onset_g",{"_index":402,"title":{},"name":{"36":{}},"text":{"2":{},"36":{}},"component":{}}],["onset_gate(ot",{"_index":1624,"title":{},"name":{},"text":{"36":{}},"component":{}}],["onset_threshold",{"_index":1591,"title":{},"name":{},"text":{"34":{},"36":{}},"component":{}}],["onset_threshold(decibel",{"_index":1593,"title":{},"name":{},"text":{"34":{}},"component":{}}],["onset_threshold(float",{"_index":1594,"title":{},"name":{},"text":{"34":{}},"component":{}}],["op",{"_index":2034,"title":{},"name":{},"text":{"45":{}},"component":{}}],["open",{"_index":465,"title":{},"name":{},"text":{"3":{},"9":{},"34":{},"39":{}},"component":{}}],["oper",{"_index":67,"title":{"48-18":{}},"name":{},"text":{"2":{},"6":{},"7":{},"9":{},"11":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"38":{},"39":{},"43":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"55":{},"59":{},"60":{},"61":{},"65":{},"66":{},"67":{},"68":{}},"component":{}}],["operand",{"_index":1161,"title":{},"name":{},"text":{"11":{}},"component":{}}],["operator()(decibel",{"_index":1219,"title":{},"name":{},"text":{"21":{},"22":{},"23":{},"24":{}},"component":{}}],["operator()(float",{"_index":354,"title":{},"name":{},"text":{"2":{},"6":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"34":{},"35":{},"36":{}},"component":{}}],["operator()(index_typ",{"_index":1497,"title":{},"name":{},"text":{"31":{}},"component":{}}],["operator()(message_bas",{"_index":2033,"title":{},"name":{},"text":{"45":{}},"component":{}}],["operator()(midi::note_off",{"_index":784,"title":{},"name":{},"text":{"4":{},"45":{}},"component":{}}],["operator()(midi::note_on",{"_index":771,"title":{},"name":{},"text":{"4":{},"45":{}},"component":{}}],["operator()(phas",{"_index":729,"title":{},"name":{},"text":{"4":{},"53":{},"54":{},"56":{},"57":{},"58":{}},"component":{}}],["operator()(phase_iter",{"_index":740,"title":{},"name":{},"text":{"4":{},"53":{},"54":{},"56":{},"57":{},"58":{}},"component":{}}],["operator()(t",{"_index":1543,"title":{},"name":{},"text":{"32":{}},"component":{}}],["operator()(value_typ",{"_index":1498,"title":{},"name":{},"text":{"31":{},"33":{}},"component":{}}],["operator+(pitch",{"_index":2515,"title":{},"name":{},"text":{"66":{}},"component":{}}],["operator++(int",{"_index":2477,"title":{},"name":{},"text":{"65":{}},"component":{}}],["operator+=(pitch",{"_index":2508,"title":{},"name":{},"text":{"66":{}},"component":{}}],["operator=(bool",{"_index":1614,"title":{},"name":{},"text":{"35":{}},"component":{}}],["operator=(envelope_seg",{"_index":2142,"title":{},"name":{},"text":{"48":{}},"component":{}}],["operator=(float",{"_index":1334,"title":{},"name":{},"text":{"25":{},"29":{},"30":{}},"component":{}}],["operator=(phas",{"_index":2478,"title":{},"name":{},"text":{"65":{}},"component":{}}],["operator=(phase_iter",{"_index":2480,"title":{},"name":{},"text":{"65":{}},"component":{}}],["operator=(ring_buff",{"_index":2548,"title":{},"name":{},"text":{"68":{}},"component":{}}],["operator=(wav_bas",{"_index":1659,"title":{},"name":{},"text":{"38":{}},"component":{}}],["operator[](index",{"_index":2527,"title":{},"name":{},"text":{"67":{}},"component":{}}],["operator[](std::size_t",{"_index":2074,"title":{},"name":{},"text":{"46":{},"68":{}},"component":{}}],["optim",{"_index":1417,"title":{},"name":{},"text":{"28":{},"32":{},"39":{},"50":{},"55":{},"56":{}},"component":{}}],["option",{"_index":45,"title":{},"name":{},"text":{"2":{},"9":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"33":{},"39":{},"44":{},"49":{},"67":{},"68":{}},"component":{}}],["orang",{"_index":1430,"title":{},"name":{},"text":{"29":{}},"component":{}}],["order",{"_index":616,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"59":{},"68":{}},"component":{}}],["organ",{"_index":87,"title":{},"name":{},"text":{"2":{}},"component":{}}],["origin",{"_index":1463,"title":{},"name":{},"text":{"31":{},"33":{},"39":{}},"component":{}}],["oscal",{"_index":2294,"title":{},"name":{},"text":{"55":{}},"component":{}}],["oscil",{"_index":180,"title":{"10":{},"53":{},"54":{},"56":{},"57":{},"58":{},"4-6":{},"10-2":{}},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"31":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"61":{},"63":{},"64":{}},"component":{}}],["oscillator(o",{"_index":1066,"title":{},"name":{},"text":{"10":{}},"component":{}}],["oscillator,sin_cos_gen",{"_index":2299,"title":{},"name":{},"text":{"55":{}},"component":{}}],["ot",{"_index":1597,"title":{},"name":{},"text":{"34":{},"36":{}},"component":{}}],["otherwis",{"_index":1581,"title":{},"name":{},"text":{"33":{}},"component":{}}],["ought",{"_index":2357,"title":{},"name":{},"text":{"59":{}},"component":{}}],["out",{"_index":43,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"7":{},"21":{},"23":{},"26":{},"32":{},"33":{},"36":{},"39":{},"42":{},"59":{}},"component":{}}],["out.fram",{"_index":682,"title":{},"name":{},"text":{"4":{},"39":{}},"component":{}}],["out[0",{"_index":679,"title":{},"name":{},"text":{"4":{},"39":{}},"component":{}}],["out[1",{"_index":680,"title":{},"name":{},"text":{"4":{},"39":{}},"component":{}}],["out_channel",{"_index":1747,"title":{},"name":{},"text":{"39":{},"42":{}},"component":{}}],["output",{"_index":169,"title":{"27-3":{}},"name":{},"text":{"2":{},"4":{},"7":{},"8":{},"9":{},"10":{},"11":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"37":{},"38":{},"39":{},"42":{},"48":{},"59":{}},"component":{}}],["output_channel",{"_index":1631,"title":{},"name":{},"text":{"37":{},"39":{}},"component":{}}],["output_lat",{"_index":1711,"title":{},"name":{},"text":{"39":{}},"component":{}}],["outsid",{"_index":950,"title":{},"name":{},"text":{"7":{},"31":{},"48":{}},"component":{}}],["over",{"_index":454,"title":{},"name":{},"text":{"3":{},"4":{},"10":{},"26":{},"28":{},"36":{},"48":{},"49":{},"55":{},"65":{}},"component":{}}],["overlap",{"_index":313,"title":{},"name":{},"text":{"2":{},"7":{}},"component":{}}],["overload",{"_index":2036,"title":{},"name":{},"text":{"45":{},"67":{}},"component":{}}],["overrid",{"_index":1759,"title":{},"name":{},"text":{"42":{}},"component":{}}],["overton",{"_index":2318,"title":{},"name":{},"text":{"56":{}},"component":{}}],["overview",{"_index":23,"title":{"6-1":{},"7-1":{},"9-1":{},"10-1":{},"11-1":{},"12-1":{},"13-1":{},"14-1":{},"15-1":{},"16-1":{},"17-1":{},"18-1":{},"19-1":{},"20-1":{},"21-1":{},"22-1":{},"23-1":{},"24-1":{},"25-1":{},"26-1":{},"27-1":{},"28-1":{},"29-1":{},"30-1":{},"31-1":{},"32-1":{},"33-1":{},"34-1":{},"35-1":{},"36-1":{},"37-1":{},"38-1":{},"39-1":{},"42-1":{},"43-1":{},"44-1":{},"45-1":{},"46-1":{},"47-1":{},"48-1":{},"49-1":{},"50-1":{},"51-1":{},"52-1":{},"53-1":{},"54-1":{},"55-1":{},"56-1":{},"57-1":{},"58-1":{},"59-1":{},"60-1":{},"61-1":{},"62-1":{},"63-1":{},"64-1":{},"65-1":{},"66-1":{},"67-1":{},"68-1":{}},"name":{},"text":{"2":{}},"component":{}}],["overwrit",{"_index":2544,"title":{},"name":{},"text":{"68":{}},"component":{}}],["p",{"_index":730,"title":{},"name":{},"text":{"4":{},"38":{},"45":{},"53":{},"54":{},"56":{},"57":{},"58":{},"63":{},"64":{},"65":{},"66":{}},"component":{}}],["p.rep",{"_index":2517,"title":{},"name":{},"text":{"66":{}},"component":{}}],["p.valid",{"_index":2521,"title":{},"name":{},"text":{"66":{}},"component":{}}],["packag",{"_index":860,"title":{},"name":{},"text":{"5":{}},"component":{}}],["pan",{"_index":1865,"title":{},"name":{},"text":{"44":{}},"component":{}}],["pan_lsb",{"_index":1896,"title":{},"name":{},"text":{"44":{}},"component":{}}],["parallel",{"_index":1429,"title":{},"name":{},"text":{"29":{},"46":{}},"component":{}}],["paramet",{"_index":430,"title":{},"name":{},"text":{"3":{},"4":{},"6":{},"8":{},"9":{},"10":{},"11":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"31":{},"32":{},"33":{},"34":{},"36":{},"44":{},"46":{},"48":{},"49":{},"52":{},"56":{}},"component":{}}],["parameter",{"_index":1364,"title":{},"name":{},"text":{"26":{},"27":{},"62":{},"68":{}},"component":{}}],["paramnet",{"_index":2193,"title":{},"name":{},"text":{"48":{}},"component":{}}],["paratemet",{"_index":2075,"title":{},"name":{},"text":{"46":{}},"component":{}}],["part",{"_index":456,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["parti",{"_index":110,"title":{},"name":{},"text":{"2":{}},"component":{}}],["particular",{"_index":976,"title":{},"name":{},"text":{"8":{}},"component":{}}],["particularli",{"_index":897,"title":{},"name":{},"text":{"6":{},"8":{}},"component":{}}],["pass",{"_index":350,"title":{"12":{},"13":{},"14":{},"15":{},"17":{},"35":{}},"name":{},"text":{"2":{},"3":{},"4":{},"6":{},"7":{},"12":{},"13":{},"14":{},"15":{},"17":{},"23":{},"26":{},"29":{},"30":{},"32":{},"35":{},"36":{},"37":{},"46":{},"48":{}},"component":{}}],["passag",{"_index":1727,"title":{},"name":{},"text":{"39":{}},"component":{}}],["path",{"_index":1412,"title":{},"name":{},"text":{"28":{},"38":{}},"component":{}}],["peak",{"_index":480,"title":{"13":{},"20":{},"29":{}},"name":{"20":{}},"text":{"3":{},"6":{},"8":{},"13":{},"14":{},"20":{},"22":{},"25":{},"27":{},"29":{},"48":{},"49":{}},"component":{}}],["peak_envelope_follow",{"_index":1427,"title":{},"name":{"29":{}},"text":{"29":{}},"component":{}}],["peak_envelope_follower(dur",{"_index":1442,"title":{},"name":{},"text":{"29":{}},"component":{}}],["peak_envelope_follower(env",{"_index":1445,"title":{},"name":{},"text":{"29":{}},"component":{}}],["peak_envelope_follower(rel",{"_index":1444,"title":{},"name":{},"text":{"29":{}},"component":{}}],["peaking(doubl",{"_index":1205,"title":{},"name":{},"text":{"20":{}},"component":{}}],["peaking(g",{"_index":1206,"title":{},"name":{},"text":{"20":{}},"component":{}}],["peer",{"_index":549,"title":{},"name":{},"text":{"3":{}},"component":{}}],["per",{"_index":189,"title":{},"name":{},"text":{"2":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"35":{},"36":{},"38":{},"39":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"55":{},"61":{},"64":{},"65":{}},"component":{}}],["perceiv",{"_index":972,"title":{},"name":{},"text":{"8":{}},"component":{}}],["perfectli",{"_index":2345,"title":{},"name":{},"text":{"59":{},"64":{}},"component":{}}],["perform",{"_index":177,"title":{},"name":{},"text":{"2":{},"7":{},"21":{},"22":{},"23":{},"24":{},"25":{},"27":{},"29":{},"32":{},"38":{},"44":{},"46":{},"56":{},"59":{}},"component":{}}],["perhap",{"_index":753,"title":{},"name":{},"text":{"4":{},"25":{},"27":{},"29":{}},"component":{}}],["period",{"_index":196,"title":{"63":{}},"name":{"63":{}},"text":{"2":{},"3":{},"10":{},"11":{},"25":{},"26":{},"27":{},"28":{},"31":{},"36":{},"55":{},"61":{},"63":{},"64":{}},"component":{}}],["period(dur",{"_index":2439,"title":{},"name":{},"text":{"63":{}},"component":{}}],["period(frequ",{"_index":2440,"title":{},"name":{},"text":{"63":{}},"component":{}}],["permit",{"_index":2128,"title":{},"name":{},"text":{"48":{}},"component":{}}],["ph",{"_index":1072,"title":{},"name":{},"text":{"10":{}},"component":{}}],["phase",{"_index":182,"title":{"64":{},"48-2":{}},"name":{"64":{}},"text":{"2":{},"3":{},"4":{},"8":{},"10":{},"11":{},"25":{},"26":{},"29":{},"47":{},"48":{},"50":{},"51":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"64":{},"65":{}},"component":{}}],["phase(0",{"_index":2466,"title":{},"name":{},"text":{"64":{}},"component":{}}],["phase(d",{"_index":2441,"title":{},"name":{},"text":{"63":{}},"component":{}}],["phase(f",{"_index":2442,"title":{},"name":{},"text":{"63":{}},"component":{}}],["phase(freq",{"_index":2467,"title":{},"name":{},"text":{"64":{}},"component":{}}],["phase(frequ",{"_index":2461,"title":{},"name":{},"text":{"64":{}},"component":{}}],["phase::begin",{"_index":2472,"title":{},"name":{},"text":{"64":{}},"component":{}}],["phase::end",{"_index":2473,"title":{},"name":{},"text":{"64":{}},"component":{}}],["phase::middl",{"_index":733,"title":{},"name":{},"text":{"4":{},"64":{}},"component":{}}],["phase_iter",{"_index":473,"title":{"65":{}},"name":{"65":{}},"text":{"3":{},"4":{},"10":{},"64":{},"65":{}},"component":{}}],["phase_iterator(freq",{"_index":2483,"title":{},"name":{},"text":{"65":{}},"component":{}}],["phase_iterator(frequ",{"_index":2476,"title":{},"name":{},"text":{"65":{}},"component":{}}],["phase_iterator(i",{"_index":2484,"title":{},"name":{},"text":{"65":{}},"component":{}}],["phase_unit",{"_index":2460,"title":{},"name":{},"text":{"64":{}},"component":{}}],["phaser",{"_index":1972,"title":{},"name":{},"text":{"44":{}},"component":{}}],["phase’",{"_index":2135,"title":{},"name":{},"text":{"48":{}},"component":{}}],["physic",{"_index":620,"title":{},"name":{},"text":{"4":{},"11":{},"32":{},"33":{}},"component":{}}],["pi",{"_index":14,"title":{"2-11":{}},"name":{},"text":{"2":{},"10":{}},"component":{}}],["pick",{"_index":1317,"title":{},"name":{},"text":{"25":{},"27":{},"29":{}},"component":{}}],["pink",{"_index":1359,"title":{},"name":{},"text":{"26":{}},"component":{}}],["pitch",{"_index":121,"title":{"66":{}},"name":{"66":{}},"text":{"2":{},"3":{},"8":{},"44":{},"62":{},"66":{}},"component":{}}],["pitch(f",{"_index":2516,"title":{},"name":{},"text":{"66":{}},"component":{}}],["pitch(frequ",{"_index":2506,"title":{},"name":{},"text":{"66":{}},"component":{}}],["pitch_bend",{"_index":1787,"title":{"44-14":{}},"name":{},"text":{"44":{}},"component":{}}],["pitch_bend(std::uint8_t",{"_index":2005,"title":{},"name":{},"text":{"44":{}},"component":{}}],["place",{"_index":137,"title":{},"name":{},"text":{"2":{},"4":{},"45":{},"54":{},"56":{},"57":{},"58":{}},"component":{}}],["plain",{"_index":1360,"title":{},"name":{},"text":{"26":{}},"component":{}}],["platform",{"_index":39,"title":{},"name":{},"text":{"2":{},"3":{},"5":{},"9":{},"37":{}},"component":{}}],["play",{"_index":525,"title":{},"name":{},"text":{"3":{},"4":{},"5":{}},"component":{}}],["playabl",{"_index":658,"title":{},"name":{},"text":{"4":{}},"component":{}}],["plot",{"_index":1316,"title":{},"name":{},"text":{"25":{},"26":{},"27":{},"28":{},"29":{},"48":{}},"component":{}}],["plugin",{"_index":70,"title":{},"name":{},"text":{"2":{},"9":{}},"component":{}}],["point",{"_index":148,"title":{"7-3":{}},"name":{},"text":{"2":{},"4":{},"7":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"38":{},"39":{},"47":{},"48":{},"49":{},"50":{},"51":{},"53":{},"55":{},"59":{},"60":{},"61":{},"62":{},"64":{},"65":{}},"component":{}}],["pointer",{"_index":1684,"title":{},"name":{},"text":{"38":{},"46":{}},"component":{}}],["pole",{"_index":495,"title":{"35":{}},"name":{},"text":{"3":{},"35":{}},"component":{}}],["poli",{"_index":1998,"title":{},"name":{},"text":{"44":{}},"component":{}}],["poly_aftertouch",{"_index":1783,"title":{"44-10":{}},"name":{},"text":{"44":{}},"component":{}}],["poly_blep",{"_index":714,"title":{},"name":{},"text":{"4":{}},"component":{}}],["poly_blep(p",{"_index":738,"title":{},"name":{},"text":{"4":{}},"component":{}}],["polyblamp",{"_index":2328,"title":{},"name":{},"text":{"58":{}},"component":{}}],["polyblep",{"_index":2265,"title":{},"name":{},"text":{"53":{},"54":{},"57":{}},"component":{}}],["polynomi",{"_index":2334,"title":{},"name":{},"text":{"58":{}},"component":{}}],["polyphon",{"_index":2130,"title":{},"name":{},"text":{"48":{}},"component":{}}],["poorli",{"_index":1407,"title":{},"name":{},"text":{"27":{},"32":{}},"component":{}}],["pop",{"_index":2557,"title":{},"name":{},"text":{"68":{}},"component":{}}],["pop_front",{"_index":2551,"title":{},"name":{},"text":{"68":{}},"component":{}}],["port",{"_index":66,"title":{},"name":{},"text":{"2":{}},"component":{}}],["portamento",{"_index":1913,"title":{},"name":{},"text":{"44":{}},"component":{}}],["portamento_control",{"_index":1953,"title":{},"name":{},"text":{"44":{}},"component":{}}],["portamento_tim",{"_index":1857,"title":{},"name":{},"text":{"44":{}},"component":{}}],["portamento_time_lsb",{"_index":1888,"title":{},"name":{},"text":{"44":{}},"component":{}}],["portaudio",{"_index":57,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{}}],["portmidi",{"_index":58,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{}}],["posit",{"_index":1150,"title":{},"name":{},"text":{"11":{},"25":{},"27":{},"29":{},"32":{},"33":{},"38":{},"44":{},"66":{}},"component":{}}],["possibl",{"_index":569,"title":{},"name":{},"text":{"4":{},"11":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"39":{},"48":{},"68":{}},"component":{}}],["post",{"_index":2485,"title":{},"name":{},"text":{"65":{}},"component":{}}],["potenti",{"_index":217,"title":{},"name":{},"text":{"2":{},"11":{}},"component":{}}],["pow2",{"_index":2503,"title":{},"name":{},"text":{"66":{}},"component":{}}],["power",{"_index":361,"title":{},"name":{},"text":{"2":{},"3":{},"7":{},"10":{},"51":{},"59":{},"68":{}},"component":{}}],["practic",{"_index":2168,"title":{},"name":{},"text":{"48":{}},"component":{}}],["pre",{"_index":369,"title":{},"name":{},"text":{"2":{},"4":{},"31":{},"32":{},"33":{},"65":{}},"component":{}}],["precalcul",{"_index":2266,"title":{},"name":{},"text":{"53":{},"54":{},"57":{}},"component":{}}],["precis",{"_index":993,"title":{},"name":{},"text":{"8":{}},"component":{}}],["preferr",{"_index":617,"title":{},"name":{},"text":{"4":{},"59":{},"60":{},"61":{}},"component":{}}],["preprocess",{"_index":1329,"title":{},"name":{},"text":{"25":{},"27":{},"29":{}},"component":{}}],["prerequisit",{"_index":1752,"title":{},"name":{},"text":{"42":{},"45":{},"46":{},"65":{}},"component":{}}],["present",{"_index":624,"title":{},"name":{},"text":{"4":{},"39":{},"42":{},"46":{},"55":{}},"component":{}}],["preset",{"_index":2003,"title":{},"name":{},"text":{"44":{}},"component":{}}],["press",{"_index":813,"title":{},"name":{},"text":{"4":{},"48":{}},"component":{}}],["pressur",{"_index":1847,"title":{},"name":{},"text":{"44":{}},"component":{}}],["pretti",{"_index":566,"title":{},"name":{},"text":{"4":{}},"component":{}}],["prevent",{"_index":1082,"title":{},"name":{},"text":{"10":{},"22":{},"36":{},"65":{}},"component":{}}],["previou",{"_index":1435,"title":{},"name":{},"text":{"29":{},"46":{},"48":{},"59":{},"65":{}},"component":{}}],["previous",{"_index":1046,"title":{},"name":{},"text":{"10":{},"21":{},"44":{}},"component":{}}],["primarili",{"_index":315,"title":{},"name":{},"text":{"2":{},"9":{},"32":{}},"component":{}}],["princip",{"_index":532,"title":{},"name":{},"text":{"3":{}},"component":{}}],["print",{"_index":886,"title":{},"name":{},"text":{"5":{},"44":{}},"component":{}}],["prior",{"_index":2486,"title":{},"name":{},"text":{"65":{}},"component":{}}],["privat",{"_index":393,"title":{},"name":{},"text":{"2":{}},"component":{}}],["proc",{"_index":810,"title":{},"name":{},"text":{"4":{},"45":{}},"component":{}}],["proc(msg",{"_index":2027,"title":{},"name":{},"text":{"45":{}},"component":{}}],["procedur",{"_index":846,"title":{},"name":{},"text":{"5":{}},"component":{}}],["process",{"_index":161,"title":{"4-7":{}},"name":{},"text":{"2":{},"3":{},"4":{},"6":{},"7":{},"8":{},"9":{},"11":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"34":{},"35":{},"39":{},"42":{},"45":{},"46":{},"47":{},"59":{},"64":{}},"component":{}}],["process(in_channel",{"_index":1746,"title":{},"name":{},"text":{"39":{},"42":{}},"component":{}}],["process(out_channel",{"_index":678,"title":{},"name":{},"text":{"4":{},"42":{}},"component":{}}],["processor",{"_index":129,"title":{"45":{},"45-8":{}},"name":{},"text":{"2":{},"3":{},"4":{},"7":{},"9":{},"11":{},"21":{},"22":{},"23":{},"24":{},"34":{},"39":{},"42":{},"45":{}},"component":{}}],["produc",{"_index":529,"title":{},"name":{},"text":{"3":{},"24":{},"31":{},"49":{},"54":{},"55":{}},"component":{}}],["product",{"_index":1041,"title":{},"name":{},"text":{"10":{}},"component":{}}],["program",{"_index":106,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"44":{},"45":{}},"component":{}}],["program_chang",{"_index":1785,"title":{"44-12":{}},"name":{},"text":{"44":{}},"component":{}}],["program_change(std::uint8_t",{"_index":2002,"title":{},"name":{},"text":{"44":{}},"component":{}}],["programm",{"_index":746,"title":{},"name":{},"text":{"4":{}},"component":{}}],["programmat",{"_index":2263,"title":{},"name":{},"text":{"53":{},"54":{},"57":{},"58":{}},"component":{}}],["progress",{"_index":710,"title":{},"name":{},"text":{"4":{},"25":{},"40":{},"41":{}},"component":{}}],["project",{"_index":464,"title":{"5-5":{}},"name":{},"text":{"3":{},"5":{}},"component":{}}],["promot",{"_index":1111,"title":{"11-12":{}},"name":{},"text":{"11":{}},"component":{}}],["prone",{"_index":1538,"title":{},"name":{},"text":{"32":{},"33":{}},"component":{}}],["pronounc",{"_index":2223,"title":{},"name":{},"text":{"49":{}},"component":{}}],["properti",{"_index":978,"title":{},"name":{},"text":{"8":{},"9":{},"31":{}},"component":{}}],["protocol",{"_index":1797,"title":{},"name":{},"text":{"44":{}},"component":{}}],["prototyp",{"_index":2169,"title":{},"name":{},"text":{"48":{}},"component":{}}],["provid",{"_index":21,"title":{},"name":{},"text":{"2":{},"4":{},"9":{},"10":{},"11":{},"31":{},"42":{},"45":{},"48":{},"59":{},"67":{}},"component":{}}],["provis",{"_index":1479,"title":{},"name":{},"text":{"31":{},"33":{},"36":{}},"component":{}}],["ps",{"_index":2271,"title":{},"name":{},"text":{"53":{}},"component":{}}],["ps.width(w",{"_index":2274,"title":{},"name":{},"text":{"53":{}},"component":{}}],["public",{"_index":1486,"title":{},"name":{},"text":{"31":{},"37":{},"38":{},"39":{},"42":{},"46":{},"63":{},"67":{},"68":{}},"component":{}}],["publicli",{"_index":1544,"title":{},"name":{},"text":{"32":{},"36":{},"39":{},"48":{},"63":{},"67":{}},"component":{}}],["puls",{"_index":501,"title":{"53":{}},"name":{},"text":{"3":{},"10":{},"53":{},"57":{}},"component":{}}],["pulse_osc",{"_index":2262,"title":{},"name":{"53":{}},"text":{"53":{}},"component":{}}],["pulse_osc(float",{"_index":2270,"title":{},"name":{},"text":{"53":{}},"component":{}}],["pulse_osc(w",{"_index":2273,"title":{},"name":{},"text":{"53":{}},"component":{}}],["pure",{"_index":2289,"title":{},"name":{},"text":{"55":{},"56":{}},"component":{}}],["purpos",{"_index":1761,"title":{},"name":{},"text":{"42":{},"45":{},"48":{},"64":{}},"component":{}}],["push",{"_index":1512,"title":{},"name":{},"text":{"31":{},"32":{},"33":{},"68":{}},"component":{}}],["push(t",{"_index":2549,"title":{},"name":{},"text":{"68":{}},"component":{}}],["q",{"_index":1,"title":{"3":{}},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"22":{},"24":{},"34":{},"37":{},"43":{},"44":{},"45":{},"47":{},"49":{},"50":{},"51":{},"52":{},"55":{},"59":{}},"component":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{}}}],["q/build",{"_index":853,"title":{},"name":{},"text":{"5":{}},"component":{}}],["q::adsr_envelope_gen",{"_index":691,"title":{},"name":{},"text":{"4":{}},"component":{}}],["q::adsr_envelope_gen::config",{"_index":2194,"title":{},"name":{},"text":{"48":{}},"component":{}}],["q::adsr_envelope_gen{env_cfg",{"_index":2197,"title":{},"name":{},"text":{"48":{}},"component":{}}],["q::audio_device::list",{"_index":1647,"title":{},"name":{},"text":{"37":{}},"component":{}}],["q::audio_stream",{"_index":668,"title":{},"name":{},"text":{"4":{},"39":{}},"component":{}}],["q::delay",{"_index":576,"title":{},"name":{},"text":{"4":{}},"component":{}}],["q::envelope::config",{"_index":800,"title":{},"name":{},"text":{"4":{}},"component":{}}],["q::liter",{"_index":261,"title":{},"name":{},"text":{"2":{}},"component":{}}],["q::lowpass",{"_index":600,"title":{},"name":{},"text":{"4":{}},"component":{}}],["q::midi_input_stream",{"_index":809,"title":{},"name":{},"text":{"4":{}},"component":{}}],["q::period",{"_index":2397,"title":{},"name":{},"text":{"61":{}},"component":{}}],["q::phase_iter",{"_index":689,"title":{},"name":{},"text":{"4":{}},"component":{}}],["q::reso_filt",{"_index":692,"title":{},"name":{},"text":{"4":{}},"component":{}}],["q::soft_clip",{"_index":693,"title":{},"name":{},"text":{"4":{}},"component":{}}],["q::square(phas",{"_index":685,"title":{},"name":{},"text":{"4":{}},"component":{}}],["q_io",{"_index":34,"title":{},"name":{"9":{}},"text":{"2":{},"9":{}},"component":{}}],["q_lib",{"_index":46,"title":{},"name":{},"text":{"2":{},"9":{}},"component":{}}],["qualiti",{"_index":432,"title":{},"name":{},"text":{"3":{},"7":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{}},"component":{}}],["quantifi",{"_index":1130,"title":{},"name":{},"text":{"11":{}},"component":{}}],["quantum",{"_index":632,"title":{},"name":{},"text":{"4":{}},"component":{}}],["quasi",{"_index":2333,"title":{},"name":{},"text":{"58":{}},"component":{}}],["quick",{"_index":470,"title":{"4":{}},"name":{},"text":{"3":{},"4":{}},"component":{}}],["quick_start",{"_index":556,"title":{},"name":{"4":{}},"text":{},"component":{}}],["quickli",{"_index":1434,"title":{},"name":{},"text":{"29":{}},"component":{}}],["quietest",{"_index":929,"title":{},"name":{},"text":{"7":{}},"component":{}}],["q’",{"_index":1587,"title":{},"name":{},"text":{"34":{}},"component":{}}],["r",{"_index":344,"title":{},"name":{},"text":{"2":{},"4":{},"10":{},"22":{},"23":{},"24":{},"38":{},"50":{}},"component":{}}],["r.length",{"_index":1690,"title":{},"name":{},"text":{"38":{}},"component":{}}],["r.posit",{"_index":1691,"title":{},"name":{},"text":{"38":{}},"component":{}}],["r.read(b",{"_index":1689,"title":{},"name":{},"text":{"38":{}},"component":{}}],["r.read(d",{"_index":1688,"title":{},"name":{},"text":{"38":{}},"component":{}}],["r.reset",{"_index":1107,"title":{},"name":{},"text":{"10":{}},"component":{}}],["r.restart",{"_index":1686,"title":{},"name":{},"text":{"38":{}},"component":{}}],["r.seek(p",{"_index":1687,"title":{},"name":{},"text":{"38":{}},"component":{}}],["rad",{"_index":2490,"title":{},"name":{},"text":{"65":{}},"component":{}}],["radian",{"_index":2455,"title":{},"name":{},"text":{"64":{}},"component":{}}],["rais",{"_index":949,"title":{},"name":{},"text":{"7":{},"51":{}},"component":{}}],["ramp",{"_index":509,"title":{"49":{},"52":{},"10-24":{},"47-8":{},"51-8":{}},"name":{},"text":{"3":{},"10":{},"26":{},"47":{},"48":{},"49":{},"51":{},"52":{},"58":{}},"component":{}}],["ramp(w",{"_index":1106,"title":{},"name":{},"text":{"10":{}},"component":{}}],["ramp`",{"_index":1096,"title":{},"name":{},"text":{"10":{}},"component":{}}],["random",{"_index":1524,"title":{},"name":{},"text":{"32":{},"43":{},"46":{}},"component":{}}],["randomaccessiterat",{"_index":1765,"title":{"43-7":{}},"name":{},"text":{"43":{},"46":{}},"component":{}}],["rang",{"_index":153,"title":{},"name":{},"text":{"2":{},"7":{},"8":{},"10":{},"11":{},"23":{},"28":{},"43":{},"44":{},"46":{},"49":{}},"component":{}}],["rate",{"_index":589,"title":{},"name":{},"text":{"4":{},"9":{},"10":{},"33":{},"37":{},"38":{},"39":{},"48":{},"50":{},"64":{},"65":{}},"component":{}}],["ratio",{"_index":206,"title":{},"name":{},"text":{"2":{},"7":{},"22":{},"23":{},"24":{},"59":{}},"component":{}}],["ratio(float",{"_index":1241,"title":{},"name":{},"text":{"22":{},"23":{},"24":{}},"component":{}}],["rational",{"_index":2059,"title":{},"name":{},"text":{"46":{}},"component":{}}],["raw",{"_index":174,"title":{"44-5":{}},"name":{},"text":{"2":{},"4":{},"11":{},"38":{},"44":{},"45":{}},"component":{}}],["raw_messag",{"_index":1813,"title":{},"name":{},"text":{"44":{},"45":{}},"component":{}}],["rb",{"_index":2529,"title":{},"name":{},"text":{"67":{},"68":{}},"component":{}}],["rb.back",{"_index":2561,"title":{},"name":{},"text":{"68":{}},"component":{}}],["rb.clear",{"_index":2555,"title":{},"name":{},"text":{"68":{}},"component":{}}],["rb.front",{"_index":2560,"title":{},"name":{},"text":{"68":{}},"component":{}}],["rb.pop_front",{"_index":2556,"title":{},"name":{},"text":{"68":{}},"component":{}}],["rb.push(val",{"_index":2554,"title":{},"name":{},"text":{"68":{}},"component":{}}],["rb.size",{"_index":2542,"title":{},"name":{},"text":{"67":{},"68":{}},"component":{}}],["rb.store",{"_index":2562,"title":{},"name":{},"text":{"68":{}},"component":{}}],["rb[0",{"_index":2539,"title":{},"name":{},"text":{"67":{},"68":{}},"component":{}}],["rb[2.5",{"_index":2541,"title":{},"name":{},"text":{"67":{}},"component":{}}],["rb[i",{"_index":2538,"title":{},"name":{},"text":{"67":{},"68":{}},"component":{}}],["rb[rb.size",{"_index":2540,"title":{},"name":{},"text":{"67":{},"68":{}},"component":{}}],["rb_type",{"_index":2528,"title":{},"name":{},"text":{"67":{},"68":{}},"component":{}}],["rb_type(",{"_index":2552,"title":{},"name":{},"text":{"68":{}},"component":{}}],["rb_type(rb",{"_index":2553,"title":{},"name":{},"text":{"68":{}},"component":{}}],["rb_type1",{"_index":2530,"title":{},"name":{},"text":{"67":{},"68":{}},"component":{}}],["rb_type2",{"_index":2531,"title":{},"name":{},"text":{"67":{},"68":{}},"component":{}}],["rb_type3",{"_index":2532,"title":{},"name":{},"text":{"67":{}},"component":{}}],["rb_type4",{"_index":2533,"title":{},"name":{},"text":{"67":{}},"component":{}}],["rb_type::index_typ",{"_index":2536,"title":{},"name":{},"text":{"67":{}},"component":{}}],["rb_type::interpolation_typ",{"_index":2537,"title":{},"name":{},"text":{"67":{}},"component":{}}],["rb_type::storage_typ",{"_index":2535,"title":{},"name":{},"text":{"67":{},"68":{}},"component":{}}],["rb_type::value_typ",{"_index":2534,"title":{},"name":{},"text":{"67":{},"68":{}},"component":{}}],["read",{"_index":755,"title":{},"name":{},"text":{"4":{},"9":{},"38":{},"42":{},"45":{},"46":{},"65":{}},"component":{}}],["read(concepts::indexablecontain",{"_index":1681,"title":{},"name":{},"text":{"38":{}},"component":{}}],["read(float",{"_index":1678,"title":{},"name":{},"text":{"38":{}},"component":{}}],["readabl",{"_index":260,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"39":{}},"component":{}}],["reader",{"_index":726,"title":{},"name":{},"text":{"4":{}},"component":{}}],["readi",{"_index":883,"title":{},"name":{},"text":{"5":{}},"component":{}}],["real",{"_index":1731,"title":{},"name":{},"text":{"39":{},"56":{}},"component":{}}],["realm",{"_index":307,"title":{},"name":{},"text":{"2":{}},"component":{}}],["reason",{"_index":222,"title":{},"name":{},"text":{"2":{},"4":{},"39":{}},"component":{}}],["recalcul",{"_index":1572,"title":{},"name":{},"text":{"33":{}},"component":{}}],["receiv",{"_index":317,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"45":{},"48":{}},"component":{}}],["reciproc",{"_index":2403,"title":{},"name":{},"text":{"61":{},"63":{}},"component":{}}],["recommend",{"_index":1404,"title":{},"name":{},"text":{"27":{}},"component":{}}],["record",{"_index":561,"title":{},"name":{},"text":{"4":{}},"component":{}}],["recurs",{"_index":844,"title":{},"name":{},"text":{"5":{}},"component":{}}],["red",{"_index":1398,"title":{},"name":{},"text":{"27":{}},"component":{}}],["reduc",{"_index":974,"title":{},"name":{},"text":{"8":{},"22":{},"23":{},"24":{},"29":{},"32":{},"34":{},"47":{},"53":{},"54":{},"55":{},"57":{},"58":{}},"component":{}}],["reduct",{"_index":1260,"title":{},"name":{},"text":{"22":{},"23":{},"24":{},"35":{},"50":{}},"component":{}}],["ref",{"_index":1210,"title":{},"name":{},"text":{"21":{}},"component":{}}],["refer",{"_index":472,"title":{},"name":{},"text":{"3":{},"4":{},"7":{},"21":{},"33":{},"64":{},"65":{},"67":{},"68":{}},"component":{}}],["refin",{"_index":1068,"title":{},"name":{},"text":{"10":{}},"component":{}}],["regard",{"_index":2543,"title":{},"name":{},"text":{"68":{}},"component":{}}],["region",{"_index":962,"title":{},"name":{},"text":{"7":{}},"component":{}}],["regular",{"_index":1704,"title":{},"name":{},"text":{"39":{},"42":{}},"component":{}}],["rel",{"_index":1342,"title":{},"name":{},"text":{"25":{},"29":{},"48":{},"59":{},"64":{}},"component":{}}],["relat",{"_index":131,"title":{},"name":{},"text":{"2":{},"3":{},"8":{}},"component":{}}],["relationship",{"_index":2337,"title":{},"name":{},"text":{"59":{},"64":{}},"component":{}}],["releas",{"_index":466,"title":{},"name":{},"text":{"3":{},"4":{},"10":{},"25":{},"29":{},"34":{},"36":{},"44":{},"48":{}},"component":{}}],["release(dur",{"_index":1443,"title":{},"name":{},"text":{"29":{}},"component":{}}],["release(float",{"_index":1339,"title":{},"name":{},"text":{"25":{}},"component":{}}],["release_",{"_index":1340,"title":{},"name":{},"text":{"25":{},"29":{}},"component":{}}],["release_r",{"_index":2179,"title":{},"name":{},"text":{"48":{}},"component":{}}],["release_rate(dur",{"_index":2185,"title":{},"name":{},"text":{"48":{}},"component":{}}],["release_threshold",{"_index":1592,"title":{},"name":{},"text":{"34":{},"36":{}},"component":{}}],["release_threshold(decibel",{"_index":1595,"title":{},"name":{},"text":{"34":{}},"component":{}}],["release_threshold(float",{"_index":1596,"title":{},"name":{},"text":{"34":{}},"component":{}}],["relev",{"_index":1609,"title":{},"name":{},"text":{"35":{},"45":{},"64":{}},"component":{}}],["remain",{"_index":2200,"title":{},"name":{},"text":{"48":{}},"component":{}}],["remov",{"_index":1459,"title":{},"name":{},"text":{"30":{},"48":{},"53":{},"54":{},"57":{},"58":{}},"component":{}}],["repeat",{"_index":1470,"title":{},"name":{},"text":{"31":{},"66":{}},"component":{}}],["repetit",{"_index":1462,"title":{},"name":{},"text":{"31":{}},"component":{}}],["replac",{"_index":78,"title":{},"name":{},"text":{"2":{},"9":{}},"component":{}}],["repres",{"_index":160,"title":{},"name":{},"text":{"2":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"53":{},"55":{},"59":{},"62":{},"64":{},"65":{},"66":{}},"component":{}}],["represent",{"_index":1055,"title":{},"name":{},"text":{"10":{},"11":{},"46":{},"60":{},"61":{},"63":{},"64":{}},"component":{}}],["request",{"_index":1714,"title":{},"name":{},"text":{"39":{}},"component":{}}],["requir",{"_index":791,"title":{"5-1":{}},"name":{},"text":{"4":{},"5":{},"8":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"26":{},"27":{},"31":{},"33":{},"36":{},"45":{},"55":{},"62":{},"67":{},"68":{}},"component":{}}],["requires(t",{"_index":1061,"title":{},"name":{},"text":{"10":{},"43":{},"45":{}},"component":{}}],["research",{"_index":457,"title":{},"name":{},"text":{"3":{}},"component":{}}],["reserv",{"_index":416,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"8":{}},"component":{}}],["reset",{"_index":1104,"title":{"44-23":{}},"name":{},"text":{"10":{},"25":{},"27":{},"29":{},"38":{},"44":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"55":{}},"component":{}}],["reset(float",{"_index":2304,"title":{},"name":{},"text":{"55":{}},"component":{}}],["resid",{"_index":102,"title":{},"name":{},"text":{"2":{}},"component":{}}],["resistor",{"_index":1305,"title":{},"name":{},"text":{"25":{},"29":{},"49":{}},"component":{}}],["resiz",{"_index":1570,"title":{},"name":{},"text":{"33":{},"68":{}},"component":{}}],["resize(dur",{"_index":1558,"title":{},"name":{},"text":{"33":{}},"component":{}}],["resize(std::size_t",{"_index":1556,"title":{},"name":{},"text":{"33":{}},"component":{}}],["resolut",{"_index":2234,"title":{},"name":{},"text":{"50":{}},"component":{}}],["reson",{"_index":433,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["respect",{"_index":548,"title":{},"name":{},"text":{"3":{},"34":{},"36":{},"55":{},"59":{}},"component":{}}],["respond",{"_index":660,"title":{},"name":{},"text":{"4":{}},"component":{}}],["respons",{"_index":896,"title":{"25-2":{},"26-2":{},"27-2":{},"27-4":{},"28-2":{},"29-2":{}},"name":{},"text":{"6":{},"7":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"25":{},"26":{},"27":{},"28":{},"29":{},"32":{},"39":{},"42":{}},"component":{}}],["rest",{"_index":1008,"title":{},"name":{},"text":{"9":{}},"component":{}}],["restart",{"_index":1675,"title":{},"name":{},"text":{"38":{}},"component":{}}],["restrict",{"_index":1113,"title":{},"name":{},"text":{"11":{}},"component":{}}],["resul",{"_index":1156,"title":{},"name":{},"text":{"11":{}},"component":{}}],["result",{"_index":346,"title":{},"name":{},"text":{"2":{},"4":{},"6":{},"7":{},"11":{},"21":{},"22":{},"23":{},"24":{},"27":{},"28":{},"30":{},"31":{},"35":{},"54":{},"55":{},"59":{},"66":{}},"component":{}}],["retain",{"_index":1525,"title":{},"name":{},"text":{"32":{}},"component":{}}],["retrigger",{"_index":2127,"title":{},"name":{},"text":{"48":{}},"component":{}}],["return",{"_index":168,"title":{},"name":{},"text":{"2":{},"4":{},"6":{},"7":{},"10":{},"11":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"39":{},"43":{},"44":{},"45":{},"46":{},"48":{},"55":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{}},"component":{}}],["reusabl",{"_index":359,"title":{},"name":{},"text":{"2":{},"3":{}},"component":{}}],["rev",{"_index":2451,"title":{},"name":{},"text":{"64":{}},"component":{}}],["reveal",{"_index":1433,"title":{},"name":{},"text":{"29":{}},"component":{}}],["reverb",{"_index":1957,"title":{},"name":{},"text":{"44":{}},"component":{}}],["review",{"_index":550,"title":{},"name":{},"text":{"3":{}},"component":{}}],["revolut",{"_index":2444,"title":{},"name":{},"text":{"64":{}},"component":{}}],["rewrap",{"_index":2458,"title":{},"name":{},"text":{"64":{},"65":{}},"component":{}}],["rh",{"_index":2479,"title":{},"name":{},"text":{"65":{},"68":{}},"component":{}}],["rich",{"_index":29,"title":{},"name":{},"text":{"2":{}},"component":{}}],["right",{"_index":415,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"7":{},"8":{},"29":{},"39":{},"46":{}},"component":{}}],["right[fram",{"_index":687,"title":{},"name":{},"text":{"4":{},"39":{}},"component":{}}],["right[i",{"_index":2062,"title":{},"name":{},"text":{"46":{}},"component":{}}],["right_out",{"_index":1257,"title":{},"name":{},"text":{"22":{},"23":{},"24":{}},"component":{}}],["right_sign",{"_index":1258,"title":{},"name":{},"text":{"22":{},"23":{},"24":{}},"component":{}}],["ring",{"_index":516,"title":{"67":{},"68":{}},"name":{},"text":{"3":{},"31":{},"33":{},"67":{},"68":{}},"component":{}}],["ring_buff",{"_index":1484,"title":{},"name":{"68":{}},"text":{"31":{},"33":{},"67":{},"68":{}},"component":{}}],["ring_buffer(ring_buff",{"_index":2547,"title":{},"name":{},"text":{"68":{}},"component":{}}],["ring_buffer(std::size_t",{"_index":2546,"title":{},"name":{},"text":{"68":{}},"component":{}}],["ring_buffer::ring_buff",{"_index":2526,"title":{},"name":{},"text":{"67":{}},"component":{}}],["rippl",{"_index":1333,"title":{"29-3":{}},"name":{},"text":{"25":{},"26":{},"27":{},"29":{}},"component":{}}],["rise",{"_index":736,"title":{},"name":{},"text":{"4":{},"22":{},"24":{},"47":{},"51":{}},"component":{}}],["rm",{"_index":486,"title":{"28":{}},"name":{},"text":{"3":{},"8":{},"28":{}},"component":{}}],["robert",{"_index":901,"title":{},"name":{},"text":{"6":{},"47":{}},"component":{}}],["robin",{"_index":1390,"title":{},"name":{},"text":{"27":{}},"component":{}}],["rock",{"_index":528,"title":{},"name":{},"text":{"3":{}},"component":{}}],["roll",{"_index":1520,"title":{},"name":{},"text":{"32":{}},"component":{}}],["rolloff",{"_index":2231,"title":{},"name":{},"text":{"50":{}},"component":{}}],["root",{"_index":1413,"title":{},"name":{},"text":{"28":{},"32":{},"59":{}},"component":{}}],["rot",{"_index":2452,"title":{},"name":{},"text":{"64":{}},"component":{}}],["rotat",{"_index":2445,"title":{},"name":{},"text":{"64":{}},"component":{}}],["roughli",{"_index":2286,"title":{},"name":{},"text":{"55":{}},"component":{}}],["round",{"_index":1389,"title":{},"name":{},"text":{"27":{},"32":{},"33":{},"62":{},"66":{}},"component":{}}],["round(basic_interv",{"_index":2424,"title":{},"name":{},"text":{"62":{}},"component":{}}],["round(i",{"_index":2432,"title":{},"name":{},"text":{"62":{}},"component":{}}],["round(p",{"_index":2522,"title":{},"name":{},"text":{"66":{}},"component":{}}],["round(pitch",{"_index":2512,"title":{},"name":{},"text":{"66":{}},"component":{}}],["rout",{"_index":1743,"title":{},"name":{},"text":{"39":{}},"component":{}}],["rpn_lsb",{"_index":1982,"title":{},"name":{},"text":{"44":{}},"component":{}}],["rpn_msb",{"_index":1984,"title":{},"name":{},"text":{"44":{}},"component":{}}],["rt",{"_index":1598,"title":{},"name":{},"text":{"34":{},"36":{}},"component":{}}],["run",{"_index":441,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"55":{},"64":{}},"component":{}}],["s",{"_index":230,"title":{},"name":{},"text":{"2":{},"4":{},"6":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"32":{},"33":{},"35":{},"36":{},"38":{},"39":{},"46":{},"48":{},"67":{},"68":{}},"component":{}}],["s.config(l",{"_index":2151,"title":{},"name":{},"text":{"48":{}},"component":{}}],["s.config(w",{"_index":2150,"title":{},"name":{},"text":{"48":{}},"component":{}}],["s.level(l",{"_index":2149,"title":{},"name":{},"text":{"48":{}},"component":{}}],["s1",{"_index":2112,"title":{},"name":{},"text":{"48":{}},"component":{}}],["s5",{"_index":2113,"title":{},"name":{},"text":{"48":{}},"component":{}}],["sacrif",{"_index":451,"title":{},"name":{},"text":{"3":{}},"component":{}}],["safe",{"_index":245,"title":{},"name":{},"text":{"2":{},"4":{},"59":{},"60":{},"61":{},"63":{},"64":{}},"component":{}}],["sake",{"_index":794,"title":{},"name":{},"text":{"4":{}},"component":{}}],["same",{"_index":876,"title":{},"name":{},"text":{"5":{},"7":{},"11":{},"26":{},"28":{},"64":{},"65":{}},"component":{}}],["sameunit",{"_index":1108,"title":{"11-7":{}},"name":{},"text":{"11":{}},"component":{}}],["sampl",{"_index":150,"title":{},"name":{},"text":{"2":{},"4":{},"6":{},"7":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"42":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"55":{},"64":{},"65":{},"67":{}},"component":{}}],["sample_interpolation::linear",{"_index":2525,"title":{},"name":{},"text":{"67":{}},"component":{}}],["sample_typ",{"_index":2069,"title":{},"name":{},"text":{"46":{}},"component":{}}],["sampling_r",{"_index":674,"title":{},"name":{},"text":{"4":{},"39":{}},"component":{}}],["satisfi",{"_index":826,"title":{},"name":{},"text":{"5":{}},"component":{}}],["savvi",{"_index":745,"title":{},"name":{},"text":{"4":{}},"component":{}}],["saw",{"_index":499,"title":{"54":{}},"name":{},"text":{"3":{},"10":{},"54":{}},"component":{}}],["saw_osc",{"_index":2275,"title":{},"name":{"54":{}},"text":{"54":{}},"component":{}}],["sawtooth",{"_index":1076,"title":{},"name":{},"text":{"10":{}},"component":{}}],["scalar",{"_index":2347,"title":{},"name":{},"text":{"59":{}},"component":{}}],["scale",{"_index":208,"title":{},"name":{},"text":{"2":{},"49":{},"59":{},"62":{},"66":{}},"component":{}}],["scene",{"_index":699,"title":{},"name":{},"text":{"4":{}},"component":{}}],["scheme",{"_index":987,"title":{},"name":{},"text":{"8":{},"21":{},"22":{},"23":{},"24":{},"33":{}},"component":{}}],["scope",{"_index":267,"title":{},"name":{},"text":{"2":{},"59":{},"60":{},"61":{}},"component":{}}],["scratch",{"_index":324,"title":{},"name":{},"text":{"2":{}},"component":{}}],["sculpt",{"_index":1052,"title":{},"name":{},"text":{"10":{}},"component":{}}],["second",{"_index":190,"title":{},"name":{},"text":{"2":{},"5":{},"6":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"35":{},"36":{},"38":{},"39":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"55":{},"60":{},"63":{},"64":{},"65":{}},"component":{}}],["section",{"_index":18,"title":{},"name":{},"text":{"2":{},"8":{},"9":{}},"component":{}}],["see",{"_index":212,"title":{},"name":{},"text":{"2":{},"11":{},"21":{},"22":{},"23":{},"24":{},"25":{},"27":{},"31":{},"37":{},"39":{},"48":{},"64":{},"65":{}},"component":{}}],["seek(std::uint64_t",{"_index":1676,"title":{},"name":{},"text":{"38":{}},"component":{}}],["segment",{"_index":1097,"title":{"48-3":{}},"name":{},"text":{"10":{},"48":{}},"component":{}}],["select",{"_index":571,"title":{},"name":{},"text":{"4":{}},"component":{}}],["self",{"_index":103,"title":{},"name":{},"text":{"2":{},"4":{},"48":{}},"component":{}}],["semant",{"_index":913,"title":{},"name":{},"text":{"6":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{}},"component":{}}],["semiton",{"_index":2414,"title":{},"name":{},"text":{"62":{},"66":{}},"component":{}}],["send",{"_index":1958,"title":{},"name":{},"text":{"44":{}},"component":{}}],["sens",{"_index":2507,"title":{},"name":{},"text":{"66":{}},"component":{}}],["sent",{"_index":2133,"title":{},"name":{},"text":{"48":{}},"component":{}}],["separ",{"_index":951,"title":{},"name":{},"text":{"7":{},"34":{},"46":{}},"component":{}}],["sequenc",{"_index":1549,"title":{},"name":{},"text":{"33":{},"48":{}},"component":{}}],["sequenti",{"_index":2045,"title":{},"name":{},"text":{"46":{},"68":{}},"component":{}}],["seri",{"_index":1306,"title":{},"name":{},"text":{"25":{},"29":{},"49":{}},"component":{}}],["serv",{"_index":906,"title":{},"name":{},"text":{"6":{},"11":{},"35":{},"48":{}},"component":{}}],["set",{"_index":114,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"7":{},"9":{},"10":{},"21":{},"22":{},"23":{},"24":{},"25":{},"29":{},"30":{},"34":{},"35":{},"38":{},"39":{},"42":{},"47":{},"48":{},"49":{},"50":{},"51":{},"53":{},"55":{},"64":{},"65":{}},"component":{}}],["set(freq",{"_index":2487,"title":{},"name":{},"text":{"65":{}},"component":{}}],["set(frequ",{"_index":2481,"title":{},"name":{},"text":{"65":{}},"component":{}}],["setup",{"_index":468,"title":{"5":{}},"name":{"5":{}},"text":{"3":{},"4":{}},"component":{}}],["shape",{"_index":969,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"29":{},"31":{},"47":{},"48":{},"51":{}},"component":{}}],["sharp",{"_index":1526,"title":{},"name":{},"text":{"32":{},"53":{},"54":{},"57":{},"58":{}},"component":{}}],["shelf",{"_index":482,"title":{"16":{},"18":{}},"name":{},"text":{"3":{},"6":{},"16":{},"18":{}},"component":{}}],["shelv",{"_index":1185,"title":{},"name":{},"text":{"16":{},"18":{}},"component":{}}],["shift",{"_index":1355,"title":{},"name":{},"text":{"26":{},"32":{},"33":{}},"component":{}}],["short",{"_index":625,"title":{},"name":{},"text":{"4":{},"25":{},"48":{}},"component":{}}],["shortcut",{"_index":1381,"title":{},"name":{},"text":{"26":{},"27":{},"28":{}},"component":{}}],["shorter",{"_index":1469,"title":{},"name":{},"text":{"31":{}},"component":{}}],["show",{"_index":387,"title":{},"name":{},"text":{"2":{},"3":{},"26":{},"27":{},"28":{},"46":{}},"component":{}}],["shown",{"_index":1438,"title":{},"name":{},"text":{"29":{}},"component":{}}],["side",{"_index":1327,"title":{},"name":{},"text":{"25":{},"27":{},"29":{},"47":{},"50":{}},"component":{}}],["signal",{"_index":156,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"7":{},"8":{},"10":{},"11":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"34":{},"35":{},"36":{},"46":{},"47":{},"48":{},"50":{},"51":{},"53":{},"54":{},"55":{},"57":{},"58":{},"59":{},"64":{}},"component":{}}],["signal_conditioner.hpp",{"_index":408,"title":{},"name":{},"text":{"2":{}},"component":{}}],["signal_conditioner::operator()(float",{"_index":366,"title":{},"name":{},"text":{"2":{}},"component":{}}],["signal’",{"_index":926,"title":{},"name":{},"text":{"7":{},"26":{},"30":{}},"component":{}}],["signatur",{"_index":1800,"title":{},"name":{},"text":{"44":{}},"component":{}}],["similar",{"_index":1298,"title":{},"name":{},"text":{"25":{},"49":{}},"component":{}}],["simpl",{"_index":436,"title":{},"name":{},"text":{"3":{},"4":{},"8":{},"26":{},"28":{},"56":{}},"component":{}}],["simpler",{"_index":956,"title":{},"name":{},"text":{"7":{}},"component":{}}],["simplest",{"_index":1515,"title":{},"name":{},"text":{"31":{},"32":{}},"component":{}}],["simpli",{"_index":327,"title":{},"name":{},"text":{"2":{},"4":{},"21":{},"22":{},"23":{},"24":{},"46":{}},"component":{}}],["simplic",{"_index":438,"title":{},"name":{},"text":{"3":{},"4":{},"6":{},"32":{},"35":{}},"component":{}}],["simplifi",{"_index":88,"title":{},"name":{},"text":{"2":{},"3":{}},"component":{}}],["simultan",{"_index":1388,"title":{},"name":{},"text":{"27":{},"55":{}},"component":{}}],["sin",{"_index":2305,"title":{},"name":{},"text":{"55":{},"56":{}},"component":{}}],["sin(phas",{"_index":184,"title":{},"name":{},"text":{"2":{}},"component":{}}],["sin/co",{"_index":2310,"title":{},"name":{},"text":{"55":{}},"component":{}}],["sin_cos_gen",{"_index":2282,"title":{},"name":{"55":{}},"text":{"55":{}},"component":{}}],["sin_cos_gen(f",{"_index":2309,"title":{},"name":{},"text":{"55":{}},"component":{}}],["sin_cos_gen(frequ",{"_index":2302,"title":{},"name":{},"text":{"55":{}},"component":{}}],["sin_osc",{"_index":2316,"title":{},"name":{"56":{}},"text":{"56":{}},"component":{}}],["sin_osc.cpp",{"_index":880,"title":{},"name":{},"text":{"5":{}},"component":{}}],["sine",{"_index":497,"title":{"55":{},"56":{}},"name":{},"text":{"3":{},"5":{},"10":{},"51":{},"55":{},"56":{}},"component":{}}],["singl",{"_index":343,"title":{},"name":{},"text":{"2":{},"6":{},"7":{},"31":{},"35":{},"48":{},"56":{}},"component":{}}],["sit",{"_index":2123,"title":{},"name":{},"text":{"48":{}},"component":{}}],["size",{"_index":1017,"title":{},"name":{},"text":{"9":{},"32":{},"33":{},"38":{},"39":{},"42":{},"43":{},"44":{},"46":{},"65":{},"68":{}},"component":{}}],["size_",{"_index":1805,"title":{},"name":{},"text":{"44":{}},"component":{}}],["skew",{"_index":2290,"title":{},"name":{},"text":{"55":{}},"component":{}}],["skim",{"_index":716,"title":{},"name":{},"text":{"4":{}},"component":{}}],["skirt",{"_index":479,"title":{"14":{}},"name":{},"text":{"3":{},"14":{}},"component":{}}],["slightli",{"_index":1367,"title":{},"name":{},"text":{"26":{},"27":{}},"component":{}}],["slope",{"_index":1431,"title":{},"name":{},"text":{"29":{},"35":{},"36":{}},"component":{}}],["slope’",{"_index":1619,"title":{},"name":{},"text":{"36":{}},"component":{}}],["slow",{"_index":1519,"title":{},"name":{},"text":{"32":{},"36":{}},"component":{}}],["small",{"_index":442,"title":{},"name":{},"text":{"3":{},"4":{},"9":{},"38":{},"56":{}},"component":{}}],["smaller",{"_index":708,"title":{},"name":{},"text":{"4":{},"62":{}},"component":{}}],["smallest",{"_index":2434,"title":{},"name":{},"text":{"62":{},"66":{}},"component":{}}],["smear",{"_index":1441,"title":{},"name":{},"text":{"29":{}},"component":{}}],["smith’",{"_index":1452,"title":{},"name":{},"text":{"30":{}},"component":{}}],["smooth",{"_index":1352,"title":{},"name":{},"text":{"26":{},"35":{},"47":{},"51":{}},"component":{}}],["smoother",{"_index":372,"title":{},"name":{},"text":{"2":{},"24":{}},"component":{}}],["snr",{"_index":1528,"title":{},"name":{},"text":{"32":{}},"component":{}}],["soft",{"_index":487,"title":{"24":{}},"name":{},"text":{"3":{},"4":{},"7":{},"22":{},"23":{},"24":{},"26":{}},"component":{}}],["soft_knee_compressor",{"_index":1282,"title":{},"name":{"24":{}},"text":{"24":{}},"component":{}}],["soft_knee_compressor(comp",{"_index":1293,"title":{},"name":{},"text":{"24":{}},"component":{}}],["soft_knee_compressor(decibel",{"_index":1290,"title":{},"name":{},"text":{"24":{}},"component":{}}],["soft_knee_compressor(t",{"_index":1292,"title":{},"name":{},"text":{"24":{}},"component":{}}],["soft_ped",{"_index":1917,"title":{},"name":{},"text":{"44":{}},"component":{}}],["softer",{"_index":1303,"title":{},"name":{},"text":{"25":{}},"component":{}}],["softwar",{"_index":536,"title":{},"name":{},"text":{"3":{},"27":{}},"component":{}}],["solut",{"_index":858,"title":{},"name":{},"text":{"5":{}},"component":{}}],["someth",{"_index":2054,"title":{},"name":{},"text":{"46":{},"60":{}},"component":{}}],["sometim",{"_index":981,"title":{},"name":{},"text":{"8":{}},"component":{}}],["somewhat",{"_index":314,"title":{},"name":{},"text":{"2":{}},"component":{}}],["somewher",{"_index":266,"title":{},"name":{},"text":{"2":{}},"component":{}}],["song_numb",{"_index":2012,"title":{},"name":{},"text":{"44":{}},"component":{}}],["song_posit",{"_index":1788,"title":{"44-15":{}},"name":{},"text":{"44":{}},"component":{}}],["song_position(std::uint16_t",{"_index":2009,"title":{},"name":{},"text":{"44":{}},"component":{}}],["song_position(std::uint8_t",{"_index":2010,"title":{},"name":{},"text":{"44":{}},"component":{}}],["song_select",{"_index":1789,"title":{"44-16":{}},"name":{},"text":{"44":{}},"component":{}}],["song_select(std::uint8_t",{"_index":2011,"title":{},"name":{},"text":{"44":{}},"component":{}}],["soon",{"_index":2126,"title":{},"name":{},"text":{"48":{}},"component":{}}],["sostenuto",{"_index":1915,"title":{},"name":{},"text":{"44":{}},"component":{}}],["sound",{"_index":323,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"8":{},"10":{},"24":{},"44":{}},"component":{}}],["sound_controller_1",{"_index":1923,"title":{},"name":{},"text":{"44":{}},"component":{}}],["sound_controller_10",{"_index":1943,"title":{},"name":{},"text":{"44":{}},"component":{}}],["sound_controller_2",{"_index":1925,"title":{},"name":{},"text":{"44":{}},"component":{}}],["sound_controller_3",{"_index":1928,"title":{},"name":{},"text":{"44":{}},"component":{}}],["sound_controller_4",{"_index":1930,"title":{},"name":{},"text":{"44":{}},"component":{}}],["sound_controller_5",{"_index":1932,"title":{},"name":{},"text":{"44":{}},"component":{}}],["sound_controller_6",{"_index":1935,"title":{},"name":{},"text":{"44":{}},"component":{}}],["sound_controller_7",{"_index":1937,"title":{},"name":{},"text":{"44":{}},"component":{}}],["sound_controller_8",{"_index":1939,"title":{},"name":{},"text":{"44":{}},"component":{}}],["sound_controller_9",{"_index":1941,"title":{},"name":{},"text":{"44":{}},"component":{}}],["soundscap",{"_index":1465,"title":{},"name":{},"text":{"31":{}},"component":{}}],["sourc",{"_index":112,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"48":{},"55":{}},"component":{}}],["sp",{"_index":1101,"title":{},"name":{},"text":{"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"35":{},"36":{},"38":{},"39":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"55":{},"64":{},"65":{}},"component":{}}],["spaciou",{"_index":1464,"title":{},"name":{},"text":{"31":{}},"component":{}}],["span",{"_index":193,"title":{},"name":{},"text":{"2":{}},"component":{}}],["spars",{"_index":262,"title":{},"name":{},"text":{"2":{}},"component":{}}],["speaker",{"_index":647,"title":{},"name":{},"text":{"4":{}},"component":{}}],["special",{"_index":537,"title":{},"name":{},"text":{"3":{},"36":{},"47":{},"48":{},"51":{}},"component":{}}],["specif",{"_index":320,"title":{"44-7":{}},"name":{},"text":{"2":{},"7":{},"8":{},"9":{},"11":{},"37":{},"44":{},"45":{},"48":{},"66":{}},"component":{}}],["specifi",{"_index":1018,"title":{},"name":{},"text":{"9":{},"16":{},"18":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"29":{},"30":{},"33":{},"34":{},"35":{},"36":{},"48":{},"49":{},"52":{},"53":{},"65":{},"68":{}},"component":{}}],["spectral",{"_index":1086,"title":{},"name":{},"text":{"10":{},"47":{},"50":{}},"component":{}}],["spectrum",{"_index":1764,"title":{},"name":{},"text":{"42":{}},"component":{}}],["sqrt",{"_index":1418,"title":{},"name":{},"text":{"28":{}},"component":{}}],["squar",{"_index":500,"title":{"57":{}},"name":{},"text":{"3":{},"4":{},"10":{},"25":{},"27":{},"28":{},"29":{},"32":{},"57":{}},"component":{}}],["square_osc",{"_index":727,"title":{},"name":{"57":{}},"text":{"4":{},"57":{}},"component":{}}],["squash",{"_index":1235,"title":{},"name":{},"text":{"22":{}},"component":{}}],["src",{"_index":97,"title":{},"name":{},"text":{"2":{}},"component":{}}],["stabil",{"_index":2285,"title":{},"name":{},"text":{"55":{}},"component":{}}],["stage",{"_index":1450,"title":{},"name":{},"text":{"30":{}},"component":{}}],["staircas",{"_index":1353,"title":{"27-3":{}},"name":{},"text":{"26":{},"27":{}},"component":{}}],["stamp",{"_index":2029,"title":{},"name":{},"text":{"45":{}},"component":{}}],["stand",{"_index":1297,"title":{},"name":{},"text":{"25":{},"59":{},"60":{},"61":{}},"component":{}}],["standard",{"_index":85,"title":{},"name":{},"text":{"2":{},"26":{},"43":{},"44":{}},"component":{}}],["start",{"_index":471,"title":{"4":{},"44-19":{}},"name":{},"text":{"3":{},"4":{},"8":{},"10":{},"38":{},"39":{},"44":{},"45":{},"47":{},"48":{},"50":{},"51":{},"64":{},"65":{}},"component":{}}],["startup",{"_index":627,"title":{},"name":{},"text":{"4":{}},"component":{}}],["state",{"_index":449,"title":{"65-9":{}},"name":{},"text":{"3":{},"4":{},"9":{},"11":{},"21":{},"34":{},"39":{},"45":{},"48":{},"55":{},"65":{}},"component":{}}],["stateless",{"_index":448,"title":{},"name":{},"text":{"3":{},"54":{},"56":{},"57":{},"58":{}},"component":{}}],["static",{"_index":1627,"title":{},"name":{},"text":{"37":{},"44":{},"64":{},"66":{}},"component":{}}],["static_assert(div",{"_index":1409,"title":{},"name":{},"text":{"27":{}},"component":{}}],["statu",{"_index":1780,"title":{"44-6":{}},"name":{},"text":{"44":{}},"component":{}}],["std",{"_index":1649,"title":{},"name":{},"text":{"37":{}},"component":{}}],["std::array",{"_index":2545,"title":{},"name":{},"text":{"68":{}},"component":{}}],["std::assignable_from",{"_index":1059,"title":{},"name":{},"text":{"10":{}},"component":{}}],["std::convertible_to",{"_index":1770,"title":{},"name":{},"text":{"43":{}},"component":{}}],["std::copy_construct",{"_index":1058,"title":{},"name":{},"text":{"10":{}},"component":{}}],["std::cout",{"_index":1645,"title":{},"name":{},"text":{"37":{},"44":{}},"component":{}}],["std::default_initializ",{"_index":1060,"title":{},"name":{},"text":{"10":{}},"component":{}}],["std::endl",{"_index":1646,"title":{},"name":{},"text":{"37":{},"44":{}},"component":{}}],["std::floating_point",{"_index":1136,"title":{},"name":{},"text":{"11":{},"43":{},"46":{},"62":{}},"component":{}}],["std::integr",{"_index":1135,"title":{},"name":{},"text":{"11":{},"43":{}},"component":{}}],["std::pair",{"_index":2303,"title":{},"name":{},"text":{"55":{}},"component":{}}],["std::random_access_iter",{"_index":1776,"title":{},"name":{},"text":{"43":{},"46":{}},"component":{}}],["std::same_a",{"_index":1143,"title":{},"name":{},"text":{"11":{},"43":{}},"component":{}}],["std::size_t",{"_index":773,"title":{},"name":{},"text":{"4":{},"33":{},"37":{},"38":{},"39":{},"43":{},"45":{},"46":{},"48":{},"68":{}},"component":{}}],["std::string",{"_index":1629,"title":{},"name":{},"text":{"37":{},"38":{}},"component":{}}],["std::uint16_t",{"_index":2006,"title":{},"name":{},"text":{"44":{}},"component":{}}],["std::uint32_t",{"_index":1679,"title":{},"name":{},"text":{"38":{},"44":{}},"component":{}}],["std::uint64_t",{"_index":1673,"title":{},"name":{},"text":{"38":{}},"component":{}}],["std::uint8_t",{"_index":786,"title":{},"name":{},"text":{"4":{},"44":{}},"component":{}}],["std::vector",{"_index":1626,"title":{},"name":{},"text":{"37":{},"48":{},"67":{},"68":{}},"component":{}}],["step",{"_index":1527,"title":{},"name":{},"text":{"32":{},"33":{},"65":{}},"component":{}}],["stereo",{"_index":697,"title":{},"name":{},"text":{"4":{},"22":{},"23":{},"24":{},"39":{},"46":{}},"component":{}}],["still",{"_index":1392,"title":{},"name":{},"text":{"27":{}},"component":{}}],["stock",{"_index":861,"title":{},"name":{},"text":{"5":{}},"component":{}}],["stop",{"_index":1707,"title":{"44-21":{}},"name":{},"text":{"39":{},"44":{}},"component":{}}],["stopband",{"_index":1522,"title":{},"name":{},"text":{"32":{}},"component":{}}],["storag",{"_index":1482,"title":{},"name":{},"text":{"31":{},"67":{},"68":{}},"component":{}}],["storage_typ",{"_index":1489,"title":{},"name":{},"text":{"31":{},"67":{},"68":{}},"component":{}}],["store",{"_index":347,"title":{},"name":{},"text":{"2":{},"4":{},"32":{},"33":{},"48":{},"55":{},"56":{},"68":{}},"component":{}}],["straight",{"_index":42,"title":{},"name":{},"text":{"2":{},"52":{}},"component":{}}],["straightforward",{"_index":568,"title":{},"name":{},"text":{"4":{},"9":{},"38":{}},"component":{}}],["stream",{"_index":514,"title":{"42":{}},"name":{},"text":{"3":{},"4":{},"9":{},"39":{}},"component":{}}],["stream.process(proc",{"_index":820,"title":{},"name":{},"text":{"4":{}},"component":{}}],["stream’",{"_index":1724,"title":{},"name":{},"text":{"39":{}},"component":{}}],["strength",{"_index":997,"title":{},"name":{},"text":{"8":{}},"component":{}}],["string",{"_index":1320,"title":{},"name":{},"text":{"25":{},"27":{},"29":{},"44":{}},"component":{}}],["struct",{"_index":333,"title":{},"name":{},"text":{"2":{},"4":{},"6":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"32":{},"33":{},"34":{},"35":{},"36":{},"39":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{}},"component":{}}],["structur",{"_index":5,"title":{"2-3":{}},"name":{},"text":{"2":{}},"component":{}}],["studio",{"_index":531,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["styliz",{"_index":2120,"title":{},"name":{},"text":{"48":{}},"component":{}}],["sub",{"_index":115,"title":{},"name":{},"text":{"2":{},"31":{},"67":{}},"component":{}}],["subclass",{"_index":694,"title":{},"name":{},"text":{"4":{},"32":{},"36":{},"39":{},"42":{},"44":{},"47":{},"48":{},"51":{},"63":{},"67":{}},"component":{}}],["submodul",{"_index":830,"title":{},"name":{},"text":{"5":{}},"component":{}}],["subscript",{"_index":1767,"title":{},"name":{},"text":{"43":{}},"component":{}}],["subsequ",{"_index":1449,"title":{},"name":{},"text":{"30":{}},"component":{}}],["substanti",{"_index":1356,"title":{},"name":{},"text":{"26":{}},"component":{}}],["subtl",{"_index":1289,"title":{},"name":{},"text":{"24":{}},"component":{}}],["subtract",{"_index":1152,"title":{},"name":{},"text":{"11":{},"33":{},"53":{},"54":{},"57":{}},"component":{}}],["success",{"_index":542,"title":{},"name":{},"text":{"3":{},"5":{},"64":{}},"component":{}}],["such",{"_index":69,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"7":{},"9":{},"10":{},"11":{},"27":{},"29":{},"31":{},"38":{},"48":{},"56":{},"59":{},"64":{},"68":{}},"component":{}}],["sudden",{"_index":990,"title":{},"name":{},"text":{"8":{},"23":{},"29":{}},"component":{}}],["sudo",{"_index":863,"title":{},"name":{},"text":{"5":{}},"component":{}}],["suggest",{"_index":439,"title":{},"name":{},"text":{"3":{}},"component":{}}],["suitabl",{"_index":205,"title":{},"name":{},"text":{"2":{},"10":{},"27":{},"35":{},"37":{},"55":{},"59":{},"64":{}},"component":{}}],["sum",{"_index":493,"title":{"33":{}},"name":{},"text":{"3":{},"32":{},"33":{},"46":{},"51":{}},"component":{}}],["superior",{"_index":1394,"title":{},"name":{},"text":{"27":{}},"component":{}}],["suppli",{"_index":1214,"title":{},"name":{},"text":{"21":{},"22":{},"23":{},"24":{}},"component":{}}],["support",{"_index":122,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"9":{},"22":{},"24":{},"37":{},"44":{},"45":{}},"component":{}}],["sure",{"_index":619,"title":{},"name":{},"text":{"4":{},"5":{}},"component":{}}],["suscept",{"_index":1331,"title":{},"name":{},"text":{"25":{}},"component":{}}],["sustain",{"_index":802,"title":{},"name":{},"text":{"4":{},"10":{},"44":{},"48":{}},"component":{}}],["sustain_level",{"_index":2175,"title":{},"name":{},"text":{"48":{}},"component":{}}],["sustain_level(decibel",{"_index":2183,"title":{},"name":{},"text":{"48":{}},"component":{}}],["sustain_r",{"_index":2177,"title":{},"name":{},"text":{"48":{}},"component":{}}],["sustain_rate(dur",{"_index":2184,"title":{},"name":{},"text":{"48":{}},"component":{}}],["sval",{"_index":2307,"title":{},"name":{},"text":{"55":{}},"component":{}}],["switch",{"_index":1286,"title":{},"name":{},"text":{"24":{}},"component":{}}],["symbol",{"_index":2453,"title":{},"name":{},"text":{"64":{}},"component":{}}],["symmetri",{"_index":2288,"title":{},"name":{},"text":{"55":{}},"component":{}}],["synchron",{"_index":2298,"title":{},"name":{},"text":{"55":{}},"component":{}}],["syntact",{"_index":340,"title":{},"name":{},"text":{"2":{}},"component":{}}],["syntax",{"_index":1779,"title":{},"name":{},"text":{"43":{},"44":{},"46":{}},"component":{}}],["synth",{"_index":123,"title":{},"name":{"10":{}},"text":{"2":{},"3":{},"4":{}},"component":{}}],["synth.start",{"_index":819,"title":{},"name":{},"text":{"4":{}},"component":{}}],["synth.stop",{"_index":821,"title":{},"name":{},"text":{"4":{}},"component":{}}],["synthes",{"_index":310,"title":{"4-5":{}},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"42":{},"56":{}},"component":{}}],["synthesi",{"_index":2317,"title":{},"name":{},"text":{"56":{}},"component":{}}],["synthesis",{"_index":133,"title":{},"name":{},"text":{"2":{},"10":{}},"component":{}}],["sysex",{"_index":1831,"title":{},"name":{},"text":{"44":{}},"component":{}}],["sysex_end",{"_index":1836,"title":{},"name":{},"text":{"44":{}},"component":{}}],["system",{"_index":68,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"9":{},"42":{},"45":{},"66":{}},"component":{}}],["system’",{"_index":881,"title":{},"name":{},"text":{"5":{}},"component":{}}],["t",{"_index":1063,"title":{},"name":{},"text":{"10":{},"11":{},"22":{},"23":{},"24":{},"32":{},"33":{},"46":{},"48":{},"62":{},"67":{},"68":{}},"component":{}}],["t(o",{"_index":1093,"title":{},"name":{},"text":{"10":{}},"component":{}}],["t(w",{"_index":1102,"title":{},"name":{},"text":{"10":{}},"component":{}}],["tabl",{"_index":422,"title":{"3-2":{}},"name":{},"text":{"3":{},"56":{},"59":{}},"component":{}}],["tag",{"_index":575,"title":{},"name":{},"text":{"4":{}},"component":{}}],["take",{"_index":243,"title":{},"name":{},"text":{"2":{},"4":{},"10":{},"39":{},"45":{},"46":{},"48":{},"59":{},"60":{},"61":{},"63":{}},"component":{}}],["taken",{"_index":654,"title":{},"name":{},"text":{"4":{},"27":{}},"component":{}}],["talk",{"_index":1796,"title":{},"name":{},"text":{"44":{}},"component":{}}],["tap",{"_index":1478,"title":{},"name":{},"text":{"31":{}},"component":{}}],["taper",{"_index":1091,"title":{},"name":{},"text":{"10":{},"47":{},"50":{},"51":{}},"component":{}}],["target",{"_index":1677,"title":{},"name":{},"text":{"38":{}},"component":{}}],["task",{"_index":450,"title":{},"name":{},"text":{"3":{},"4":{},"8":{}},"component":{}}],["technic",{"_index":1518,"title":{},"name":{},"text":{"32":{},"55":{}},"component":{}}],["techniqu",{"_index":446,"title":{},"name":{},"text":{"3":{},"53":{},"54":{},"57":{},"58":{}},"component":{}}],["technolog",{"_index":1044,"title":{},"name":{},"text":{"10":{}},"component":{}}],["templat",{"_index":1057,"title":{"62-4":{}},"name":{},"text":{"10":{},"11":{},"26":{},"27":{},"28":{},"31":{},"32":{},"33":{},"43":{},"44":{},"45":{},"46":{},"48":{},"62":{},"67":{},"68":{}},"component":{}}],["tempo",{"_index":1799,"title":{},"name":{},"text":{"44":{}},"component":{}}],["ten",{"_index":2341,"title":{},"name":{},"text":{"59":{}},"component":{}}],["tenth",{"_index":2344,"title":{},"name":{},"text":{"59":{}},"component":{}}],["term",{"_index":970,"title":{},"name":{},"text":{"8":{}},"component":{}}],["test",{"_index":76,"title":{"5-9":{}},"name":{},"text":{"2":{},"5":{},"9":{}},"component":{}}],["that’",{"_index":744,"title":{},"name":{},"text":{"4":{}},"component":{}}],["therebi",{"_index":1246,"title":{},"name":{},"text":{"22":{},"23":{},"24":{}},"component":{}}],["therefor",{"_index":1719,"title":{},"name":{},"text":{"39":{},"66":{}},"component":{}}],["there’",{"_index":700,"title":{},"name":{},"text":{"4":{}},"component":{}}],["thin",{"_index":62,"title":{},"name":{},"text":{"2":{}},"component":{}}],["thing",{"_index":719,"title":{},"name":{},"text":{"4":{}},"component":{}}],["this)(i._phas",{"_index":741,"title":{},"name":{},"text":{"4":{}},"component":{}}],["this)[0].config(r",{"_index":2207,"title":{},"name":{},"text":{"48":{}},"component":{}}],["this)[1].config(r",{"_index":2209,"title":{},"name":{},"text":{"48":{}},"component":{}}],["this)[2].config(r",{"_index":2213,"title":{},"name":{},"text":{"48":{}},"component":{}}],["this)[2].level(lin_float(level",{"_index":2211,"title":{},"name":{},"text":{"48":{}},"component":{}}],["this)[3].config(r",{"_index":2215,"title":{},"name":{},"text":{"48":{}},"component":{}}],["those",{"_index":696,"title":{},"name":{},"text":{"4":{}},"component":{}}],["three",{"_index":1760,"title":{},"name":{},"text":{"42":{}},"component":{}}],["threshold",{"_index":944,"title":{},"name":{},"text":{"7":{},"22":{},"23":{},"24":{},"34":{},"36":{}},"component":{}}],["threshold(decibel",{"_index":1240,"title":{},"name":{},"text":{"22":{},"23":{},"24":{}},"component":{}}],["through",{"_index":1265,"title":{},"name":{},"text":{"23":{},"25":{},"29":{},"33":{},"46":{},"49":{}},"component":{}}],["throughout",{"_index":749,"title":{},"name":{},"text":{"4":{},"11":{}},"component":{}}],["thu",{"_index":2035,"title":{},"name":{},"text":{"45":{}},"component":{}}],["ti",{"_index":1310,"title":{},"name":{},"text":{"25":{}},"component":{}}],["tightli",{"_index":1400,"title":{},"name":{},"text":{"27":{}},"component":{}}],["timbr",{"_index":1927,"title":{},"name":{},"text":{"44":{}},"component":{}}],["time",{"_index":192,"title":{},"name":{},"text":{"2":{},"4":{},"8":{},"22":{},"26":{},"27":{},"29":{},"31":{},"32":{},"33":{},"36":{},"39":{},"44":{},"45":{},"49":{},"55":{},"56":{},"59":{},"60":{},"61":{},"63":{},"64":{}},"component":{}}],["timing_tick",{"_index":1791,"title":{"44-18":{}},"name":{},"text":{"44":{}},"component":{}}],["titl",{"_index":1384,"title":{},"name":{},"text":{"27":{}},"component":{}}],["togeth",{"_index":1311,"title":{},"name":{},"text":{"25":{}},"component":{}}],["tonal",{"_index":1472,"title":{},"name":{},"text":{"31":{}},"component":{}}],["tool",{"_index":892,"title":{},"name":{},"text":{"6":{},"34":{}},"component":{}}],["tooth",{"_index":1051,"title":{"54":{}},"name":{},"text":{"10":{},"54":{}},"component":{}}],["total",{"_index":1550,"title":{},"name":{},"text":{"33":{}},"component":{}}],["total_dur",{"_index":234,"title":{},"name":{},"text":{"2":{}},"component":{}}],["touch",{"_index":2246,"title":{},"name":{},"text":{"51":{},"65":{}},"component":{}}],["toward",{"_index":2085,"title":{},"name":{},"text":{"47":{},"50":{}},"component":{}}],["track",{"_index":1213,"title":{},"name":{},"text":{"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"29":{},"64":{},"65":{}},"component":{}}],["tradeoff",{"_index":999,"title":{},"name":{},"text":{"8":{}},"component":{}}],["tradit",{"_index":1049,"title":{},"name":{},"text":{"10":{}},"component":{}}],["transfer",{"_index":964,"title":{},"name":{},"text":{"7":{},"9":{}},"component":{}}],["transform",{"_index":127,"title":{},"name":{},"text":{"2":{},"26":{},"28":{}},"component":{}}],["transient",{"_index":1238,"title":{"27-4":{}},"name":{},"text":{"22":{},"27":{},"29":{}},"component":{}}],["transit",{"_index":1284,"title":{"48-2":{}},"name":{},"text":{"24":{},"48":{},"53":{},"54":{},"57":{}},"component":{}}],["transmiss",{"_index":1027,"title":{},"name":{},"text":{"9":{}},"component":{}}],["transmit",{"_index":1019,"title":{},"name":{},"text":{"9":{}},"component":{}}],["transpar",{"_index":1288,"title":{},"name":{},"text":{"24":{}},"component":{}}],["transplant",{"_index":65,"title":{},"name":{},"text":{"2":{}},"component":{}}],["treat",{"_index":2332,"title":{},"name":{},"text":{"58":{}},"component":{}}],["tremolo",{"_index":1961,"title":{},"name":{},"text":{"44":{}},"component":{}}],["tri",{"_index":870,"title":{},"name":{},"text":{"5":{}},"component":{}}],["triangl",{"_index":502,"title":{"58":{}},"name":{},"text":{"3":{},"10":{},"58":{}},"component":{}}],["triangle_osc",{"_index":2326,"title":{},"name":{"58":{}},"text":{"58":{}},"component":{}}],["trigger",{"_index":762,"title":{},"name":{},"text":{"4":{}},"component":{}}],["true",{"_index":1406,"title":{},"name":{},"text":{"27":{},"28":{},"34":{},"38":{},"48":{},"65":{},"66":{}},"component":{}}],["tune_request",{"_index":1790,"title":{"44-17":{}},"name":{},"text":{"44":{}},"component":{}}],["turn",{"_index":1589,"title":{},"name":{},"text":{"34":{},"64":{}},"component":{}}],["tutori",{"_index":662,"title":{},"name":{},"text":{"4":{}},"component":{}}],["two",{"_index":33,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"10":{},"25":{},"34":{},"39":{},"46":{},"47":{},"51":{},"59":{},"62":{},"65":{}},"component":{}}],["type",{"_index":8,"title":{"2-5":{},"11-6":{},"31-6":{},"31-8":{},"32-6":{},"33-6":{},"33-7":{},"46-7":{},"67-6":{},"67-8":{},"68-6":{},"68-8":{}},"name":{},"text":{"2":{},"4":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"53":{},"55":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{}},"component":{}}],["typenam",{"_index":1487,"title":{},"name":{},"text":{"31":{},"67":{}},"component":{}}],["typesaf",{"_index":214,"title":{},"name":{},"text":{"2":{},"11":{}},"component":{}}],["typic",{"_index":145,"title":{},"name":{},"text":{"2":{},"4":{},"8":{},"9":{},"10":{},"11":{},"22":{},"23":{},"24":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"46":{},"48":{}},"component":{}}],["u",{"_index":1132,"title":{},"name":{},"text":{"11":{}},"component":{}}],["u(b",{"_index":1145,"title":{},"name":{},"text":{"11":{}},"component":{}}],["u(v",{"_index":1144,"title":{},"name":{},"text":{"11":{}},"component":{}}],["u::unit_typ",{"_index":1138,"title":{},"name":{},"text":{"11":{}},"component":{}}],["u::value_typ",{"_index":1137,"title":{},"name":{},"text":{"11":{}},"component":{}}],["ubuntu",{"_index":849,"title":{},"name":{},"text":{"5":{}},"component":{}}],["unchang",{"_index":1232,"title":{},"name":{},"text":{"22":{},"23":{},"24":{}},"component":{}}],["undefin",{"_index":1126,"title":{},"name":{},"text":{"11":{},"39":{},"45":{},"67":{},"68":{}},"component":{}}],["under",{"_index":418,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"8":{}},"component":{}}],["underli",{"_index":1133,"title":{},"name":{},"text":{"11":{},"31":{},"33":{},"62":{},"64":{},"67":{},"68":{}},"component":{}}],["understand",{"_index":105,"title":{},"name":{},"text":{"2":{},"4":{},"7":{}},"component":{}}],["uniqu",{"_index":935,"title":{},"name":{},"text":{"7":{},"10":{},"11":{},"27":{},"37":{}},"component":{}}],["unit",{"_index":213,"title":{"11":{},"11-2":{},"11-12":{}},"name":{"11":{}},"text":{"2":{},"3":{},"4":{},"11":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{}},"component":{}}],["unit_typ",{"_index":1134,"title":{},"name":{},"text":{"11":{},"59":{},"60":{},"61":{},"62":{},"64":{}},"component":{}}],["univers",{"_index":554,"title":{"4-4":{}},"name":{},"text":{},"component":{}}],["unix",{"_index":868,"title":{},"name":{},"text":{"5":{}},"component":{}}],["unless",{"_index":1373,"title":{},"name":{},"text":{"26":{},"27":{},"59":{},"60":{},"61":{}},"component":{}}],["unlik",{"_index":1588,"title":{},"name":{},"text":{"34":{},"51":{}},"component":{}}],["unorthodox",{"_index":2057,"title":{},"name":{},"text":{"46":{}},"component":{}}],["unsaf",{"_index":248,"title":{},"name":{},"text":{"2":{},"4":{}},"component":{}}],["unspecifi",{"_index":1141,"title":{},"name":{},"text":{"11":{},"39":{},"46":{},"48":{}},"component":{}}],["unwant",{"_index":1085,"title":{},"name":{},"text":{"10":{},"29":{},"34":{}},"component":{}}],["up",{"_index":695,"title":{},"name":{},"text":{"4":{},"5":{},"11":{},"34":{},"39":{},"42":{},"48":{},"49":{},"58":{},"65":{},"68":{}},"component":{}}],["updat",{"_index":1557,"title":{},"name":{},"text":{"33":{},"65":{}},"component":{}}],["update=fals",{"_index":1573,"title":{},"name":{},"text":{"33":{}},"component":{}}],["update=tru",{"_index":1571,"title":{},"name":{},"text":{"33":{}},"component":{}}],["upgrad",{"_index":2364,"title":{},"name":{},"text":{"59":{}},"component":{}}],["upon",{"_index":2136,"title":{},"name":{},"text":{"48":{}},"component":{}}],["upper",{"_index":1819,"title":{},"name":{},"text":{"44":{},"55":{}},"component":{}}],["upsiz",{"_index":1579,"title":{},"name":{},"text":{"33":{}},"component":{}}],["upward",{"_index":1098,"title":{},"name":{},"text":{"10":{},"47":{},"49":{},"51":{},"52":{}},"component":{}}],["us",{"_index":75,"title":{"5-5":{}},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{}},"component":{}}],["usabl",{"_index":47,"title":{},"name":{},"text":{"2":{},"9":{}},"component":{}}],["usag",{"_index":2041,"title":{"46-2":{}},"name":{},"text":{"59":{},"60":{},"61":{}},"component":{}}],["usb",{"_index":636,"title":{},"name":{},"text":{"4":{}},"component":{}}],["user",{"_index":30,"title":{},"name":{},"text":{"2":{},"4":{},"9":{},"10":{},"37":{},"39":{},"45":{},"46":{},"48":{},"59":{}},"component":{}}],["user’",{"_index":1703,"title":{},"name":{},"text":{"39":{},"42":{}},"component":{}}],["usual",{"_index":247,"title":{},"name":{},"text":{"2":{},"4":{},"64":{},"65":{}},"component":{}}],["util",{"_index":124,"title":{},"name":{},"text":{"2":{},"3":{},"6":{},"11":{},"13":{},"14":{},"19":{},"20":{},"22":{},"23":{},"27":{},"35":{},"44":{},"45":{},"47":{},"49":{},"50":{},"51":{},"52":{},"55":{},"66":{}},"component":{}}],["v",{"_index":1092,"title":{},"name":{},"text":{"10":{},"11":{},"59":{}},"component":{}}],["v.config(w",{"_index":1105,"title":{},"name":{},"text":{"10":{}},"component":{}}],["v.reset",{"_index":1103,"title":{},"name":{},"text":{"10":{}},"component":{}}],["val",{"_index":289,"title":{},"name":{},"text":{"2":{},"4":{},"13":{},"14":{},"19":{},"20":{},"22":{},"23":{},"24":{},"31":{},"33":{},"59":{},"60":{},"61":{},"62":{},"64":{},"68":{}},"component":{}}],["valid",{"_index":1074,"title":{},"name":{},"text":{"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"31":{},"32":{},"36":{},"38":{},"39":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"66":{},"67":{}},"component":{}}],["valu",{"_index":154,"title":{},"name":{},"text":{"2":{},"4":{},"6":{},"7":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"53":{},"55":{},"59":{},"64":{},"65":{},"66":{}},"component":{}}],["value_typ",{"_index":1158,"title":{},"name":{},"text":{"11":{},"31":{},"32":{},"33":{},"46":{},"67":{},"68":{}},"component":{}}],["vari",{"_index":968,"title":{},"name":{},"text":{"8":{},"39":{},"48":{}},"component":{}}],["variabl",{"_index":348,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"32":{},"36":{},"39":{},"46":{},"48":{},"55":{},"63":{},"67":{}},"component":{}}],["variant",{"_index":1415,"title":{},"name":{},"text":{"28":{}},"component":{}}],["variat",{"_index":1351,"title":{},"name":{},"text":{"26":{},"28":{},"44":{}},"component":{}}],["varieti",{"_index":898,"title":{},"name":{},"text":{"6":{},"8":{},"10":{}},"component":{}}],["variou",{"_index":108,"title":{},"name":{},"text":{"2":{},"3":{},"6":{},"7":{},"9":{},"10":{},"11":{},"27":{},"31":{},"34":{},"56":{}},"component":{}}],["vast",{"_index":1608,"title":{},"name":{},"text":{"35":{}},"component":{}}],["vector",{"_index":2205,"title":{},"name":{},"text":{"48":{}},"component":{}}],["veloc",{"_index":661,"title":{},"name":{},"text":{"4":{},"44":{}},"component":{}}],["verbos",{"_index":144,"title":{},"name":{},"text":{"2":{}},"component":{}}],["veri",{"_index":55,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"9":{},"32":{},"48":{},"55":{}},"component":{}}],["versatil",{"_index":891,"title":{},"name":{},"text":{"6":{}},"component":{}}],["version",{"_index":841,"title":{},"name":{},"text":{"5":{},"59":{}},"component":{}}],["via",{"_index":61,"title":{},"name":{},"text":{"2":{},"9":{},"31":{},"37":{}},"component":{}}],["video",{"_index":626,"title":{},"name":{},"text":{"4":{},"10":{}},"component":{}}],["view",{"_index":1402,"title":{},"name":{},"text":{"27":{},"43":{},"46":{}},"component":{}}],["virtual",{"_index":1706,"title":{},"name":{},"text":{"39":{},"42":{}},"component":{}}],["visual",{"_index":836,"title":{},"name":{},"text":{"5":{}},"component":{}}],["voic",{"_index":2131,"title":{},"name":{},"text":{"48":{}},"component":{}}],["void",{"_index":677,"title":{},"name":{},"text":{"4":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"29":{},"30":{},"33":{},"34":{},"35":{},"39":{},"42":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"65":{},"68":{}},"component":{}}],["voltag",{"_index":1309,"title":{},"name":{},"text":{"25":{},"29":{}},"component":{}}],["volum",{"_index":251,"title":{},"name":{},"text":{"2":{},"4":{}},"component":{}}],["von",{"_index":2243,"title":{},"name":{},"text":{"51":{}},"component":{}}],["vs",{"_index":250,"title":{},"name":{},"text":{"2":{},"4":{}},"component":{}}],["vu",{"_index":1762,"title":{},"name":{},"text":{"42":{}},"component":{}}],["w",{"_index":1100,"title":{},"name":{},"text":{"10":{},"23":{},"24":{},"38":{},"47":{},"48":{},"49":{},"50":{},"51":{},"53":{}},"component":{}}],["w(n",{"_index":2092,"title":{},"name":{},"text":{"47":{},"50":{},"51":{}},"component":{}}],["w.num_channel",{"_index":1666,"title":{},"name":{},"text":{"38":{}},"component":{}}],["w.sp",{"_index":1664,"title":{},"name":{},"text":{"38":{}},"component":{}}],["w.write(b",{"_index":1700,"title":{},"name":{},"text":{"38":{}},"component":{}}],["w.write(d",{"_index":1698,"title":{},"name":{},"text":{"38":{}},"component":{}}],["wait",{"_index":2124,"title":{},"name":{},"text":{"48":{}},"component":{}}],["want",{"_index":596,"title":{},"name":{},"text":{"4":{},"5":{},"7":{},"26":{},"27":{},"46":{}},"component":{}}],["warn",{"_index":2361,"title":{},"name":{},"text":{"59":{}},"component":{}}],["wav",{"_index":562,"title":{},"name":{},"text":{"4":{},"9":{},"38":{}},"component":{}}],["wav_bas",{"_index":1654,"title":{"38-3":{}},"name":{},"text":{"38":{}},"component":{}}],["wav_base(wav_bas",{"_index":1657,"title":{},"name":{},"text":{"38":{}},"component":{}}],["wav_read",{"_index":1655,"title":{"38-9":{}},"name":{},"text":{"38":{}},"component":{}}],["wav_reader(char",{"_index":1672,"title":{},"name":{},"text":{"38":{}},"component":{}}],["wav_reader(f",{"_index":1685,"title":{},"name":{},"text":{"38":{}},"component":{}}],["wav_reader(std::str",{"_index":1670,"title":{},"name":{},"text":{"38":{}},"component":{}}],["wav_writ",{"_index":1656,"title":{"38-16":{}},"name":{},"text":{"38":{}},"component":{}}],["wav_writer(f",{"_index":1697,"title":{},"name":{},"text":{"38":{}},"component":{}}],["wave",{"_index":498,"title":{"53":{},"54":{},"56":{},"57":{},"58":{}},"name":{},"text":{"3":{},"4":{},"5":{},"10":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{}},"component":{}}],["waveform",{"_index":936,"title":{},"name":{},"text":{"7":{},"9":{},"10":{},"25":{},"27":{},"29":{},"34":{},"38":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"64":{},"65":{}},"component":{}}],["waveform’",{"_index":2267,"title":{},"name":{},"text":{"53":{},"54":{},"57":{},"58":{}},"component":{}}],["wavet",{"_index":754,"title":{},"name":{},"text":{"4":{}},"component":{}}],["way",{"_index":847,"title":{},"name":{},"text":{"5":{},"44":{},"46":{}},"component":{}}],["wealth",{"_index":241,"title":{},"name":{},"text":{"2":{}},"component":{}}],["well",{"_index":547,"title":{},"name":{},"text":{"3":{},"10":{},"32":{},"44":{},"48":{},"62":{},"66":{}},"component":{}}],["we’ll",{"_index":806,"title":{},"name":{},"text":{"4":{}},"component":{}}],["we’r",{"_index":386,"title":{},"name":{},"text":{"2":{},"4":{}},"component":{}}],["whenev",{"_index":2162,"title":{},"name":{},"text":{"48":{}},"component":{}}],["wherea",{"_index":1468,"title":{},"name":{},"text":{"31":{},"59":{}},"component":{}}],["whichev",{"_index":1157,"title":{},"name":{},"text":{"11":{}},"component":{}}],["whole",{"_index":2065,"title":{},"name":{},"text":{"46":{},"62":{}},"component":{}}],["whose",{"_index":311,"title":{},"name":{},"text":{"2":{},"31":{}},"component":{}}],["wide",{"_index":2257,"title":{},"name":{},"text":{"52":{}},"component":{}}],["wider",{"_index":2088,"title":{},"name":{},"text":{"47":{}},"component":{}}],["width",{"_index":1270,"title":{},"name":{},"text":{"23":{},"24":{},"36":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"57":{}},"component":{}}],["width(decibel",{"_index":1291,"title":{},"name":{},"text":{"24":{}},"component":{}}],["width(float",{"_index":2269,"title":{},"name":{},"text":{"53":{}},"component":{}}],["window",{"_index":505,"title":{"47":{},"50":{},"51":{},"5-7":{}},"name":{},"text":{"3":{},"5":{},"10":{},"32":{},"33":{},"47":{},"50":{},"51":{}},"component":{}}],["window’",{"_index":2086,"title":{},"name":{},"text":{"47":{},"51":{}},"component":{}}],["wish",{"_index":1370,"title":{},"name":{},"text":{"26":{},"27":{}},"component":{}}],["within",{"_index":1081,"title":{},"name":{},"text":{"10":{},"33":{},"46":{},"65":{}},"component":{}}],["without",{"_index":48,"title":{},"name":{},"text":{"2":{},"3":{},"9":{},"46":{},"48":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{}},"component":{}}],["work",{"_index":146,"title":{},"name":{},"text":{"2":{},"7":{},"9":{},"28":{},"38":{},"40":{},"41":{},"53":{},"54":{},"57":{}},"component":{}}],["workstat",{"_index":83,"title":{},"name":{},"text":{"2":{},"9":{}},"component":{}}],["world",{"_index":325,"title":{"4-1":{}},"name":{},"text":{"2":{},"4":{}},"component":{}}],["worri",{"_index":2066,"title":{},"name":{},"text":{"46":{}},"component":{}}],["wors",{"_index":254,"title":{},"name":{},"text":{"2":{},"4":{}},"component":{}}],["worth",{"_index":1325,"title":{},"name":{},"text":{"25":{},"27":{},"29":{}},"component":{}}],["wraparound",{"_index":2459,"title":{},"name":{},"text":{"64":{}},"component":{}}],["wrapper",{"_index":63,"title":{},"name":{},"text":{"2":{}},"component":{}}],["write",{"_index":795,"title":{},"name":{},"text":{"4":{},"9":{},"38":{},"42":{},"48":{}},"component":{}}],["write(concepts::indexablecontain",{"_index":1695,"title":{},"name":{},"text":{"38":{}},"component":{}}],["write(float",{"_index":1694,"title":{},"name":{},"text":{"38":{}},"component":{}}],["written",{"_index":1699,"title":{},"name":{},"text":{"38":{},"68":{}},"component":{}}],["x",{"_index":1768,"title":{},"name":{},"text":{"43":{},"46":{},"67":{}},"component":{}}],["x.size",{"_index":1771,"title":{},"name":{},"text":{"43":{}},"component":{}}],["x[i",{"_index":1769,"title":{},"name":{},"text":{"43":{}},"component":{}}],["xcode",{"_index":833,"title":{},"name":{},"text":{"5":{}},"component":{}}],["y",{"_index":1335,"title":{},"name":{},"text":{"25":{},"29":{},"30":{},"35":{},"46":{}},"component":{}}],["yeah",{"_index":743,"title":{},"name":{},"text":{"4":{}},"component":{}}],["year",{"_index":455,"title":{},"name":{},"text":{"3":{}},"component":{}}],["zero",{"_index":331,"title":{},"name":{},"text":{"2":{},"23":{},"27":{},"33":{},"48":{},"50":{},"51":{},"54":{}},"component":{}}]],"pipeline":["stemmer"]},"store":{"documents":{"1":{"id":1,"text":"","title":"","component":"q","version":"develop-0.99","name":"common","url":"/q/develop-0.99/common.html","titles":[]},"2":{"id":2,"text":"The Fundamentals section of the Q DSP library provides a brief overview of the basic features of the library, including layering and dependencies, file structure, namespace, function objects as fundamental building blocks, rich data types, and user-defined literals. The Q library comprises of two layers: q_io: Audio and MIDI I/O layer. The q_io layer provides cross-platform audio and MIDI host connectivity straight out of the box. The q_io layer is optional. The q_lib layer is usable without it. q_lib: The core DSP library, q_lib is a no-frills, lightweight, header-only library. The dependencies are determined by the arrows. q_io has very minimal dependencies (portaudio and portmidi) with very loose coupling via thin wrappers that are easy to transplant and port to a host, with or without an operating system, such as an audio plugin or direct to hardware ADC and DAC. q_io is used in the tests and examples, but can be easily replaced by other mechanisms in an application. Plugin libraries for DAWs (digital audio workstations), for example, have their own audio and MIDI I/O mechanisms. q_lib has no dependencies except the standard c++ library. The library is organized with this simplified directory structure: docs (1) example (2) q_io ├─ external (3) ├─ include (4) └─ src (5) q_lib └─ include (6) test (7) 1 Where this documentation resides. 2 Self-contained and easy to understand c++ programs that demonstrate various features of the library. 3 3rd party libraries used by the q_io module. 4 q_io header files. 5 q_io source files. 6 Header-only core q_lib DSP library. 7 A comprehensive set of c++ files for testing the library. Other sub-directories not listed here can be ignored. The q_lib module, header-only core, has this simplified directory structure: q_lib └─ include └─ q ├─ fft (1) ├─ fx (2) ├─ pitch (3) ├─ support (4) ├─ synth (5) └─ utility (6) 1 Fast fourier transform. 2 Various \"effects\" processor building blocks. 3 Pitch detection related facilities. 4 Fundamental support facilities. 5 Various synthesisers. 6 Auxiliary utility functions and classes. Other sub-directories not listed here can be ignored. All entities in the Q library are placed in namespace cycfi::q. Everywhere in this documentation, we will be using a namespace alias to make the code less verbose: namespace q = cycfi::q; Typical audio processors in the Q DSP library work on floating point input samples with the normal -1.0 to 1.0 range. However, values are not limited to sampled signals. For instance, signal envelopes are best represented as decibels that are processed in the logarithmic domain, so dynamic-range processors such as compressors and expanders accept decibel as input and return decibel as output. For example: decibel gain = comp(env); comp is a compressor. The compressor above, however, processes signal envelopes rather than raw samples, in contrast to the typical implementation of DSP compressors. The compressor above accepts an envelope represented by decibel, performs computation in the logarithmic domain, and returns a compressed envelope also represented by decibel. Oscillators, as another example, operate on phase-angle inputs and return output samples: float out = sin(phase++); The Q DSP library has a rich set of such types: float and double Typical sample data type -1.0 to 1.0 (or beyond for some computational headroom). frequency Cycles per second (Hz). duration A time span (seconds, milliseconds, etc.) period The inverse of frequency. phase Fixed point 1.31 format where 31 bits are fractional. phase. represents 0 to 2π phase values suitable for oscillators. decibel Ratio of one value to another on a logarithmic scale (dB). For more information, see Units. The Q DSP library is typeful and typesafe. You can not mismatch values of different types such as frequency and decibel, for example. Such potentially disastrous mistakes can happen if all values are just raw floating point types. There are conversions to and from these data types where it is reasonable to do so. decibel can, for example, be converted to 'float' or 'double' using the as_float or as_double conversion functions. Example: float gain = as_float(12_dB); Relational operations are allowed. For example: if (gain > 3_dB) // 3_dB is a decibel literal (see below) s = lp(s); Arithmetic operations are allowed. For example: auto total_duration = 3_ms + 5_ms; // 3_ms and 5_ms are duration literals Where appropriate, arithmetic with raw types are allowed. For example: auto harmonic = 440_Hz * 4; // 440_Hz is a frequency literal To augment the wealth of value types, the Q DSP library makes abundant use of user-defined literals. We take advantage of C++ type safe user-defined literals, instead of the usual float or double which can be unsafe when values of different units (e.g. frequency vs. duration) are mismatched. The Q DSP library makes abundant use of user-defined literals for units such as time, frequency and volume. For example, we use 24_dB, instead of a unit-less 24 or worse, a non-intuitive, unit-less 15.8 —the gain equivalent of 24_dB. Such constants also make the code very readable, another objective of this library. Q Literals are placed in the namespace q::literals. The namespace is sparse enough to be hoisted into your namespace using using namespace: To use these literals, include the literals.hpp header: #include then use the literals namespace somewhere in a scope where you need it: using namespace q::literals; Here are some example expressions: 82.4069_Hz 440_Hz 1.5_KHz 1.5_kHz 1_kHz 0.5_MHz 3_MHz 10.3_s 1_s 20.5_ms 1_ms 10.5_us 500_us -3.5_dB 10_dB 2_pi 0.5_pi Here’s the list of available literals: // frequency constexpr frequency operator \"\" _Hz(long double val); constexpr frequency operator \"\" _Hz(unsigned long long int val); constexpr frequency operator \"\" _KHz(long double val); constexpr frequency operator \"\" _KHz(unsigned long long int val); constexpr frequency operator \"\" _kHz(long double val); constexpr frequency operator \"\" _kHz(unsigned long long int val); constexpr frequency operator \"\" _MHz(long double val); constexpr frequency operator \"\" _MHz(unsigned long long int val); // duration constexpr duration operator \"\" _s(long double val); constexpr duration operator \"\" _s(unsigned long long int val); constexpr duration operator \"\" _ms(long double val); constexpr duration operator \"\" _ms(unsigned long long int val); constexpr duration operator \"\" _us(long double val); constexpr duration operator \"\" _us(unsigned long long int val); // decibel constexpr decibel operator \"\" _dB(unsigned long long int val); constexpr decibel operator \"\" _dB(long double val); // pi constexpr long double operator \"\" _pi(long double val); constexpr long double operator \"\" _pi(unsigned long long int val) In the realm of electronic music, there are processors and synthesizers, whose definitions overlap somewhat and differ primarily in how they handle input and output. The processor receives one or more input samples and generates one or more output samples according to a specific processing algorithm. A synthesizer, on the other hand, generates sound from scratch without using any samples. The C++ function object is the most basic building block. In the Q world, both processors and synthesizers are simply function objects, which can be composed to form more complex functions. A function object can accept zero or more input values and generate zero or more output values. Function objects are instantiated from struct or class declarations in the header files. In this example, we instantiate hypothetical f_x and g_x structs: auto f = f_x{}; auto g = g_x{}; Syntactically, you can use these function objects just like any other function. Here’s an example function call invocation for the single input function object, f instantiated above: float r = f(s); where s is the input value, and f(s) returns a result and stores it in the variable r. Composition by passing the result of f to g, like this: float r = g(f(s)); can be encapsulated using function composition in a class or struct: struct fg_x { float operator()(float s) const { return g(f(s)); } f_x f; g_x g; }; Here, we encapsulate f_x and g_x inside the composed function object struct fg_x. We can then instantiate a function object for fg_x just like we would above. The Q DSP library uses fine-grained and reusable function object structs or classes like this. Such reusable components are composed to form more powerful higher level composites. Here’s the code example in the library for signal conditioning: inline float signal_conditioner::operator()(float s) { // High pass s = _hp(s); (1) // Pre clip s = _clip(s); (2) // Dynamic Smoother s = _sm(s); (3) // Signal envelope auto env = _env(std::abs(s)); (4) // Noise gate auto gate = _gate(env); (5) s *= _gate_env(gate); (6) // Compressor + makeup-gain auto env_db = decibel(env); auto gain = as_float(_comp(env_db)) * _makeup_gain; (7) s = s * gain; _post_env = env * gain; return s; } We’re showing only the operator() for brevity. But take note that the code uses multiple function objects for various processing functions that correspond to these class member variables: private: clip _clip; (2) highpass _hp; (1) dynamic_smoother _sm; (3) fast_envelope_follower _env; (4) float _post_env; compressor _comp; (7) float _makeup_gain; onset_gate _gate; (5) envelope_follower _gate_env; (6) }; The complete code can be found here: signal_conditioner.hpp Copyright (c) 2014-2023 Joel de Guzman. All rights reserved. Distributed under the MIT License","title":"Fundamentals","component":"q","version":"develop-0.99","name":"fundamentals","url":"/q/develop-0.99/fundamentals.html","titles":[{"text":"Layers","hash":"_layers","id":1},{"text":"Dependencies","hash":"_dependencies","id":2},{"text":"File Structure","hash":"_file_structure","id":3},{"text":"Namespace","hash":"_namespace","id":4},{"text":"Data Types","hash":"_data_types","id":5},{"text":"Literals","hash":"_literals","id":6},{"text":"Examples","hash":"_examples","id":7},{"text":"Frequency","hash":"_frequency","id":8},{"text":"Duration","hash":"_duration","id":9},{"text":"Decibel","hash":"_decibel","id":10},{"text":"Pi","hash":"_pi","id":11},{"text":"Function Objects","hash":"_function_objects","id":12}]},"3":{"id":3,"text":"is a cross-platform C++ library for Audio Digital Signal Processing. Aptly named after the \"Q factor\", a dimensionless parameter that describes the quality of a resonant circuit, the Q DSP Library is designed to be simple and elegant, as the simplicity of its name suggests, and efficient enough to run on small microcontrollers. Q leverages the power of modern C++ and efficient use of functional programming techniques, especially function composition using fine-grained and reusable function objects (both stateless and stateful), to simplify complex DSP programming tasks without sacrificing readability. Q is the host of some experimental Music related DSP facilities The Author has accumulated over the years as part of research and development, and will continue to evolve to accommodate more facilities necessary for the fulfillment of various Music related projects. The library is Open Source and released under the very liberal MIT license. Show Table of Contents Setup and Installation Quick Start Fundamentals Reference Units frequency duration period phase phase_iterator decibel interval pitch Biquad Low Pass Filter High Pass Filter Band Pass Filter; Constant Skirt Gain Band Pass Filter; Constant Peak Gain All Pass Filter Notch Filter Peaking Filter Low Shelf Filter High Shelf Filter Envelope Peak Envelope Follower AR Envelope Follower Fast Envelope Follower Fast Averaging Envelope Follower Fast RMS Envelope Follower Dynamic Compressor Soft Knee Compressor Expander AGC Miscellaneous Delay Moving Sum Moving Average Noise Gate Onset Gate One Pole Low Pass DC Block Synthesizers Sine Wave Oscillator Saw Wave Oscillator Square Wave Oscillator Pulse Wave Oscillator Triangle Wave Oscillator Sine Cosine Generator Blackman Window Generator Hann Window Generator Hamming Window Generator Linear Ramp Generator Exponential Ramp Generator Envelope Generator Support Basic Concepts Multi Buffer Audio Stream MIDI Messages MIDI Processor Utility Ring Buffer Fractional Ring Buffer Audio MIDI I/O Audio Device Audio Stream Audio File MIDI Device MIDI Stream Joel got into electronics and programming in the 80s because almost everything in music, his first love, is becoming electronic and digital. Since then, he builds his own guitars, effect boxes and synths. He enjoys playing distortion-laden rock guitar, composes and produces his own music in his home studio. Joel de Guzman is the principal architect and engineer at Cycfi Research. He is a software engineer specializing in advanced C++ and an advocate of Open Source. He has authored a number of highly successful Open Source projects such as Boost.Spirit, Boost.Phoenix and Boost.Fusion. These libraries are all part of the Boost Libraries, a well respected, peer-reviewed, Open Source, collaborative development effort. Copyright (c) 2014-2023 Joel de Guzman. All rights reserved. Distributed under the MIT License","title":"Q Audio DSP Library","component":"q","version":"develop-0.99","name":"index","url":"/q/develop-0.99/index.html","titles":[{"text":"Introduction","hash":"_introduction","id":1},{"text":"Table of Contents","hash":"_table_of_contents","id":2},{"text":"The Author","hash":"_the_author","id":3}]},"4":{"id":4,"text":"Here’s a quick \"Hello, World\" example that highlights the simplicity of the Q DSP Library: a delay effects processor. The full example can be found here: example/delay.cpp. The example loads a pre-recorded wav file and plays it back with processing. The raw audio source will be played in the left channel while the delayed signal will be played in the right channel. Pretty much as straightforward as possible. The audio will be played using the currently selected audio device. The final audio output can be heard below: Your browser does not support the audio tag. // fractional delay (1) q::delay _delay{350_ms, 44100}; // Mix the signal s, and the delayed signal (where s is the incoming sample) (2) auto _y = s + _delay(); // Feed back the result to the delay (2) _delay.push(_y * _feedback); Normally, there will be a processing loop that receives the incoming samples, s. The code above are placed: 1 Before the processing loop. 2 Inside inside the processing loop. Typically, you encapsulate the code inside a class where _delay, _y and _feedback are member variables. 44100 is the desired sampling rate. _feedback is the amount of feedback desired (anything from 0.0 to less than 1.0, e.g. 0.85). 350_ms is the delay duration. Take note of 350_ms. Here, we take advantage of C++ type safe user-defined literals, instead of the usual float or double which can be unsafe when values of different units (e.g. frequency vs. duration) are mismatched. The Q DSP library makes abundant use of user-defined literals for units such as time, frequency and volume. For example, we use 24_dB, instead of a unit-less 24 or worse, a non-intuitive, unit-less 15.8 —the gain equivalent of 24_dB. Such constants also make the code very readable, another objective of this library. Processors such as q::delay are C++ function objects that can be composed to form more complex processors. For example if you want to filter the delayed signal with a low-pass filter with a 1 kHz cutoff frequency, you apply the q::lowpass filter over the result of the delay: q::lowpass _lp{1_kHz, 44100}; then insert the filter where it is needed in the processing loop: // Add the signal s, and the delayed, low-pass filtered signal auto _y = s + _lp(_delay()); Let us move on to a more elaborate example. How about a fully functional, bandwidth limited square wave synthesizer with ADSR envelope that controls an amplifier and a resonant filter and control the note-on and note-off using MIDI? Sounds good? This example is complete and self-contained in one .cpp file, kept as simple as possible to highlight the ease-of-use. The full example can be found here: example/square_synth.cpp. In order to run this example, you will need a MIDI input device connected to your system, preferrably a keyboard. Make sure you have at least one installed. If you do not have a physical MIDI input device, you can install one of the MIDI onscreen keyboards. For example, MidiKeys is a small application for MacOS that presents a MIDI keyboard onscreen. Here’s a short video clip: After building the program, make sure you have a MIDI keyboard connected before starting the application. At startup, the app will present you with a list of available MIDI hardware and will ask you what you want to use. Example: ================================================================================ Available MIDI Devices (ID : \"Name\" inputs/outputs): 0 : \"Quantum 2626\" 1/0 1 : \"Code 61 USB MIDI\" 1/0 2 : \"Code 61 MIDI DIN\" 1/0 3 : \"Code 61 Mackie/HUI\" 1/0 4 : \"Code 61 Editor\" 1/0 5 : \"Quantum 2626\" 0/1 6 : \"Code 61 USB MIDI\" 0/1 7 : \"Code 61 MIDI DIN\" 0/1 8 : \"Code 61 Mackie/HUI\" 0/1 9 : \"Code 61 Editor\" 0/1 ================================================================================ Choose MIDI Device ID: 1 And then a list of audio devices to choose from. Example: ================================================================================ Available Audio Devices (ID : \"Name\" inputs/outputs): 1 : \"MacBook Air Microphone\" 1/0 2 : \"MacBook Air Speakers\" 0/2 3 : \"Quantum 2626\" 26/26 ================================================================================ Choose Audio Device ID: 3 Take note that the demo is a console application. The Q library does not have a GUI, for good reason! We want to keep it as simple as possible. The GUI is taken cared of by other libraries (e.g. Elements). After choosing the MIDI and Audio driver, the synth is playable. The synth is monophonic and responds to velocity only, for simplicity. There are more demo applications in the example directory. After this quick tutorial, feel free to explore. Here’s the actual synthesizer with the processing loop: struct my_square_synth : q::audio_stream { my_square_synth(q::adsr_envelope_gen::config env_cfg, int device_id) : audio_stream(q::audio_device::get(device_id), 0, 2) , env(env_cfg, this->sampling_rate()) , filter(0.5, 0.8) {} void process(out_channels const& out) { auto left = out[0]; auto right = out[1]; for (auto frame : out.frames()) { // Generate the ADSR envelope auto env_ = env() * velocity; // Set the filter frequency filter.cutoff(env_); // Synthesize the square wave auto val = q::square(phase++); // Apply the envelope (amplifier and filter) with soft clip val = clip(filter(val) * env_); // Output right[frame] = left[frame] = val; } } q::phase_iterator phase; // The phase iterator q::adsr_envelope_gen env; // The envelope generator q::reso_filter filter; // The resonant filter q::soft_clip clip; // Soft clip float velocity; // Note-on velocity }; Our synth, a subclass of q::audio_stream, sets up buffers for the input and output audio streams and presents those to our processing loop (the process function above). In this example, we setup an audio stream with the selected device, no inputs and two (stereo) outputs: audio_stream(q::audio_device::get(device_id), 0, 2) Behind the scenes, there’s a lot going on here, actually. But you will notice that emphasis is given to making the library very readable, easy to understand and follow, by breaking down complex tasks into smaller manageable tasks and using function composition at progressively higher levels, while maintaining simplicity and clarity of intent. The synthesizer above is composed of smaller building blocks: fine grained C++ function objects. For example, here’s the square wave oscillator (bandwidth limited using poly_blep). For now, we will skim over details such as the adsr_envelope_gen, phase, and phase_iterator, and this thing called poly_blep. The important point, exemplified here, is that we want to keep our building blocks as simple and minimal as possible. We will cover these in greater detail later. The astute reader may notice that our square_osc class does not even have state! struct square_osc { constexpr float operator()(phase p, phase dt) const { constexpr auto middle = phase::middle(); auto r = p < middle ? 1.0f : -1.0f; // Correct rising discontinuity r += poly_blep(p, dt); // Correct falling discontinuity r -= poly_blep(p + middle, dt); return r; } constexpr float operator()(phase_iterator i) const { return (*this)(i._phase, i._incr); } }; constexpr auto square = square_osc{}; Yeah, that’s the complete oscillator. That’s all there is to it! The modern C++ savvy programmer will immediately notice the use of constexpr, applied judiciously all throughout the library. Such modern C++ facilities allow the compiler to generate extremely efficient code, even those that are generated at compile time. That means, for this example, that one can build an oscillator at compile time if needed, perhaps with constant wavetable results stored in read-only memory. The midi_processor takes care of MIDI events. Your application will have its own MIDI processor that deals with MIDI events that you are interested in. For this simple example, we simply want to process note-on and note-off events. On note-on events, our MIDI processor sets `my_square_synth’s note frequency and velocity and triggers its envelope for attack. On note-off events, our MIDI processor initiates the envelope’s release. struct my_midi_processor : midi::processor { using midi::processor::operator(); my_midi_processor(my_square_synth& synth) : _synth(synth) {} void operator()(midi::note_on msg, std::size_t time) { _key = msg.key(); auto freq = midi::note_frequency(_key); _synth.phase.set(freq, _synth.sampling_rate()); _synth.env.attack(); _synth.velocity = float(msg.velocity()) / 128; } void operator()(midi::note_off msg, std::size_t time) { if (msg.key() == _key) _synth.env.release(); } std::uint8_t _key; my_square_synth& _synth; }; In the main function, we instantiate my_square_synth and my_midi_processor. The synth constructor, in case you haven’t noticed yet, requires an envelope configuration (envelope::config). Here, we provide our configuration. Take note that in this example, the envelope parameters are constant, for the sake of simplicity, but you can definitely have these controllable by the user by writing your own MIDI processor that deals with MIDI control change messages. Again, take note of the abundant use of user-defined literals for units such as duration (e.g. 100_ms) and level (e.g. -12_dB). auto env_cfg = q::envelope::config { 100_ms // attack rate , 1_s // decay rate , -12_dB // sustain level , 5_s // sustain rate , 1_s // release rate }; my_square_synth synth{ env_cfg }; Then, we create my_midi_processor, giving it a reference to my_square_synth. We’ll also need a midi_input_stream that receives the actual incoming MIDI messages from the chosen hardware. q::midi_input_stream stream; my_midi_processor proc{ synth }; Now we’re all set. We start the synth and enter a loop that exits when the user presses ctrl-c (in which case the running flag becomes false). In the loop, we give our MIDI processor a chance to process incoming MIDI events as they arrive from the MIDI stream: synth.start(); while (running) stream.process(proc); synth.stop(); Copyright (c) 2014-2023 Joel de Guzman. All rights reserved. Distributed under the MIT License","title":"Quick Start","component":"q","version":"develop-0.99","name":"quick_start","url":"/q/develop-0.99/quick_start.html","titles":[{"text":"Hello, World","hash":"_hello_world","id":1},{"text":"The DSP Code","hash":"_the_dsp_code","id":2},{"text":"Notes:","hash":"_notes","id":3},{"text":"Hello, Universe","hash":"_hello_universe","id":4},{"text":"The Synthesizer","hash":"_the_synthesizer","id":5},{"text":"The Oscillator","hash":"_the_oscillator","id":6},{"text":"Processing MIDI","hash":"_processing_midi","id":7},{"text":"The Main Function","hash":"_the_main_function","id":8}]},"5":{"id":5,"text":"Here are the basic requirements and dependencies that you need to satisfy in order to use the library: A C++20 compiler git CMake 3.5.1 or higher Additionally, the following libraries are dragged as submodules: The Cycfi infra library portaudio Audio I/O library. portmidi MIDI I/O library. Q currently supports the MacOS, Windows and Linux. In the Mac, we support both XCode. Q is tested with XCode 10 and XCode 11. In Windows, we support Windows 10 with Visual Studio 2022. In Linux, we support both Clang and gcc. Get the latest version with a C++20 compiler. The CLion IDE is supported on all platforms. Clone the Q DSP library and its submodules: git clone --recurse-submodules https://github.com/cycfi/Q.git Make sure you have CMake 3.5.1 or higher. Follow the installation procedure for your platform. There are multiple ways to generate a project file using CMake depending on your platform and desired IDE, but here are some examples for MacOS 10.14, Windows 10 and, and Ubuntu 16.04: Using XCode: CD to the Q library: cd Q Make a build directory: 'mkdir build' CD to the the Q/build directory: cd build Invoke cmake: cmake -G\"Xcode\" ../ If successful, cmake will generate an XCode project in the build directory. Using Visual Studio 2022 CD to the Q library: cd Q Make a build directory: 'mkdir build' CD to the the Q/build directory: cd build Invoke cmake: cmake -G\"Visual Studio 17 2022\" ../ If successful, cmake will generate an Visual Studio solution project in the build directory. Using dpkg packaging system, stock g++ compiler and CodeBlocks. Install portaudio dependencies: sudo apt-get install libasound-dev CD to the Q library: cd Q Make a build directory: 'mkdir build' CD to the the Q/build directory: cd build Invoke cmake: cmake -G\"CodeBlocks - Unix Makefiles\" ../ If successful, cmake will generate a CodeBlocks project in the build directory. Build the project generated by cmake. Try running the tests and examples. If you intend to run the executables directly from the command line, make sure to change the directory to the same level where the audio_files is (e.g. 1 folder up on XCode builds). Some tests and examples may require audio clips that are found in this folder. To make sure everything is OK, try running the sin_osc.cpp example. Make sure your system’s default audio device is set up and ready to play audio. The sin_osc.cpp program should play a 5 second 440 Hz sine wave. You might also want to try running the list_devices.cpp example that prints out all detected audio and MIDI devices. Copyright (c) 2014-2023 Joel de Guzman. All rights reserved. Distributed under the MIT License","title":"Setup and Installation","component":"q","version":"develop-0.99","name":"setup","url":"/q/develop-0.99/setup.html","titles":[{"text":"Requirements","hash":"_requirements","id":1},{"text":"C++20","hash":"_c20","id":2},{"text":"Git","hash":"_git","id":3},{"text":"CMake","hash":"_cmake","id":4},{"text":"Generating the Project using CMake","hash":"_generating_the_project_using_cmake","id":5},{"text":"MacOS","hash":"_macos","id":6},{"text":"Windows","hash":"_windows","id":7},{"text":"Linux","hash":"_linux","id":8},{"text":"Build and Test","hash":"_build_and_test","id":9}]},"6":{"id":6,"text":"The biquad filter is a versatile and effective audio processing tool. The biquad filter is a second-order filter IIR (Infinite Impulse Response) filter, particularly useful for their simplicity and efficiency in implementation. They can be utilized for a variety of filtering operations. The biquad class and its supporting infrastructure are based on Robert Bristow Johnson’s Audio-EQ Cookbook, implemented using modern C++. The biquad serves as the base class for various forms of filters, including: Low pass filter High pass filter Band pass filter All pass filter Notch filter Peaking filter Low shelf filter High shelf filter #include The Q DSP library’s API implementation hides the majority of the details behind the main biquad struct, with the exception of the copy constructor and the function call operator, which accepts a single s (input sample) parameter and returns the processed value. struct biquad { biquad(biquad const&) = default; float operator()(float s); }; s Input sample. f, a, b Objects of type biquad. Expression Semantics biquad(f) Copy construct from f. a = b Assign b to a. C++ brace initialization may also be used. Expression Semantics Return Type f(s) Process the input sample s and return the filtered result. float lowpass highpass bandpass_csg bandpass_cpg allpass notch peaking lowshelf highshelf","title":"Biquad Filters","component":"q","version":"develop-0.99","name":"biquad","url":"/q/develop-0.99/reference/biquad.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"biquad","hash":"_biquad","id":2},{"text":"Include","hash":"_include","id":3},{"text":"Declaration","hash":"_declaration","id":4},{"text":"Expressions","hash":"_expressions","id":5},{"text":"Notation","hash":"_notation","id":6},{"text":"Copy Constructor and Assignment","hash":"_copy_constructor_and_assignment","id":7},{"text":"Function Call","hash":"_function_call","id":8},{"text":"Derived Classes","hash":"_derived_classes","id":9}]},"7":{"id":7,"text":"Audio dynamic range processing DSP refers to the manipulation of an audio signal’s dynamic range. The dynamic range of an audio signal is the difference between its loudest and quietest components. Compression, Expansion, Limiting, and Gating are a few common types of dynamic range processing used in audio DSP. Such processing can enhance sound quality, minimize or eliminate noise, and create creative effects. The dynamic range processors in the Q DSP library are unique in that they do not process audio waveform samples directly. Instead, they operate on the envelope of the audio signal, represented as decibel, perform computations in the logarithmic domain, and return a processed envelope, also represented as decibel. As an example, here’s the processing code for the compressor: decibel compressor::operator()(decibel env) const { if (env <= _threshold) return 0_dB; return _slope * (_threshold - env); } This is a hard knee compressor: a type of compressor in which the compression ratio changes abruptly when the input signal exceeds the threshold level, known as the knee point. Both hard knee and soft knee compressors are supported by the Q DSP library. The code accepts an envelope input, env, in decibels and outputs a compressed envelope also in decibels. Processing is done in the logarithmic domain, where addition of two values is equivalent to multiplying their corresponding linear values, and multiplication of two values is equivalent to raising their corresponding linear values to a power. The envelope follower, which is responsible for generating the input envelope for the compressor, is implemented outside of the compressor class. The objective is separation of concerns and the flexibility to use various envelope followers. Compared to their linear counterparts, performing computations in the logarithmic domain is simpler, more intuitive, and makes the code easier to understand while maintaining the same level of efficiency. The compressor example above and all dynamic range processors in the Q DSP library are essentially envelope processors. They receive envelopes, process envelopes, and return envelopes. Since envelope processors operate on the envelope, perform computations in the logarithmic domain, and return a processed envelope, multiple envelope processors can be cascaded. For instance, you can use a single envelope follower and apply the derived envelope to an expander and then pass the result to a compressor, like in the diagram below: A specific use-case for cascading an expander and a compressor, like in the example above, is when you want to use the expander as a noise gate, with soft, non-abrupt gating, set at a threshold just above the noise floor. Then, setting the threshold of the compressor to a high value to even out the dynamic range. The compressor and expander in this case work on different regions of the full dynamic range. But there are also useful cases where the overlap of dynamic ranges the processors are working on is advantageous. The compressor-limiter is a good example. Likewise, multiple compressors with variable thresholds and ratios are another example. By cascading multiple dynamic range processors, we can design efficient multi-function processors like the compressor-limiter with gate (transfer response graph at the right).","title":"Dynamic","component":"q","version":"develop-0.99","name":"dynamic","url":"/q/develop-0.99/reference/dynamic.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Example","hash":"_example","id":2},{"text":"Key Points","hash":"_key_points","id":3},{"text":"Cascading","hash":"_cascading","id":4}]},"8":{"id":8,"text":"This section deals with envelope extraction from signals. In audio DSP, an envelope efers to the time-varying changes of a signal. It essentially represents the \"shape\" of the signal in terms of its moment-to-moment changes. Extracting an envelope from a signal is particularly important because they can be used for a variety of processing tasks, including controlling the perceived loudness of a signal, reducing noise, emphasizing particular elements of the signal, modulating amplitude, frequency, and other sound properties, to name a few. Envelopes are typically, but not always, related to amplitude changes, although it can sometimes be related to other parameters like pitch or frequency, phase, and filter cutoff, to name a few. This section will only cover amplitude envelope extraction. Figure 1. Output behavior of different types of envelope followers. The amplitude envelope can also be used to extract dynamic features from a sound. As an example, onset detection is a method for determining the beginning of each musical note. The most basic onset detection scheme involves analyzing the amplitude envelope and detecting sudden changes in amplitude that coincide with the start of each note. [1] The Q DSP library includes a variety of envelope extractors, ranging from the most basic peak envelope follower to the more precise, but computationally demanding, fast RMS envelope follower. Each has distinct strengths, characteristics, and tradeoffs that can be evaluated based on the application’s specific requirements. Copyright (c) 2014-2023 Joel de Guzman. All rights reserved. Distributed under the MIT License 1. An accurate onset detection mechanism that goes far beyond the aforementioned simple onset detection scheme is included in the Hz DSP library, an offshoot of the Q DSP library.","title":"Envelope","component":"q","version":"develop-0.99","name":"envelope","url":"/q/develop-0.99/reference/envelope.html","titles":[]},"9":{"id":9,"text":"q_io is the Audio and MIDI I/O layer that provides cross-platform audio and MIDI host connectivity. As stated in the Fundamentals section, the q_io layer is optional. The rest of the q_lib layer is usable without it. q_io is primarily used in the tests and examples, but can be easily replaced by other mechanisms in an application. Plugin libraries for DAWs (digital audio workstations), for example, have their own audio and MIDI I/O mechanisms. q_io was intended to be very minimal. The entire layer is comprised of a handful of classes. The diagram below depicts the data transfer between the various components, an application, and the host operating system. audio_device audio_device represents individual audio interfaces on the host platform. There are typically one or more audio devices available. Each device has a name, device identifier, and specific capabilities, including sample rate and the number of input and output channels supported. audio_stream audio_stream handles audio input and output to and from an audio device. Parameters such as sample rate, sample format, and buffer size are specified when opening the audio stream. Audio streams can be input only, output only, or both input and output. Data is transmitted asynchronously between an open audio stream and the application. audio_file audio_file is a set of small and lightweight classes for reading and writing WAV (Waveform Audio File Format) files. It offers a straightforward and intuitive interface for working with WAV audio data. midi_device midi_device is an abstraction which encapsulates the properties and functionality of a MIDI interface. Each midi_device includes information such as its name, device identifier, and the number of inputs and outputs available. midi_stream The midi_stream class facilitates MIDI input and output communication and data transmission of MIDI messages between an application and a MIDI device. The application processes audio, asynchronoously, via user provided process functions as documented in the Audio Stream Client Interface. The MIDI Processor is a user provided class that acts as an intermediary between the application and the MIDI stream, facilitating communication and data transmission of MIDI messages.","title":"Audio MIDI I/O","component":"q","version":"develop-0.99","name":"q_io","url":"/q/develop-0.99/reference/q_io.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Components and Data Flow","hash":"_components_and_data_flow","id":2}]},"10":{"id":10,"text":"Synthesizers are one of the most engaging parts of any DSP library, as they involve the actual creation of sounds. What makes synthesizers so engaging is the level of control they offer over sound creation. A synthesizer allows a user to shape and mold a sound by adjusting parameters such as waveform shape, frequency, amplitude, and filter settings. This level of control enables users to create expressive and unique sounds that can be used in a variety of contexts, ranging from music production to sound design for film and video games. The advancements in DSP technology have made synthesizers even more powerful and flexible. Users can now create sounds that were previously impossible to achieve with traditional analog synthesizers. The Q DSP library provides some common synthesisers such as sine-wave, square, pulse, triangle and saw-tooth, as well as various generators for sculpting the sound envelopes with controls for attack, decay, hold sustain and release. These are designed as moduler building blocks that are combined to form more complex synthesisers. Oscillator is a concept representation of an oscillator that generates periodic waveforms. Oscillators are function objects that take in a phase_iterator: an iterator over the phase. The output is typically a floating point value. namespace cycfi::q::concepts { template concept Oscillator = std::copy_constructible && std::assignable_from && std::default_initializable && requires(T o, T a, T b, phase_iterator pi) { o(pi); // Generate a periodic waveform given `{phase_iterator}`, `pi`. }; } o, a, b Instances of types that conform to Oscillator. pi Object of type phase_iterator. Expression Semantics Oscillator() Default construct an Oscillator. Oscillator(o) Copy construct from o. a = b Assign b to a. C++ brace initialization may also be used. Expression Semantics Return Type o(pi) Generate a periodic waveform given phase_iterator, pi. decltype(o(pi)) BasicOscillator is a refinement of the Oscillator concept. BasicOscillator is not bandwidth limited. This is is suitable in certain cases. Moreover, some oscillators are inherently bandwidth limited. namespace cycfi::q::concepts { template concept BasicOscillator = Oscillator && requires(T o, phase ph) { o(ph); // Generate a periodic waveform given `{phase}`, `pi`. }; } In addition to valid expressions for Oscillator, BasicOscillator allows these expressions. o Instance of a type that conforms to BasicOscillator. ph Object of type phase. Expression Semantics Return Type o(ph) Generate a periodic waveform given phase, ph. decltype(o(ph)) Waveforms with hard discontinuities such as sawtooth and square waves can generate harmonics that extend beyond the Nyquist frequency range or half the sampling rate. Oscillators may be bandwidth limited to ensure that the harmonics generated fall within the Nyquist frequency range to prevent aliasing, which causes unwanted spectral artifacts in the signal. BandwidthLimitedOscillator is a refinement of the Oscillator concept. These oscillators are bandwidth limited. namespace cycfi::q::concepts { template concept BandwidthLimitedOscillator = Oscillator && requires(T o, phase ph, phase dt) { o(ph, dt); // Generate a periodic waveform given `{phase}`, `pi` // and another `{phase}`, `dt` representing the delta // phase between two samples of the waveform (this is // equivalent to the `_step` member function of the // `{phase_iterator}`). (ph))` }; } In addition to valid expressions for Oscillator, BandwidthLimitedOscillator allows these expressions. o Instance of a type that conforms to BasicOscillator. ph, dt Object of type phase. Expression Semantics Return Type o(ph, dt) Generate a periodic waveform given phase, ph and another phase, dt representing the delta phase between two samples of the waveform (this is equivalent to the _step member function of the phase_iterator). decltype(o(ph)) Generator is a concept representation of a generator. Generators are function objects that take no function arguments and return an output that is typically a floating point value. Generators are typically non-periodic. Generators are useful for constructing complex signals, envelopes and tapers (also known as window functions). namespace cycfi::q::concepts { template concept Generator = requires(T v, T o, T a, T b, phase_iterator pi) { T(o); // Copy construct from `o`. a = b; // Assign `b` to `a`. v(); // Generate a signal. }; } g, a, b Instances of types that conform to Generator. Expression Semantics Generator(g) Copy construct from g. a = b Assign b to a. C++ brace initialization may also be used. Expression Semantics Return Type g() Generate a signal. decltype(g(pi)) Ramp is a concept representation of a generator that generates non-periodic signals from 0.0 to 1.0 or from 1.0 to 0.0. It is a refinement of the Generator concept. Ramp`s are suitable for generating envelopes. A `Ramp represents a segment of an envelope. Essentially, an envelope comprises two or more upward and downward `Ramp`s. namespace cycfi::q::concepts { template concept Ramp = Generator && requires(T v, duration w, float sps) { T(w, sps); // Construct a Ramp given duration, w, and sps. v.reset(); // Reset the Ramp to the start. v.config(w, sps); // Configure a Ramp given duration, w, and sps. }; } In addition to valid expressions for Generator, Ramp allows these expressions. r Instance of a type that conforms to Ramp. w Object of type duration. sps Floating point value representing samples per second. Expression Semantics Ramp(w, sps) Construct a Ramp given duration, w, and sps. C++ brace initialization may also be used. Expression Semantics r.reset() Reset the Ramp to the start. v.config(w, sps) Configure a Ramp given duration, w, and sps.","title":"Oscillators","component":"q","version":"develop-0.99","name":"synth","url":"/q/develop-0.99/reference/synth.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Oscillator","hash":"_oscillator","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructors and Assignment","hash":"_constructors_and_assignment","id":6},{"text":"Function Call","hash":"_function_call","id":7},{"text":"BasicOscillator","hash":"_basicoscillator","id":8},{"text":"Declaration","hash":"_declaration_2","id":9},{"text":"Expressions","hash":"_expressions_2","id":10},{"text":"Notation","hash":"_notation_2","id":11},{"text":"Function Call","hash":"_function_call_2","id":12},{"text":"BandwidthLimitedOscillator","hash":"_bandwidthlimitedoscillator","id":13},{"text":"Declaration","hash":"_declaration_3","id":14},{"text":"Expressions","hash":"_expressions_3","id":15},{"text":"Notation","hash":"_notation_3","id":16},{"text":"Function Call","hash":"_function_call_3","id":17},{"text":"Generator","hash":"_generator","id":18},{"text":"Declaration","hash":"_declaration_4","id":19},{"text":"Expressions","hash":"_expressions_4","id":20},{"text":"Notation","hash":"_notation_4","id":21},{"text":"Constructors and Assignment","hash":"_constructors_and_assignment_2","id":22},{"text":"Function Call","hash":"_function_call_4","id":23},{"text":"Ramp","hash":"_ramp","id":24},{"text":"Declaration","hash":"_declaration_5","id":25},{"text":"Expressions","hash":"_expressions_5","id":26},{"text":"Notation","hash":"_notation_5","id":27},{"text":"Constructors and Assignment","hash":"_constructors_and_assignment_3","id":28},{"text":"Mutators","hash":"_mutators","id":29}]},"11":{"id":11,"text":"The Q DSP library processes audio signals by applying various audio processors to sample inputs. These processors typically operate with floating-point input samples in the typical -1.0 to 1.0 range. However, the values are not restricted to sampled signals. For instance, signal envelopes are best represented as decibels processed in the logarithmic domain. Consequently, dynamic-range processors such as compressors and expanders accept decibel as input and return decibel as output. The Q DSP library is typeful and typesafe, which means that each data type is explicitly defined and enforced. This is crucial because it avoids the potentially catastrophic errors that could result from mismatching values of different types. For example, if all values were just raw floating point types, it would be possible to accidentally mix up the frequency and decibel values. Mistakenly interchanging frequency and decibel values could result in erroneous processing of the audio signal and will lead to undefined results. This document aims to provide comprehensive documentation of the fundamental data types used by the Q DSP library. These basic units are utilized consistently throughout the library and serve as the basis for quantifying specific parameters, such as decibels (dB) for signal level and hertz (Hz) for frequency. Unit is a concept representation of a physical unit. U Unit type. T Underlying arithmetic value type. v Arithmetic value. a Instance of a type that conforms to Unit. b Object with the same unit_type as a. A Type of object a. B Type of object b. The arithmetic value concept is documented in Basic Concepts and declared in this C++ concept as: namespace cycfi::q::concepts { template concept Arithmetic = std::integral || std::floating_point; } Expression Semantics Type U::value_type Get the underlying arithmetic value type. T U::unit_type Get the unique unit type. Each Unit type has its own unique unit type to distinguish from differnt Unit types. unspecified Compatible unit types A and B are allowed for certain expressions as defined below. These types conform to the SameUnit concept declared below: namespace cycfi::q::concepts { template concept SameUnit = std::same_as; } Basically, the declaration states that unit types A and B are the same if they have the same unit_type. Expression Semantics U(v) Construct a Unit from an arithmetic value v. U(b) Copy construct from b. a = b Assign b, to a. C++ brace initialization may also be used. Expression Semantics Return Type a.rep Direct access to the underlying arithmetic value representation. T Expression Semantics Return Type a == b Equality. bool a == v Equality with an arithmetic value. bool v == b Equality with an arithmetic value. bool a != b Non-Equality. bool a != v Non-Equality with an arithmetic value. bool v != b Non-Equality with aan arithmetic value. bool a b Greater than. bool a > v Greater than with an arithmetic value. bool v > b Greater than with an arithmetic value. bool a >= b Greater than equal. bool a >= v Greater than equal with an arithmetic value. bool v >= b Greater than equal with an arithmetic value. bool Expression Semantics Return Type +a Positive. Unit -a Negative. Unit a += b Add assign. Unit& a += v Add assign with an arithmetic value. Unit& a -= b Subtract assign. Unit& a -= v Subtract assign with an arithmetic value. Unit& a *= v Multiply assign with an arithmetic value. Unit& a /= v Divide assign with an arithmetic value. Unit& a + b Addition. Unit a + v Addition with an arithmetic value. Unit v + b Addition with an arithmetic value. Unit a - b Subtraction. Unit a - v Subtraction with an arithmetic value. Unit v - b Subtraction with an arithmetic value. Unit a * v Multiplication with an arithmetic value. Unit v * b Multiplication with an arithmetic value. Unit a / b Division. T a / v Division with an arithmetic value. Unit On binary operations a + b and a - b, where a and b conform to the SameUnit concept (see above), the resuling type will be whichever has the value_type of decltype(a.ref + b.rep), else if both operands are promoted, then whichever has the larger value_type will be chosen. For example, if a.rep is double and b.rep is int, the result will be the unit type of a. frequency duration period phase decibel interval","title":"Units","component":"q","version":"develop-0.99","name":"units","url":"/q/develop-0.99/reference/units.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Unit","hash":"_unit","id":2},{"text":"Expressions","hash":"_expressions","id":3},{"text":"Notation","hash":"_notation","id":4},{"text":"Arithmetic Concept","hash":"_arithmetic_concept","id":5},{"text":"Type Definitions","hash":"_type_definitions","id":6},{"text":"SameUnit Concept","hash":"_sameunit_concept","id":7},{"text":"Constructors and Assignment","hash":"_constructors_and_assignment","id":8},{"text":"Access","hash":"_access","id":9},{"text":"Comparison","hash":"_comparison","id":10},{"text":"Arithmetic","hash":"_arithmetic","id":11},{"text":"Unit Promotion","hash":"_unit_promotion","id":12},{"text":"Models","hash":"_models","id":13}]},"12":{"id":12,"text":"All pass second-order IIR (Infinite Impulse Response) filter. This filter is embodied by the allpass class. #include struct allpass : biquad { allpass(frequency f, float sps, double q = 0.707); void config(frequency f, float sps, double q = 0.707) }; In addition to valid expressions for biquad, allpass allows these expressions. ap Object of type allpass. f Object of type frequency. sps Floating point value representing samples per second. q Q or quality factor. a [, b, c, d] Required a, optional b, c, d. Expression Semantics allpass(f, sps [, q]) Construct an allpass filter from f, sps and optional q (defaults to 0.707). C++ brace initialization may also be used. Expression Semantics ap.config(f, sps [, q]) Configure an allpass from f, sps and optional q (defaults to 0.707).","title":"All Pass Filter","component":"q","version":"develop-0.99","name":"allpass","url":"/q/develop-0.99/reference/biquad/allpass.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructor","hash":"_constructor","id":6},{"text":"Mutators","hash":"_mutators","id":7}]},"13":{"id":13,"text":"Band pass second-order IIR (Infinite Impulse Response) filter with constant 0 dB peak gain. This filter is embodied by the allpass class. #include struct bw (1) { double val; // in octaves }; struct bandpass_cpg : biquad { bandpass_cpg(frequency f, float sps, bw _bw); bandpass_cpg(frequency f, float sps, double q = 0.707); void config(frequency f, float sps, bw _bw); void config(frequency f, float sps, double q = 0.707); }; 1 Utility type to distinguish bandwidth from q which is just a double In addition to valid expressions for biquad, bandpass_cpg allows these expressions. bf Object of type bandpass_cpg. f Object of type frequency. sps Floating point value representing samples per second. b Bandwidth (in octaves). q Q or quality factor. a [, b, c, d] Required a, optional b, c, d. Expression Semantics bandpass_cpg(f, sps [, q]) Construct a bandpass_cpg filter from f, sps and optional q (defaults to 0.707). bandpass_cpg(f, sps, bw{b}) Construct a bandpass_cpg filter from f, sps and b (bandwidth). C++ brace initialization may also be used. Expression Semantics bf.config(f, sps) Configure a bandpass_cpg filter from f, sps. q defaults to 0.707 bf.config(f, sps [, q]) Configure a bandpass_cpg filter from f, sps and optional q (defaults to 0.707). bf.config(f, sps, bw{b}) Configure a bandpass_cpg filter from f, sps and b (bandwidth).","title":"Band Pass Filter; Constant Peak Gain","component":"q","version":"develop-0.99","name":"bandpass_cpg","url":"/q/develop-0.99/reference/biquad/bandpass_cpg.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructor","hash":"_constructor","id":6},{"text":"Mutators","hash":"_mutators","id":7}]},"14":{"id":14,"text":"Band pass second-order IIR (Infinite Impulse Response) filter with constant skirt gain, peak gain = Q. This filter is embodied by the bandpass_csg class. #include struct bw (1) { double val; // in octaves }; struct bandpass_csg : biquad { bandpass_csg(frequency f, float sps, bw _bw); bandpass_csg(frequency f, float sps, double q = 0.707); void config(frequency f, float sps, bw _bw); void config(frequency f, float sps, double q = 0.707); }; 1 Utility type to distinguish bandwidth from q which is just a double In addition to valid expressions for biquad, bandpass_csg allows these expressions. bf Object of type bandpass_csg. f Object of type frequency. sps Floating point value representing samples per second. b Bandwidth (in octaves). q Q or quality factor. a [, b, c, d] Required a, optional b, c, d. Expression Semantics bandpass_csg(f, sps [, q]) Construct a bandpass_csg filter from f, sps and optional q (defaults to 0.707). bandpass_csg(f, sps, bw{b}) Construct a bandpass_csg filter from f, sps and b (bandwidth). C++ brace initialization may also be used. Expression Semantics bf.config(f, sps [, q]) Configure a bandpass_csg filter from f, sps and optional q (defaults to 0.707). bf.config(f, sps, bw{b}) Configure a bandpass_csg filter from f, sps and b (bandwidth).","title":"Band Pass Filter; Constant Skirt Gain","component":"q","version":"develop-0.99","name":"bandpass_csg","url":"/q/develop-0.99/reference/biquad/bandpass_csg.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructor","hash":"_constructor","id":6},{"text":"Mutators","hash":"_mutators","id":7}]},"15":{"id":15,"text":"High pass second-order IIR (Infinite Impulse Response) filter. This filter is embodied by the highpass class. #include struct highpass : biquad { highpass(frequency f, float sps, double q = 0.707); void config(frequency f, float sps, double q = 0.707) }; In addition to valid expressions for biquad, highpass allows these expressions. hp Object of type highpass. f Object of type frequency. sps Floating point value representing samples per second. `q Q or quality factor. a [, b, c, d] Required a, optional b, c, d. Expression Semantics highpass(f, sps [, q]) Construct a highpass filter from f, sps and optional q (defaults to 0.707). C++ brace initialization may also be used. Expression Semantics hp.config(f, sps [, q]) Configure a highpass from f, sps and optional q (defaults to 0.707).","title":"High Pass Filter","component":"q","version":"develop-0.99","name":"highpass","url":"/q/develop-0.99/reference/biquad/highpass.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructor","hash":"_constructor","id":6},{"text":"Mutators","hash":"_mutators","id":7}]},"16":{"id":16,"text":"High shelf second-order IIR (Infinite Impulse Response) filter. All frequencies above the shelving frequency are either boosted or attenuated by the specified gain in decibels. This filter is embodied by the highshelf class. #include struct highshelf : biquad { highshelf(double db_gain, frequency f, float sps, double q = 0.707); void config(double db_gain, frequency f, float sps, double q = 0.707); }; In addition to valid expressions for biquad, highshelf allows these expressions. hs Object of type highshelf. f Object of type frequency. sps Floating point value representing samples per second. q Q or quality factor. g gain (in decibels). a [, b, c, d] Required a, optional b, c, d. Expression Semantics highshelf(g, f, sps [, q]) Construct a highshelf from g, f, sps and optional q (defaults to 0.707). C++ brace initialization may also be used. Expression Semantics hs.config(g, f, sps [, q]) Configure a highshelf from g, f, sps and optional q (defaults to 0.707).","title":"High Shelf Filter","component":"q","version":"develop-0.99","name":"highshelf","url":"/q/develop-0.99/reference/biquad/highshelf.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructor","hash":"_constructor","id":6},{"text":"Mutators","hash":"_mutators","id":7}]},"17":{"id":17,"text":"Low pass second-order IIR (Infinite Impulse Response) filter. This filter is embodied by the lowpass class. #include struct lowpass : biquad { lowpass(frequency f, float sps, double q = 0.707); void config(frequency f, float sps, double q = 0.707) }; In addition to valid expressions for biquad, lowpass allows these expressions. lp Object of type lowpass. f Object of type frequency. sps Floating point value representing samples per second. q Q or quality factor. a [, b, c, d] Required a, optional b, c, d. Expression Semantics lowpass(f, sps [, q]) Construct a lowpass from f, sps and optional q (defaults to 0.707). C++ brace initialization may also be used. Expression Semantics lp.config(f, sps [, q]) Configure a lowpass from f, sps and optional q (defaults to 0.707).","title":"Low Pass Filter","component":"q","version":"develop-0.99","name":"lowpass","url":"/q/develop-0.99/reference/biquad/lowpass.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructor","hash":"_constructor","id":6},{"text":"Mutators","hash":"_mutators","id":7}]},"18":{"id":18,"text":"Low shelf second-order IIR (Infinite Impulse Response) filter. All frequencies below the shelving frequency are either boosted or attenuated by the specified gain in decibels. This filter is embodied by the lowshelf class. #include struct lowshelf : biquad { lowshelf(double db_gain, frequency f, float sps, double q = 0.707); void config(double db_gain, frequency f, float sps, double q = 0.707); }; In addition to valid expressions for biquad, lowshelf allows these expressions. ls Object of type lowshelf. f Object of type frequency. sps Floating point value representing samples per second. q Q or quality factor. g gain (in decibels). a [, b, c, d] Required a, optional b, c, d. Expression Semantics lowshelf(g, f, sps [, q]) Construct a lowshelf from g, f, sps and optional q (defaults to 0.707). C++ brace initialization may also be used. Expression Semantics ls.config(g, f, sps [, q]) Configure a lowshelf from g, f, sps and optional q (defaults to 0.707).","title":"Low Shelf Filter","component":"q","version":"develop-0.99","name":"lowshelf","url":"/q/develop-0.99/reference/biquad/lowshelf.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructor","hash":"_constructor","id":6},{"text":"Mutators","hash":"_mutators","id":7}]},"19":{"id":19,"text":"Notch second-order IIR (Infinite Impulse Response) filter. This filter is embodied by the notch class. #include struct bw (1) { double val; // in octaves }; struct notch : biquad { notch(frequency f, float sps, bw _bw); notch(frequency f, float sps, double q = 0.707); void config(frequency f, float sps, bw _bw); void config(frequency f, float sps, double q = 0.707); }; 1 Utility type to distinguish bandwidth from q which is just a double In addition to valid expressions for biquad, notch allows these expressions. nf Object of type notch. f Object of type frequency. sps Floating point value representing samples per second. b Bandwidth (in octaves). q Q or quality factor. a [, b, c, d] Required a, optional b, c, d. Expression Semantics notch(f, sps [, q]) Construct a notch filter from f, sps and optional q (defaults to 0.707). notch(f, sps, bw{b}) Construct a notch filter from f, sps and b (bandwidth). C++ brace initialization may also be used. Expression Semantics `nf.config(f, sps [, q]) Configure a notch filter from f, sps and optional q (defaults to 0.707). nf.config(f, sps, bw{b}) Configure a notch filter from f, sps and b (bandwidth).","title":"Notch Filter","component":"q","version":"develop-0.99","name":"notch","url":"/q/develop-0.99/reference/biquad/notch.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructor","hash":"_constructor","id":6},{"text":"Mutators","hash":"_mutators","id":7}]},"20":{"id":20,"text":"Peaking second-order IIR (Infinite Impulse Response) filter. This filter is embodied by the peaking class. #include struct bw (1) { double val; // in octaves }; struct peaking : biquad { peaking(double db_gain, frequency f, float sps, bw _bw); peaking(double db_gain, frequency f, float sps, double q = 0.707); void config(double db_gain, frequency f, float sps, bw _bw); void config(double db_gain, frequency f, float sps, double q = 0.707); }; 1 Utility type to distinguish bandwidth from q which is just a double In addition to valid expressions for biquad, peaking allows these expressions. bf Object of type peaking. f Object of type frequency. sps Floating point value representing samples per second. b Bandwidth (in octaves). q Q or quality factor. g gain (in decibels). a [, b, c, d] Required a, optional b, c, d. Expression Semantics peaking(g, f, sps [, q]) Construct a peaking filter from g, f, sps and optional q (defaults to 0.707). peaking(g, f, sps, bw{b}) Construct a peaking filter from g, f, sps and b (bandwidth). C++ brace initialization may also be used. Expression Semantics bf.config(g, f, sps [, q]) Configure a peaking filter from g, f, sps and optional q (defaults to 0.707). bf.config(g, f, sps, bw{b}) Configure a peaking filter from g, f, sps and b (bandwidth).","title":"Peaking Filter","component":"q","version":"develop-0.99","name":"peaking","url":"/q/develop-0.99/reference/biquad/peaking.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructor","hash":"_constructor","id":6},{"text":"Mutators","hash":"_mutators","id":7}]},"21":{"id":21,"text":"The AGC, or automatic gain control, compares the envelope, env, to an external reference, ref, and increases or decreases the gain to maintain a constant output level. A class named agc implements AGC. Envelope tracking is done externally using an external envelope follower to make it possible to use different types of envelope tracking schemes, the output of which is the supplied argument to the function call operator. The agc is an envelope processor that operates on the envelope of the audio signal, performs computations in the logarithmic domain, and returns a processed envelope. See Dynamic for further details. agc is a feedforward type AGC.\" In contrast to feedback AGCs, feedforward AGCs derive their control signal only from the input signal and an external reference set-point. #include struct agc { agc(decibel max); decibel operator()(decibel env, decibel ref) const; void max(decibel max_); decibel max() const; }; g, a, b Objects of type agc max, ref Objects of type decibel Expression Semantics agc(max) Construct an agc from max (maximum) gain. agc(g) Copy construct from agc g. a = b Assign b to a. C++ brace initialization may also be used. As previously stated, the agc compares the envelope, env, to an external reference, ref, and adjusts the gain accordingly to maintain a constant output level. However, there is a maximum gain that can be applied when the signal falls below the reference. The max constructor parameter specified this \"maximum\" gain. Expression Semantics Return Type g(env, ref) Process the input envelope env by increasing or decreasing the gain if env goes above, or falls below ref to maintain a constant output level. decibel The output is the adjusted gain, also in decibels. Simply multiply the signal by the result converted to float using as_float (or double using as_double). For example: auto gain = as_float(g(env, ref)); (1) auto out = signal * gain; (2) 1 env is the computed envelope (e.g.) using an envelope follower. gain is obtained from the env processed by agc and converted to float. 2 The signal multiplied by gain. Expression Semantics Return Type g.max(max) Set the agc maximum gain. void Expression Semantics Return Type g.max() Get the agc maximum gain. float","title":"AGC","component":"q","version":"develop-0.99","name":"agc","url":"/q/develop-0.99/reference/dynamic/agc.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructors and Assignment","hash":"_constructors_and_assignment","id":6},{"text":"Function Call","hash":"_function_call","id":7},{"text":"Mutators","hash":"_mutators","id":8},{"text":"Accessors","hash":"_accessors","id":9}]},"22":{"id":22,"text":"The compressor dynamically modulates the gain when the signal envelope rises above a specified threshold. The compressor reduces the level of high-level signals (signals above the threshold) while leaving low-level signals unchanged. The compressor is implemented by a class named compressor. Envelope tracking is done externally using an external envelope follower to make it possible to use different types of envelope tracking schemes, the output of which is the supplied argument to the function call operator. The compressor can be utilized as a limiter by setting its threshold to the desired limit level and the ratio to a high value (e.g. 10:1 or greater). The limiter prevents the signal from exceeding a certain threshold level. When the input signal exceeds the threshold, the compressor squashes the output level. For this to be effective, you will need to use an envelope follower with fast attack time to ensure that the limiting action is instantaneous, preventing transient peaks from exceeding the threshold level. The compressor is an envelope processor that operates on the envelope of the audio signal, performs computations in the logarithmic domain, and returns a processed envelope. See Dynamic for further details. compressor is a hard knee compressor: a type of compressor in which the compression ratio changes abruptly when the input signal exceeds the threshold level, known as the knee point. Both hard knee and soft knee compressors are supported by the Q DSP library. #include struct compressor { compressor(decibel threshold, float ratio); decibel operator()(decibel env) const; void threshold(decibel val); void ratio(float ratio); decibel threshold() const; float ratio() const; }; comp, a, b Objects of type compressor t, env Objects of type decibel r Floating point value for compression ratio. Expression Semantics compressor(t, r) Construct a compressor from t (threshold) and r (ratio). compressor(comp) Copy construct from compressor comp. a = b Assign b to a. C++ brace initialization may also be used. The ratio parameter, r, specifies the amount of gain applied. With the typical \"n:1\" notation for compressors, the ratio parameter is 1/n, thereby the ratio for compressors is normally from 0.0…​1.0. For example, a 4:1 compression is 1/4 or 0.25. Signal rising above the threshold is attenuated, compressing the signal. For every dB above the threshold, t, the signal is attenuated by n dB. For example, with a ratio of 4:1 (0.25), 1dB above the threshold is attenuated by 4dB. Expression Semantics Return Type comp(env) Process the input envelope env and return the compressed result. decibel The output is the compressed gain, also in decibels. Simply multiply the signal by the result converted to float using as_float (or double using as_double). For example: auto gain = as_float(comp(env)); (1) auto left_out = left_signal * gain; (2) auto right_out = right_signal * gain; (3) 1 env is the computed envelope (e.g.) using an envelope follower. gain is obtained from the env processed by comp and converted to float. 2 Stereo left_signal multiplied by gain. 3 Stereo right_signal multiplied by gain. Typically, you add some makeup gain after compression to compensate for the gain reduction. Expression Semantics Return Type comp.threshold(t) Set the compressor threshold. void comp.ratio(r) Set the compressor ratio. void Expression Semantics Return Type comp.threshold() Get the compressor threshold. decibel comp.ratio() Get the compressor ratio. float","title":"Compressor","component":"q","version":"develop-0.99","name":"compressor","url":"/q/develop-0.99/reference/dynamic/compressor.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructors and Assignment","hash":"_constructors_and_assignment","id":6},{"text":"Function Call","hash":"_function_call","id":7},{"text":"Mutators","hash":"_mutators","id":8},{"text":"Accessors","hash":"_accessors","id":9}]},"23":{"id":23,"text":"The expander is the inverse of the compressor. The expander dynamically modulates the gain when the signal falls below the threshold, attenuating the signal. The expander is used to increase the dynamic range of an audio signal by reducing the level of low-level signals (signals below the threshold) while leaving high-level signals unchanged, in contrast to a compressor, which reduces the level of high-level signals while leaving low-level signals unchanged. A certain type of expander, called the downward expander, is implemented by a class named expander. The expander can be utilized as a noise gate by setting the threshold to allow only audio signals above the noise floor to pass through. When the audio level falls below the threshold, the expander effectively gates out any low-level noise by reducing the audio signal level down to zero. The result can range from a hard and sudden cutoff to a soft and gradual reduction of signals below the threshold, depending on the desired ratio. Envelope tracking is done externally using an external envelope follower to make it possible to use different types of envelope tracking schemes, the output of which is the supplied argument to the function call operator. The expander is an envelope processor that operates on the envelope of the audio signal, performs computations in the logarithmic domain, and returns a processed envelope. See Dynamic for further details. expander is a downward expander. This type of expander gradually decreases the level of the audio signal below the threshold. #include struct expander { expander(decibel threshold, float ratio); decibel operator()(decibel env) const; void threshold(decibel val); void ratio(float ratio); decibel threshold() const; float ratio() const; }; exp, a, b Objects of type expander t, env Objects of type decibel r Floating point value for compression ratio. Expression Semantics expander(t, r) Construct a expander from t (threshold), w (width), and r (ratio). expander(exp) Copy construct from expander exp. a = b Assign b to a. C++ brace initialization may also be used. The ratio parameter, r, specifies the amount of gain applied. With the typical \"1:n\" notation for expanders, the ratio parameter is n, thereby the ratio for expanders is normally from 0.0…​inf. (e.g. 1:4 expansion is 4). A ratio of 1:inf is a hard gate where no signal passes below the threshold. For every dB below the threshold, the signal is attenuated by n dB. For example, with a ratio of 4:1 (4), 1dB below the threshold is attenuated by 4dB. Expression Semantics Return Type exp(env) Process the input envelope env and return the expanded result. decibel The output is the expanded gain, also in decibels. Simply multiply the signal by the result converted to float using as_float (or double using as_double). For example: auto gain = as_float(exp(env)); (1) auto left_out = left_signal * gain; (2) auto right_out = right_signal * gain; (3) 1 env is the computed envelope (e.g.) using an envelope follower. gain is obtained from the env processed by exp and converted to float. 2 Stereo left_signal multiplied by gain. 3 Stereo right_signal multiplied by gain. Expression Semantics Return Type exp.threshold(t) Set the expander threshold. void exp.ratio(r) Set the expander ratio. void Expression Semantics Return Type exp.threshold() Get the expander threshold. decibel exp.ratio() Get the expander ratio. float","title":"Expander","component":"q","version":"develop-0.99","name":"expander","url":"/q/develop-0.99/reference/dynamic/expander.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructors and Assignment","hash":"_constructors_and_assignment","id":6},{"text":"Function Call","hash":"_function_call","id":7},{"text":"Mutators","hash":"_mutators","id":8},{"text":"Accessors","hash":"_accessors","id":9}]},"24":{"id":24,"text":"The compressor dynamically modulates the gain when the signal envelope rises above a specified threshold. The compressor reduces the level of high-level signals (signals above the threshold) while leaving low-level signals unchanged. A type of compressor known as the soft knee compressor is implemented by a class named soft_knee_compressor. Envelope tracking is done externally using an external envelope follower to make it possible to use different types of envelope tracking schemes, the output of which is the supplied argument to the function call operator. The soft_knee_compressor is an envelope processor that operates on the envelope of the audio signal, performs computations in the logarithmic domain, and returns a processed envelope. See Dynamic for further details. soft_knee_compressor is a type of compressor that employs a gradual compression ratio transition. In a soft knee compressor, the compression ratio gradually increases as the input signal level approaches the threshold level, rather than immediately switching to the ratio at the threshold. This produces a smoother and more natural-sounding compression effect. Soft knee compressors are used when a transparent and subtle compression effect is desired. Both hard knee and soft knee compressors are supported by the Q DSP library. #include struct soft_knee_compressor { soft_knee_compressor(decibel threshold, decibel width, float ratio); decibel operator()(decibel env) const; void threshold(decibel val); void width(decibel val); void ratio(float ratio); decibel threshold() const; decibel width() const; float ratio() const; }; comp, a, b Objects of type soft_knee_compressor t, w, env Objects of type decibel r Floating point value for compression ratio. Expression Semantics soft_knee_compressor(t, w, r) Construct a soft_knee_compressor from t (threshold), w (width), and r (ratio). soft_knee_compressor(comp) Copy construct from soft_knee_compressor comp. a = b Assign b to a. C++ brace initialization may also be used. The ratio parameter, r, specifies the amount of gain applied. With the typical \"n:1\" notation for compressors, the ratio parameter is 1/n, thereby the ratio for compressors is normally from 0.0…​1.0. For example, a 4:1 compression is 1/4 or 0.25. Signal rising above the threshold is attenuated, compressing the signal. For every dB above the threshold, t, the signal is attenuated by n dB. For example, with a ratio of 4:1 (0.25), 1dB above the threshold is attenuated by 4dB. Expression Semantics Return Type comp(env) Process the input envelope env and return the compressed result. decibel The output is the compressed gain, also in decibels. Simply multiply the signal by the result converted to float using as_float (or double using as_double). For example: auto gain = as_float(comp(env)); (1) auto left_out = left_signal * gain; (2) auto right_out = right_signal * gain; (3) 1 env is the computed envelope (e.g.) using an envelope follower. gain is obtained from the env processed by comp and converted to float. 2 Stereo left_signal multiplied by gain. 3 Stereo right_signal multiplied by gain. Typically, you add some makeup gain after compression to compensate for the gain reduction. Expression Semantics Return Type comp.threshold(t) Set the soft_knee_compressor threshold. void comp.width(w) Set the soft_knee_compressor width. void comp.ratio(r) Set the soft_knee_compressor ratio. void Expression Semantics Return Type comp.threshold() Get the soft_knee_compressor threshold. decibel comp.width() Get the soft_knee_compressor width. decibel comp.ratio() Get the soft_knee_compressor ratio. float","title":"Soft Knee Compressor","component":"q","version":"develop-0.99","name":"soft_knee_compressor","url":"/q/develop-0.99/reference/dynamic/soft_knee_compressor.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructors and Assignment","hash":"_constructors_and_assignment","id":6},{"text":"Function Call","hash":"_function_call","id":7},{"text":"Mutators","hash":"_mutators","id":8},{"text":"Accessors","hash":"_accessors","id":9}]},"25":{"id":25,"text":"AR Envelope Follower, where \"AR\" stands for Attack-Release, is similar to the Peak Envelope Follower but allows you to specify the attack duration. During the attack phase of an audio signal, the AR envelope follower attempts to follow the signal but is constrained by the attack duration. A longer attack period gives a softer response, exponentially increasing. When the signal level drops below the peak, the follower gradually releases the peak level with an exponential decay. The AR envelope follower models the behavior of two resistors, one for attack, and one for release, each connected in series with an ideal diode —with no voltage drop—, tied together and connected to a capacitor. During attacks, the capacitor charges through the attack resistor, exponentially increasing. The capacitor discharges through the release resistor as the audio signal falls below the peak charge, causing the output voltage to progressively decay with an exponential curve. Figure 1. AR envelope follower response The plot in Figure 1 depicts the response of the AR envelope follower, which was obtained by picking the guitar’s low-E string and using a 2-milliseconds attack duration and 2-second release duration (envelope: magenta, signal: blue, absolute value of the signal: dark blue). It is worth noting that we use the absolute value of the signal to capture both the positive and negative sides of the waveform, as indicated by the dark blue plot. The AR envelope follower does not perform this operation automatically, allowing you to perform any necessary preprocessing before computing the envelope. This flexibility enables you, for example, to capture only the positive or negative peaks, or perhaps the square of the signal, depending on your application needs. Like the Peak Envelope Follower, the AR Peak Detector is susceptible to having ripples in the envelope with the short release durations. See Envelope Ripples for details. #include struct ar_envelope_follower { ar_envelope_follower( duration attack , duration release , float sps ); float operator()(float s); float operator()() const; ar_envelope_follower& operator=(float y); void config(duration attack, duration release, float sps); void attack(float attack_, float sps); void release(float release_, float sps); }; env, a, b Objects of type ar_envelope_follower atk, rel Objects of type duration sps Floating point value for samples per second. s Floating point value for the latest input sample. y Floating point value from 0.0 to 1.0. Expression Semantics ar_envelope_follower(atk, rel, sps) Construct a ar_envelope_follower given atk (attack duration), rel (release duration) and sps (samples per second). ar_envelope_follower(env) Copy construct from ar_envelope_follower env. a = b Assign b to a. a = y Reset the latest held value of the ar_envelope_follower to y. C++ brace initialization may also be used. Expression Semantics Return Type env(s) Process the input sample s and return the detected envelope. float env() Get the latest held value of the ar_envelope_follower float Expression Semantics Return Type env.config(atk, rel, sps) Set the attack duration given atk (attack duration), rel (release duration) and sps (samples per second). void env.attack(atk, sps) Set the attack duration given atk (attack duration) and sps (samples per second) void env.release(rel, sps) Set the release duration given rel (release duration) and sps (samples per second) void","title":"AR Envelope Follower","component":"q","version":"develop-0.99","name":"ar_envelope_follower","url":"/q/develop-0.99/reference/envelope/ar_envelope_follower.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Response","hash":"_response","id":2},{"text":"Include","hash":"_include","id":3},{"text":"Declaration","hash":"_declaration","id":4},{"text":"Expressions","hash":"_expressions","id":5},{"text":"Notation","hash":"_notation","id":6},{"text":"Constructors and Assignment","hash":"_constructors_and_assignment","id":7},{"text":"Function Call","hash":"_function_call","id":8},{"text":"Mutators","hash":"_mutators","id":9}]},"26":{"id":26,"text":"The Fast Averaging Envelope Follower is a variation of the Fast Envelope Follower. It is a simple composite class that contains a fast envelope follower member and a moving average filter member to smooth out the staircase ripples. One advantage of a moving average filter over a standard low-pass filter is that its output has less distortion of the envelope’s shape due to its linear phase response, which means it does not cause phase shifts, keeping the signal’s time-domain shape substantially intact. The plot in Figure 1 below shows the fast averaging envelope follower’s response (envelope: pink, signal: blue, absolute value of the signal: dark blue). Figure 1. Fast averaging envelope follower response The plot in Figure 2 below shows the plain and Fast averaging envelope follower’s response. The fast envelope follower’s staircase-like envelope is effectively smoothed out using a moving average filter with the same duration as the hold parameter. The moving average filter transforms the hard staircase edges into soft ramps. #include template struct basic_fast_ave_envelope_follower { basic_fast_ave_envelope_follower(duration hold, float sps); float operator()(float s); float operator()() const; }; using fast_ave_envelope_follower = basic_fast_ave_envelope_follower; basic_fast_ave_envelope_follower essentially follows the same API as Fast Envelope Follower. basic_fast_ave_envelope_follower is a template class parameterized by div, which must be >= 1. div specifies the minimum duration required for the hold parameter. The hold duration should be equal to or slightly longer than 1/div multiplied by the period of the lowest frequency of the signal we wish to track. For example, if the lowest frequency we wish to track is 440 Hz, and div = 2, then the hold parameter should be greater than 1.13 ms. fast_ave_envelope_follower is an alias for basic_fast_ave_envelope_follower. In general, this is all you need to use, unless you want finer granularity. The higher the div is, the finer the granularity possible. Again, all of these comes at the cost of additional computing complexity. env_t A basic_fast_ave_envelope_follower type. env, a, b Objects of type basic_fast_ave_envelope_follower hold Object of type duration sps Floating point value for samples per second. s Floating point value for the latest input sample. Expression Semantics env_t(hold, sps) Construct a basic_fast_ave_envelope_follower given hold (hold duration) and sps (samples per second). env_t(env) Copy construct from basic_fast_ave_envelope_follower env. a = b Assign b to a. C++ brace initialization may also be used. env_t is just a shortcut notation for any type or alias to a template instantiation of basic_fast_ave_envelope_follower. Example: using my_env_t = basic_fast_ave_envelope_follower; Expression Semantics Return Type env(s) Process the input sample s and return the detected envelope. float env() Get the latest held value of the basic_fast_ave_envelope_follower float","title":"Fast Averaging Envelope Follower","component":"q","version":"develop-0.99","name":"fast_ave_envelope_follower","url":"/q/develop-0.99/reference/envelope/fast_ave_envelope_follower.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Response","hash":"_response","id":2},{"text":"Include","hash":"_include","id":3},{"text":"Declaration","hash":"_declaration","id":4},{"text":"Expressions","hash":"_expressions","id":5},{"text":"Notation","hash":"_notation","id":6},{"text":"Constructors and Assignment","hash":"_constructors_and_assignment","id":7},{"text":"Function Call","hash":"_function_call","id":8}]},"27":{"id":27,"text":"The Fast Envelope Follower is the software implementation of a unique envelope detector that feature fast response and low ripple. It is based on the hardware article titled Envelope Follower Combines Fast Response, Low Ripple by Harry Bissell Jr. See Figure 1 below. Basically, the result of the fast envelope follower is the maximum of N peak values taken simultaneously. Each value is the maximum of the current sample and the latest held peak value. Each of the peak values are reset to zero in a round-robin fashion. As a peak value is reset, the other peak values still hold the latest peak value. The highest peak among N peaks is then chosen as the current output. Figure 1. Fast Envelope Detector The plot in Figure 2 below shows the fast envelope follower’s response. As compared to the Peak Envelope Follower and AR Envelope Follower, the fast envelope follower’s superior performance is immediately apparent in the plot. Of course, this comes at the cost of additional computing complexity. Figure 2. Fast envelope follower response The reset cycle time is specified by the hold duration parameter. The number of peak values is specified by the div parameter. The plot was obtained by picking the guitar’s low-E string and using a hold duration of approximately 6 ms and with a div of 2 (envelope: red, signal: blue, absolute value of the signal: dark blue). See below for more information on the hold and div parameters. It is worth noting that we use the absolute value of the signal to capture both the positive and negative sides of the waveform, as indicated by the dark blue plot. The fast envelope follower does not perform this operation automatically, allowing you to perform any necessary preprocessing before computing the envelope. This flexibility enables you, for example, to capture only the positive or negative peaks, or perhaps the square of the signal, depending on your application needs. The output is a jagged, staircase-like envelope that tightly follows the input, including fast attacks and decays. Figure 3 below (envelope: red, signal: blue, absolute value of the signal: dark blue) is a closer view of Figure 2 above: Figure 3. Staircase-Like Output The output is suitable for signal analysis as is. If the signal is to be utilized for modulation, for example as input to a Compressor, further filtering is recommended. Fast Averaging Envelope Follower is one such example. Figure 4 demonstrates in closer detail the transient response of various envelope detectors, demonstrating how the fast envelope follower’s response closely follows the true envelope of the signal compared to the Peak Envelope Follower and AR Envelope Follower, both of which perform poorly on signal decays. Figure 4. Transient Response of Envelope Detectors #include template struct basic_fast_envelope_follower { static_assert(div >= 1, \"div must be >= 1\"); basic_fast_envelope_follower(duration hold, float sps); float operator()(float s); float operator()() const; }; using fast_envelope_follower = basic_fast_envelope_follower; basic_fast_envelope_follower is a template class parameterized by div, which must be >= 1. div specifies the minimum duration required for the hold parameter. The hold duration should be equal to or slightly longer than 1/div multiplied by the period of the lowest frequency of the signal we wish to track. For example, if the lowest frequency we wish to track is 440 Hz, and div = 2, then the hold parameter should be greater than 1.13 ms. fast_envelope_follower is an alias for basic_fast_envelope_follower. In general, this is all you need to use, unless you want finer granularity. The higher the div is, the finer the granularity possible. Again, all of these comes at the cost of additional computing complexity. env_t A basic_fast_envelope_follower type. env, a, b Objects of type basic_fast_envelope_follower hold Object of type duration sps Floating point value for samples per second. s Floating point value for the latest input sample. Expression Semantics env_t(hold, sps) Construct a basic_fast_envelope_follower given hold (hold duration) and sps (samples per second). env_t(env) Copy construct from basic_fast_envelope_follower env. a = b Assign b to a. env_t is just a shortcut notation for any type or alias to a template instantiation of basic_fast_envelope_follower. Example: using my_env_t = basic_fast_envelope_follower; C++ brace initialization may also be used. Expression Semantics Return Type env(s) Process the input sample s and return the detected envelope. float env() Get the latest held value of the basic_fast_envelope_follower float","title":"Fast Envelope Follower","component":"q","version":"develop-0.99","name":"fast_envelope_follower","url":"/q/develop-0.99/reference/envelope/fast_envelope_follower.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Response","hash":"_response","id":2},{"text":"Staircase Output","hash":"_staircase_output","id":3},{"text":"Transient Response","hash":"_transient_response","id":4},{"text":"Include","hash":"_include","id":5},{"text":"Declaration","hash":"_declaration","id":6},{"text":"Expressions","hash":"_expressions","id":7},{"text":"Notation","hash":"_notation","id":8},{"text":"Constructors and Assignment","hash":"_constructors_and_assignment","id":9},{"text":"Function Call","hash":"_function_call","id":10}]},"28":{"id":28,"text":"The Fast RMS Envelope Follower is a variation of the Fast Envelope Follower. It is a simple composite class that contains a Fast Averaging Envelope Follower member. The signal path is as follows: Square the signal. Apply the fast averaging envelope follower. The moving average filter in the fast averaging envelope follower returns the arithmetic mean of the squared values over its hold period. Return the square root the result. This is embodied in the fast_rms_envelope_follower class. Following the fast envelope follower API, the function call operator accepts a floating point sample, transforms it, and returns an envelope, also a floating point. The fast_rms_envelope_follower_db variant works in the dB domain, making it easy to use as an envelope follower for dynamic range effects (compressor, expander, and agc) that already work in the dB domain, so we eliminate a linear to decibel conversion and optimize computation by using division by 2 instead of sqrt as an added bonus. The plot in Figure 1 below shows the fast RMS envelope follower’s response (envelope: green, signal: blue, absolute value of the signal: dark blue). It may look indistinguishable from the Fast Averaging Envelope Follower's output, but this detector returns true RMS results. Figure 1. Fast RMS envelope follower response #include struct fast_rms_envelope_follower { fast_rms_envelope_follower(duration hold, float sps); float operator()(float s); }; struct fast_rms_envelope_follower_db : fast_rms_envelope_follower { using fast_rms_envelope_follower::fast_rms_envelope_follower; decibel operator()(float s); }; fast_rms_envelope_follower essentially follows the same API as Fast Envelope Follower. The fast_rms_envelope_follower_db variant works in the dB domain and returns decibel instead of float. env_t A fast_rms_envelope_follower or fast_rms_envelope_follower_db. env, a, b Objects of type fast_rms_envelope_follower or fast_rms_envelope_follower_db. hold Object of type duration sps Floating point value for samples per second. s Floating point value for the latest input sample. Expression Semantics env_t(hold, sps) Construct a basic_fast_ave_envelope_follower given hold (hold duration) and sps (samples per second). env_t(env) Copy construct from basic_fast_ave_envelope_follower env. a = b Assign b to a. C++ brace initialization may also be used. env_t is just a shortcut notation for any type or alias to a template instantiation of fast_rms_envelope_follower or fast_rms_envelope_follower_db. Expression Semantics Return Type env(s) Process the input sample s and return the detected envelope. float env() Get the latest held value of the basic_fast_ave_envelope_follower float","title":"Fast RMS Envelope Follower","component":"q","version":"develop-0.99","name":"fast_rms_envelope_follower","url":"/q/develop-0.99/reference/envelope/fast_rms_envelope_follower.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Response","hash":"_response","id":2},{"text":"Include","hash":"_include","id":3},{"text":"Declaration","hash":"_declaration","id":4},{"text":"Expressions","hash":"_expressions","id":5},{"text":"Notation","hash":"_notation","id":6},{"text":"Constructors and Assignment","hash":"_constructors_and_assignment","id":7},{"text":"Function Call","hash":"_function_call","id":8}]},"29":{"id":29,"text":"During the attack phase of an audio signal, the peak envelope follower closely tracks the maximum peak level. When the signal level drops below the peak, the follower gradually releases the peak level with an exponential decay. This allows the follower to accurately capture the dynamic changes in the audio signal while avoiding sudden downward fluctuations. The peak envelope follower models the behavior of an ideal diode —with no voltage drop— connected in series with a resistor and a capacitor connected in parallel. The ideal diode allows the positive peaks of the audio signal to pass through, charging the capacitor to the maximum. When the signal falls below the peak, the capacitor discharges through the resistor, causing the output voltage to gradually decay with an exponential curve, following the release time constant. Figure 1. Peak envelope follower response The plot in Figure 1 depicts the response of the peak envelope follower, which was obtained by picking the guitar’s low-E string and using a 2-second release duration (envelope: orange, signal: blue, absolute value of the signal: dark blue). It is worth noting that we use the absolute value of the signal to capture both the positive and negative sides of the waveform, as indicated by the dark blue plot. The peak envelope follower does not perform this operation automatically, allowing you to perform any necessary preprocessing before computing the envelope. This flexibility enables you, for example, to capture only the positive or negative peaks, or perhaps the square of the signal, depending on your application needs. The peak envelope follower can track fast attack transients, but cannot track downward slopes faster than the specified release duration. However, reducing the release duration too much can reveal envelope ripples. When the release duration is too fast, the peak envelope follower quickly releases the previous cycle’s peak and begins tracking the peak of the next cycle, causing ripples in the envelope follower’s output, as shown in the image on the right. Such ripples can cause unwanted modulation and can be heard as distortion or noise in the audio signal. Further low-pass filtering can reduce the ripples at the expense of smearing the attack shape. #include struct peak_envelope_follower { peak_envelope_follower(duration release, float sps); float operator()(float s); float operator()() const; peak_envelope_follower& operator=(float y); void release(duration release_, float sps); }; env, a, b Objects of type peak_envelope_follower rel Object of type duration sps Floating point value for samples per second. s Floating point value for the latest input sample. y Floating point value from 0.0 to 1.0. Expression Semantics peak_envelope_follower(rel, sps) Construct a peak_envelope_follower given rel (release duration) and sps (samples per second). peak_envelope_follower(env) Copy construct from peak_envelope_follower env. a = b Assign b to a. a = y Reset the latest held value of the peak_envelope_follower to y. C++ brace initialization may also be used. Expression Semantics Return Type env(s) Process the input sample s and return the detected envelope. float env() Get the latest held value of the peak_envelope_follower float Expression Semantics Return Type env.release(rel, sps) Set the release duration given rel (release duration) and sps (samples per second) void","title":"Peak Envelope Follower","component":"q","version":"develop-0.99","name":"peak_envelope_follower","url":"/q/develop-0.99/reference/envelope/peak_envelope_follower.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Response","hash":"_response","id":2},{"text":"Envelope Ripples","hash":"_envelope_ripples","id":3},{"text":"Include","hash":"_include","id":4},{"text":"Declaration","hash":"_declaration","id":5},{"text":"Expressions","hash":"_expressions","id":6},{"text":"Notation","hash":"_notation","id":7},{"text":"Constructors and Assignment","hash":"_constructors_and_assignment","id":8},{"text":"Function Call","hash":"_function_call","id":9},{"text":"Mutators","hash":"_mutators","id":10}]},"30":{"id":30,"text":"A DC blocker is a high-pass filter which attenuates frequencies below the signal’s lowest frequency of interest. Eliminating the DC offset from a signal allows the signal to be analyzed or processed more effectively in subsequent stages. dc_block is an implementation of a DC blocker based on Julius O. Smith’s document Introduction to Digital Filters. #include struct dc_block { dc_block(frequency f, float sps); float operator()(float s); float operator()() const; dc_block& operator=(float y); void cutoff(frequency f, float sps); }; bk, a, b Objects of type dc_block. f Object of type frequency representing the cutoff frequency. sps Floating point value representing samples per second. s Input sample. Expression Semantics dc_block(f, sps) Construct a dc_block with specified cutoff frequency, f, and samples per second sps. dc_block(b) Copy construct a dc_block from b. a = b Assign b to a. a = s Set the latest result to s. C++ brace initialization may also be used. Expression Semantics Return Type bk() Return the latest result. float bk(s) Remove DC from the input sample s. float Expression Semantics Return Type bk.cutoff(f, sps) Set the cutoff frequency given frequency f, and samples per second sps. void","title":"DC Block","component":"q","version":"develop-0.99","name":"dc_block","url":"/q/develop-0.99/reference/misc/dc_block.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructor","hash":"_constructor","id":6},{"text":"Constructors and Assignment","hash":"_constructors_and_assignment","id":7},{"text":"Mutators","hash":"_mutators","id":8}]},"31":{"id":31,"text":"Delays are important DSP building blocks. They introduce repetitions of the original signal, resulting in spacious soundscapes and echoes. The number of repetitions is controlled via feedback. The interval between the initial signal and the repetitions is altered by adjusting the delay time. Longer durations provide echoes, whereas shorter delays produce doubling effects. Filters can shape the repeating signals, influencing their tonal properties. Delays are also essential for modulation effects such as flangers and choruses, which are created by dynamically modulating delay times using low-frequency oscillators (LFOs). basic_delay is a basic class for delays. The actual delay duration parameter is decoupled from, and managed outside the class to allow both single and multi-tapped delays. The delay is implemented using a base ring buffer with provisions for non-fractional (exact) and fractional (sub-sample) indexing. Fractional element indexing is required for fractional delays that are not integer multiples of the sampling period. Figure 1. Delay Line basic_delay is a template class whose Base template parameter should be the ring buffer storage type it inherits from. See ring_buffer and fractional_ring_buffer. #include template class basic_delay : public Base { public: using value_type = typename Base::value_type; using storage_type = typename Base::storage_type; using index_type = typename Base::index_type; using interpolation_type = typename Base::interpolation_type; basic_delay(duration max_delay, float sps); float operator()() const; float operator()(index_type i) const; float operator()(value_type val, index_type i); }; // Fractional delay using delay = basic_delay>; // Non-fractional delay using nf_delay = basic_delay>; In addition to valid expressions for the Base class that the basic_delay inherits from (See ring_buffer and fractional_ring_buffer), basic_delay allows these expressions. Base Ring buffer storage type, e.g. ring_buffer. d_type A basic_delay type. d, a, b Objects of type basic_delay. val Object of type d_type::value_type. i Object of type d_type::index_type. max_delay Object of type duration. sps Floating point value representing samples per second. Expression Semantics basic_delay Instantiate a basic_delay type given Base ring buffer storage type. delay Pre declared fractional delay type. nf_delay Pre declared Non-fractional delay type. using my_delay_type1 = basic_delay>; using my_delay_type2 = delay; Expression Semantics d_type::value_type Get the underlying element type. d_type::storage_type Get the underlying storage type. d_type::index_type Get the underlying index type. d_type::interpolation_type Get the underlying interpolation type. Expression Semantics d_type(max_delay, sps) Construct a basic_delay with maximum duration, max_delay and samples per second, sps. d_type(d) Copy construct from d_type d. a = b Assign b to a. C++ brace initialization may also be used. Expression Semantics Return Type d() Get the delayed signal (maximum delay). d_type::value_type d(i) Get the delayed signal at index i. d_type::value_type d(val, i) Push a new signal and return the delayed signal at index i+1. This is the simplest (common) case for single delays. For multi-tapped delays, you need to access the individual delays using the indexing operator for various tap-points before pushing the latest sample. d_type::value_type","title":"Delay","component":"q","version":"develop-0.99","name":"delay","url":"/q/develop-0.99/reference/misc/delay.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Type Construction","hash":"_type_construction","id":6},{"text":"Examples:","hash":"_examples","id":7},{"text":"Type Accessors","hash":"_type_accessors","id":8},{"text":"Constructors and Assignment","hash":"_constructors_and_assignment","id":9},{"text":"Function Call","hash":"_function_call","id":10}]},"32":{"id":32,"text":"The moving_average is the simplest and most efficient FIR filter. It is also the most common filter in DSP primarily due to its simplicity. But while it is technically a low pass FIR filter, it performs poorly in the frequency domain with very slow roll-off and dreadful stopband attenuation. On the other hand, it performs admirably in the time domain. The moving average filter is optimal in reducing random noise while retaining a sharp step response. Averaging N samples (the moving average window size) increases the SNR by the square root of N. For example, N=16 improves SNR by 4 (12dB). The filter delay is exactly (N−1)/2. Figure 1. Moving Average When data is pushed into a moving average, the element indices are shifted by one position to accommodate the incoming data. This logical shifting ensures that the newest data is stored in the first index (index 0), while the oldest data is pushed out of the buffer. The physical location of data does not actually change, only the indices. The data type, T, is a template parameter, allowing both floating point as well as integer computations. Integers are typically faster than floating point and are not prone to round-off errors. moving_average is a subclass of the moving_sum. #include template struct basic_moving_average : basic_moving_sum { using basic_moving_sum::basic_moving_sum; using value_type = T; T operator()(T s); T operator()() const; }; using moving_average = basic_moving_average; As a subclass of Moving Sum, moving_average inherits all the publicly accessible member functions, member variables, and types of its base class. In addition to valid expressions for Moving Sum, moving_average allows these expressions. T Element type, e.g. float. ma Object of type basic_moving_average. s Object of type ma_type::value_type. Expression Semantics basic_moving_average Instantiate a basic_moving_average type given T, the element type, e.g. float. moving_average Pre declared basic_moving_average type. Expression Semantics Return Type ma() Return the current average. ma_type::value_type ma(s) Add a new sample and calculate the current average. ma_type::value_type","title":"Moving Average","component":"q","version":"develop-0.99","name":"moving_average","url":"/q/develop-0.99/reference/misc/moving_average.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Type Construction","hash":"_type_construction","id":6},{"text":"Function Call","hash":"_function_call","id":7}]},"33":{"id":33,"text":"The moving sum involves adding a specified number of values in a sequence of data points —the moving sum window. The window moves through the data one point at a time as new samples arrive, and at each step, the sum of the data points within the window is calculated. Instead of calculating the sum of all elements in the window each time, an efficient scheme keeps a continuous total and subtracts the last element that will fall off the window when a new sample arrives. Figure 1. Moving Sum When data is pushed into a moving sum, the element indices are shifted by one position to accommodate the incoming data. This logical shifting ensures that the newest data is stored in the first index (index 0), while the oldest data is pushed out of the buffer. The physical location of data does not actually change, only the indices. basic_moving_sum is a template class representing moving sums with provision for specifying the element type, T. Integers are typically faster than floating point and are not prone to round-off errors. It is implemented internally using a ring buffer. Refer to ring_buffer. #include template struct basic_moving_sum { using value_type = T; basic_moving_sum(std::size_t max_size); basic_moving_sum(duration d, float sps); value_type operator()(value_type s); value_type operator()() const; value_type sum() const; std::size_t size() const; void resize(std::size_t size, bool update = false); void resize(duration d, float sps, bool update = false); void clear(); void fill(T val); }; using moving_sum = basic_moving_sum; T Element type, e.g. float. ms_type A basic_moving_sum type. ms, a, b Objects of type basic_moving_sum. s, val Objects of type ms_type::value_type. size Object of type std::size_t. d Object of type duration. sps Floating point value representing samples per second. a [, b, c, d] Required a, optional b, c, d. Expression Semantics basic_moving_sum Instantiate a basic_moving_sum type given T, the element type, e.g. float. moving_sum Pre declared basic_moving_sum type. Expression Semantics ms_type::value_type Get the underlying element type. Expression Semantics ms_type(size) Construct a basic_moving_sum with specified window size in samples. ms_type(d, sps) Construct a basic_moving_sum with window size specified by d and sps (duration and sample rate). ms_type(ms) Copy construct from ms_type ms. a = b Assign b to a. C++ brace initialization may also be used. Expression Semantics Return Type ms() Return the current sum. ms_type::value_type ms(s) Add a new sample and calculate the current sum. ms_type::value_type Expression Semantics Return Type ms.sum() Return the current sum. ms_type::value_type ms.size() Return the window size (in samples). std::size_t Expression Semantics ms.resize(size [, update]) Resize the moving sum window to the number of samples specified by the 'size' parameter. If update=true, the sum is recalculated. if update=false, the contents are cleared. Default: update=false. ms.resize(d, sps [, update]) Resize the moving sum with window size specified by d and sps (duration and sample rate). If update=true, the sum is recalculated. if update=false, the contents are cleared. Default: update=false. ms.clear() Clear the moving window to zero. ms.fill(val) Fill the moving window with val, and update the sum accordingly. basic_moving_sum can be resized as long as the new size does not exceed the original size (at construction time). When resizing with update=true, when downsizing, the oldest elements are subtracted from the sum. When upsizing, the older elements are added to the sum, otherwise, if update=false, the contents are cleared.","title":"Moving Sum","component":"q","version":"develop-0.99","name":"moving_sum","url":"/q/develop-0.99/reference/misc/moving_sum.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Type Construction","hash":"_type_construction","id":6},{"text":"Type Accessors","hash":"_type_accessors","id":7},{"text":"Constructors and Assignment","hash":"_constructors_and_assignment","id":8},{"text":"Function Call","hash":"_function_call","id":9},{"text":"Accessors","hash":"_accessors","id":10},{"text":"Mutators","hash":"_mutators","id":11}]},"34":{"id":34,"text":"A noise gate is an audio tool that reduces unwanted noise by muting or attenuating signals below specified thresholds. It is typically used to eliminate background noise or hum. The noise_gate class implements a Q-flavored noise gate processor following Q’s Dynamic processor design. Unlike typical noise gates, noise_gate has no parameters for attack and release and does not process audio waveform samples directly. Instead, it operates on the envelope of the audio signal. The objective is separation of concerns and the flexibility to use various envelope followers. There are two thresholds. On onsets, the noise_gate opens up if the signal envelope goes above the specified onset threshold. On note release, the noise_gate turns off if the signal goes below a specified release threshold. #include struct noise_gate { noise_gate(decibel onset_threshold, decibel release_threshold); noise_gate(decibel release_threshold); bool operator()(float env); bool operator()() const; void onset_threshold(decibel onset_threshold); void onset_threshold(float onset_threshold); void release_threshold(decibel release_threshold); void release_threshold(float release_threshold); float onset_threshold() const; float release_threshold() const; }; g, a, b Objects of type noise_gate. env Floating point value for the current envelope value. ot, rt Object of type decibel representing onset and release thresholds, respectively. Expression Semantics noise_gate(rt) Construct a noise_gate with specified release threshold, rt. noise_gate(ot, rt) Construct a noise_gate with specified onset threshold, ot and release threshold, rt. noise_gate(b) Copy construct a noise_gate from b. a = b Assign b to a. C++ brace initialization may also be used. Expression Semantics Return Type g() Get the current state. bool g(env) Process the input envelope env, compute and return the state. bool The noise_gate state is a boolean flag that is true if the noise_gate is open or false if the noise_gate is closed. Expression Semantics Return Type g.onset_threshold(ot) Set the noise_gate onset threshold. void g.release_threshold(rt) Set the noise_gate release threshold. void Expression Semantics Return Type g.onset_threshold() Get the noise_gate onset threshold. decibel g.release_threshold() Get the noise_gate release threshold. decibel","title":"Noise Gate","component":"q","version":"develop-0.99","name":"noise_gate","url":"/q/develop-0.99/reference/misc/noise_gate.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructors and Assignment","hash":"_constructors_and_assignment","id":6},{"text":"Function Call","hash":"_function_call","id":7},{"text":"Mutators","hash":"_mutators","id":8},{"text":"Accessors","hash":"_accessors","id":9}]},"35":{"id":35,"text":"Basic one pole low-pass filter serves as an important building block due to its utility in a vast number of applications including noise reduction, signal smoothing, and extracting relevant information from a signal. The 6dB/octave slope of the single pole filter is suitable for many non-critical use-cases and its simplicity makes it computationally efficient. #include struct one_pole_lowpass { one_pole_lowpass(frequency f, float sps); float operator()(float s); float operator()() const; one_pole_lowpass& operator=(bool y); void cutoff(frequency f, float sps); }; lp, a, b Objects of type one_pole_lowpass. f Object of type frequency representing the cutoff frequency. sps Floating point value representing samples per second. s Input sample. Expression Semantics one_pole_lowpass(f, sps) Construct a one_pole_lowpass with specified cutoff frequency, f, and samples per second sps. one_pole_lowpass(b) Copy construct a one_pole_lowpass from b. a = b Assign b to a. a = s Set the latest result to s. C++ brace initialization may also be used. Expression Semantics Return Type lp() Return the latest result. float lp(s) process the input sample, s. float Expression Semantics Return Type lp.cutoff(f, sps) Set the cutoff frequency given frequency f, and samples per second sps. void","title":"One Pole Low Pass","component":"q","version":"develop-0.99","name":"one_pole_lowpass","url":"/q/develop-0.99/reference/misc/one_pole_lowpass.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructor","hash":"_constructor","id":6},{"text":"Constructors and Assignment","hash":"_constructors_and_assignment","id":7},{"text":"Mutators","hash":"_mutators","id":8}]},"36":{"id":36,"text":"onset_gate is a specialization of noise_gate with provision for gating out slow attacks. The constructor parameters attack_width and sps specify the slope’s delta time. The envelope’s slope must exceed the required onset threshold. This prevents slow moving signals to pass as valid onsets. For example, given an attack width of 500 µs and an onset threshold of -30 dB, the difference in amplitude over a period of 500 µs must exceed -30 dB to pass as a valid onset. #include struct onset_gate : noise_gate { onset_gate( decibel onset_threshold , decibel release_threshold , duration attack_width , float sps ); using noise_gate::operator(); bool operator()(float env); }; As a subclass of noise_gate, onset_gate inherits all the publicly accessible member functions, member variables, and types of its base class. In addition to valid expressions for noise_gate, onset_gate allows these expressions. ot, rt Object of type decibel representing onset and release thresholds, respectively. aw Object of type duration representing attack width. sps Floating point value representing samples per second. Expression Semantics onset_gate(ot, rt, aw, sps) Construct an onset_gate with specified onset threshold, ot release threshold, rt, attack width, aw, and samples per second sps. C++ brace initialization may also be used.","title":"Onset Gate","component":"q","version":"develop-0.99","name":"onset_gate","url":"/q/develop-0.99/reference/misc/onset_gate.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructor","hash":"_constructor","id":6}]},"37":{"id":37,"text":"audio_device represents individual audio interfaces on the host platform. There are typically one or more audio devices available. Each device has a name, device identifier, and specific capabilities, including sample rate and the number of input and output channels supported. #include class audio_device { public: using device_list = std::vector; static device_list list(); static audio_device get(int device_id); int id() const; std::string name() const; std::size_t input_channels() const; std::size_t output_channels() const; double default_sample_rate() const; }; a, b Objects of type audio_device. ad Object of type audio_device. id A unique audio device ID integer. Expression Semantics audio_device(b) Copy construct from audio_device b. a = b Assign b to a. There are no public constructors. Instead, see list() and get(id) below. audio_device are lightweight handles that can be cheaply passed by value. Expression Semantics Return Type audio_device::list() Get the list of available audio devices. std::vector audio_device::get(id) Get the audio device with the given ID. audio_device To get an audio_device, first get list of currently available audio devices via audio_device::list(), then choose, or let the user choose, the one suitable for your needs. Alternatively, if you know the unique audio_device ID, you can use audio_device::get(id) to obtain a specific audio_device. Expression Semantics Return Type ad.id() Get the unique ID. int ad.name() Get the unique name. std::string ad.input_channels() Get the maximum number of input channels. std::size_t ad.output_channels() Get the maximum number of output channels. std::size_t ad.default_sample_rate() Get the default sample rate. double List all available audio devices: #include #include #include namespace q = cycfi::q; int main() { std::cout << \"Available Audio Devices: \" << std::endl; for (auto const& device : q::audio_device::list()) { std::cout << \"id: \" << device.id() << std:: endl << \"name: \\\"\" << device.name() << '\"' << std:: endl << \"number of input channels: \" << device.input_channels() << std:: endl << \"number of output channels: \" << device.output_channels() << std:: endl ; } return 0; }","title":"audio_device","component":"q","version":"develop-0.99","name":"audio_device","url":"/q/develop-0.99/reference/q_io/audio_device.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructors and Assignment","hash":"_constructors_and_assignment","id":6},{"text":"Instantiation","hash":"_instantiation","id":7},{"text":"Accessors","hash":"_accessors","id":8},{"text":"Example","hash":"_example","id":9}]},"38":{"id":38,"text":"audio_file is a set of small and lightweight classes for reading and writing WAV (Waveform Audio File Format) files. It offers a straightforward and intuitive interface for working with WAV audio data. This includes: wav_reader For reading WAV files. wav_writer For writing WAV files. #include wav_base is the base class with common functionalities for wav_reader and wav_writer. class wav_base { public: wav_base(); wav_base(wav_base const&) = delete; ~wav_base(); wav_base& operator=(wav_base const&) = delete; explicit operator bool() const; std::size_t sps() const; std::size_t num_channels() const; }; w Object of wav_base. Expression Semantics wav_base() Default construct a wav_base. wav_base is non-copyable. C++ brace initialization may also be used. Expression Semantics Return Type bool(w) Evaluates to true if wav_base is valid. Operations must only be performed on valid wav_base objects. bool w.sps() Get the WAV file’s sampling rate. float w.num_channels() Get the number of channels in the WAV file. std::size_t wav_reader is a class for reading WAV files with the typical read-only input mechanisms, such as incrementally reading a chunk of audio data from a position starting at the beginning of the file, and being able to move a certain position in the file. class wav_reader : public wav_base { public: wav_reader(std::string filepath); wav_reader(char const* filepath); std::uint64_t length() const; std::uint64_t position(); bool restart(); bool seek(std::uint64_t target); std::size_t read(float* data, std::uint32_t len); std::size_t read(concepts::IndexableContainer auto& buffer); }; The IndexableContainer concept is declared in Basic Concepts. wav_reader is derived from wav_base. In addition to valid expressions for wav_base, wav_reader allows these expressions. r Object of type wav_reader. f Object of type convertible to std::string or char const* representing a file path. d Pointer to a buffer of float elements with size len. s Size buffer of d. b Object of type that conforms to the IndexableContainer concept. p Position in the wav file (std::uint64_t). Expression Semantics wav_reader(f) Construct a wav_reader given a file path. C++ brace initialization may also be used. Expression Semantics Return Type r.restart() Reset the read position to the start. Returns false if r is not valid. bool r.seek(p) Set the read position to the p. Returns false if r is not valid. bool r.read(d, s) Read a chunk of data given a raw buffer, float*, d, with size s. Returns the actual size read. std::size_t. r.read(b) Read a chunk of data given a buffer, b. Returns the actual size read. std::size_t. Expression Semantics Return Type r.length() Get the length of the WAV file. std::uint64_t. r.position() Get the current read position. std::uint64_t. wav_writer is a class for writing WAV files with the typical write-only output mechanisms, such as incrementally writing a chunk of audio data from a position starting at the beginning of the file. wav_writer writes WAV files with one or more channels and 32-bit floating point samples. class wav_writer : public wav_base { public: wav_writer( std::string filename , std::uint32_t num_channels, float sps); wav_writer( char const* filename , std::uint32_t num_channels, float sps); std::size_t write(float const* data, std::uint32_t len); std::size_t write(concepts::IndexableContainer auto const& buffer); }; The IndexableContainer concept is declared in Basic Concepts. wav_writer is derived from wav_base. In addition to valid expressions for wav_base, wav_writer allows these expressions. w Object of type wav_writer. f Object of type convertible to std::string or char const* representing a file path. d Pointer to a buffer of float elements with size len. s Size buffer of d. b Object of type that conforms to the IndexableContainer concept. ch Integer value representing number of channels. sps Floating point value representing samples per second. Expression Semantics wav_writer(f, ch, sps) Construct a wav_writer given a file path, f, number of channels, ch, and sampling rate, sps. Expression Semantics Return Type w.write(d, s) Write a chunk of data given a raw buffer, float*, d, with size s. Returns the actual size written. std::size_t. w.write(b) Write a chunk of data given a buffer, b. Returns the actual size written. std::size_t.","title":"audio_file","component":"q","version":"develop-0.99","name":"audio_file","url":"/q/develop-0.99/reference/q_io/audio_file.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"wav_base","hash":"_wav_base","id":3},{"text":"Declaration","hash":"_declaration","id":4},{"text":"Expressions","hash":"_expressions","id":5},{"text":"Notation","hash":"_notation","id":6},{"text":"Constructors and Assignment","hash":"_constructors_and_assignment","id":7},{"text":"Accessors","hash":"_accessors","id":8},{"text":"wav_reader","hash":"_wav_reader","id":9},{"text":"Declaration","hash":"_declaration_2","id":10},{"text":"Expressions","hash":"_expressions_2","id":11},{"text":"Notation","hash":"_notation_2","id":12},{"text":"Constructors and Assignment","hash":"_constructors_and_assignment_2","id":13},{"text":"Mutators","hash":"_mutators","id":14},{"text":"Accessors","hash":"_accessors_2","id":15},{"text":"wav_writer","hash":"_wav_writer","id":16},{"text":"Declaration","hash":"_declaration_3","id":17},{"text":"Expressions","hash":"_expressions_3","id":18},{"text":"Notation","hash":"_notation_3","id":19},{"text":"Constructors and Assignment","hash":"_constructors_and_assignment_3","id":20},{"text":"Mutators","hash":"_mutators_2","id":21}]},"39":{"id":39,"text":"audio_stream is a subclass of audio_stream_base. It is responsible for setting up multichannel input and output buffers and presenting them to the user’s processing function, which is called at regular intervals at 1/Nth of the sampling frequency, where N is the size of the buffer. #include class audio_stream : public audio_stream_base { public: audio_stream( std::size_t input_channels , std::size_t output_channels , double sps = -1 , int frames = -1 ); audio_stream( audio_device const& device , std::size_t input_channels , std::size_t output_channels , double sps = -1 , int frames = -1 ); virtual ~audio_stream(); void start(); void stop(); bool is_valid() const; duration time() const; double cpu_load() const; char const* error() const; duration input_latency() const; duration output_latency() const; double sampling_rate() const; std::size_t input_channels() const; std::size_t output_channels() const; }; As a subclass of audio_stream_base, audio_stream inherits all the publicly accessible member functions, member variables, and types of its base class. In addition to valid expressions for audio_stream_base, audio_stream allows these expressions. as Object of type audio_stream. ad Object of type audio_device. ic Number of input channels. oc Number of output channels. sps Floating point value for the desired sample rate. A value of -1, the default, indicates a request to use the device’s default sampling rate. fr Number of frames --the buffer size per channel. A value of -1, the default, indicates a request for the optimal (and possibly varying) number of frames. Expression Semantics audio_stream(ic, oc, sps, fr) Construct an audio_stream using the default audio_device, given the number of input and output channels, ic and oc, optional sample rate, sps, and optional number of frames, fr. audio_stream(ad, ic, oc, sps, fr) Construct an audio_stream using the the audio_device, ad, given the number of input and output channels, ic and oc, optional sample rate, sps, and optional number of frames, fr. Take note that audio_stream_base is non-copyable, and therefore audio_stream is also non-copyable. Expression Semantics Return Type as.is_valid() Check if the audio_stream is valid. Do this before any operation on the audio_stream. Any operation on an invalid stream is undefined behavior. bool as.time() Get stream’s current time in seconds. The time values are monotonically increasing with an unspecified origin. Starting and stopping the stream does not affect the passage of time. duration as.cpu_load() Get stream’s CPU load: A floating point value, typically between 0.0 and 1.0, where 1.0 indicates that the stream is consuming the maximum number of CPU cycles possible to maintain real-time operation. double as.error() On as.is_valid() == false, this function returns a human readable error message stating the reason why an audio_stream cannot be opened. char const* as.input_latency() Get the input latency. duration as.output_latency() Get the output latency. duration as.input_channels() Get the number of input channels. std::size_t as.output_channels() Get the number of output channels. std::size_t as.default_sample_rate() Get the sampling rate. double Expression Semantics as.start() Start the audio_stream. as.stop() Stop the audio_stream. Make a delay processor with 1 input channel (mono) and two output channels (stereo). Route the mono input to both the left and right output channels. struct my_processor : q::audio_stream (1) { my_processor() : audio_stream(1, 2) (2) {} void process(in_channels const& in, out_channels const& out) (3) { auto left = out[0]; auto right = out[1]; auto mono_in = in[0]; for (auto frame : out.frames) { // Get the next input sample auto s = mono_in[frame]; // Output left[frame] = s; right[frame] = s; } } }; 1 Here we declare my_processor. A user-defined class derived from audio_stream. 2 Construct the base audio_stream with 1 input channel (mono) and two output channels (stereo) using the default audio device. 3 Implement the process member function. See Audio Stream Client Interface for more info.","title":"audio_stream","component":"q","version":"develop-0.99","name":"audio_stream","url":"/q/develop-0.99/reference/q_io/audio_stream.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructors","hash":"_constructors","id":6},{"text":"Accessors","hash":"_accessors","id":7},{"text":"Mutators","hash":"_mutators","id":8},{"text":"Example","hash":"_example","id":9}]},"40":{"id":40,"text":"Work in progress","title":"midi_device","component":"q","version":"develop-0.99","name":"midi_device","url":"/q/develop-0.99/reference/q_io/midi_device.html","titles":[]},"41":{"id":41,"text":"Work in progress","title":"midi_stream","component":"q","version":"develop-0.99","name":"midi_stream","url":"/q/develop-0.99/reference/q_io/midi_stream.html","titles":[]},"42":{"id":42,"text":"Read Multi Buffer first for prerequisite information. audio_stream_base is the abstract base class and highest-level interface for audio processing. It is responsible for setting up multichannel input and output buffers and presenting them to the user’s processing function, which is called at regular intervals at 1/Nth of the sampling frequency, where N is the size of the buffer. #include class audio_stream_base : non_copyable { public: using in_channels = multi_buffer; using out_channels = multi_buffer; audio_stream_base() {} virtual ~audio_stream_base() = default; virtual void process(in_channels const& in) {} virtual void process(out_channels const& out) {} virtual void process(in_channels const& in, out_channels const& out) {} }; The audio_stream_base is an abstract base class not meant to be directly instantiated. Audio I/O systems are responsible for providing concrete subclasses of audio_stream_base for the client’s use. The client writes a class derived from one of these, and overrides one of the three process member functions depending on the I/O configuration and purpose. process(in_channels const& in); Audio input only. Examples: VU Meter, Spectrum Analyzer. process(out_channels const& out); Audio output only. Example: Synthesizers. process(in_channels const& in, out_channels const& out); Audio input and output. Example: Effects processors.","title":"Audio Stream","component":"q","version":"develop-0.99","name":"audio_stream","url":"/q/develop-0.99/reference/support/audio_stream.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Client Interface","hash":"_client_interface","id":4}]},"43":{"id":43,"text":"Here are the basic C++ concepts used by the Q DSP library. #include The Arithmetic concept is a model of the std::integral OR the std::floating_point concept. namespace cycfi::q::concepts { template concept Arithmetic = std::integral || std::floating_point; } IndexableContainer is a concept that represents an indexable data type. Essentially, it must be indexable using the indexing subscript operator [] with a subscript convertable from std::size_t, and has a size() member function that returns the size of the Container or View being indexed. namespace cycfi::q::concepts { template concept IndexableContainer = requires(T& x, std::size_t i) { { x[i] } -> std::convertible_to; { x.size() } -> std::convertible_to; }; } IndexableContainer types allow standard for-loop iteration: for (auto i = 0; i != c.size() ++i) { c[i]; } Where c is an instance of IndexableContainer. RandomAccessIteratable is a concept that represents a random-access iteratable data type, which has begin() and end() member functions, and the return type of both functions is an iterator that conforms to the std::random_access_iterator concept. namespace cycfi::q::concepts { template concept RandomAccessIteratable = std::random_access_iterator && requires(T& c) { { c.begin() } -> std::same_as; { c.end() } -> std::same_as; }; } RandomAccessIteratable allows C++ range-based for loop syntax: for (auto e : c) { /**...**/ } Where c is an instance of RandomAccessIteratable and e is an element of c.","title":"Basic Concepts","component":"q","version":"develop-0.99","name":"basic_concepts","url":"/q/develop-0.99/reference/support/basic_concepts.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Arithmetic","hash":"_arithmetic","id":3},{"text":"Declaration","hash":"_declaration","id":4},{"text":"IndexableContainer","hash":"_indexablecontainer","id":5},{"text":"Declaration","hash":"_declaration_2","id":6},{"text":"RandomAccessIteratable","hash":"_randomaccessiteratable","id":7},{"text":"Declaration","hash":"_declaration_3","id":8}]},"44":{"id":44,"text":"MIDI is one way to control DSP parameters in a more meaningful, and musical way. Here, we talk about MIDI as a standardized messaging protocol. MIDI messages include note-on and note-off messages, control change messages, program change messages, and pitch bend messages, as well as tempo, time signature, and other performance data. #include namespace cycfi::q::midi_1_0 { /**...**/ } Currently, the Q DSP library supports MIDI 1.0, implemented in namespace midi_1_0. The MIDI 1.0 message is basically an array of std::uint8_t with sizes 1 to 3, encapsulated in a struct: struct message_base {}; // Base class for all messages template struct message : message_base { static constexpr int const size = size_; std::uint8_t data[size]; }; struct message1 : message { message1() = default; constexpr message1(raw_message msg); }; struct message2 : message { message2() = default; constexpr message2(raw_message msg); }; struct message3 : message { message3() = default; constexpr message3(raw_message msg); }; Generic MIDI messages are constructed from raw_message, which is essentially a std::uint32_t encapsulated in a struct that holds the 24-bits MIDI 1.0 message, encoded as little-endian: Figure 1. Raw MIDI Message struct raw_message { std::uint32_t data; }; The status byte indicates the type of MIDI message and includes both a status nibble (upper 4 bits) and a 16-channel number nibble (lower 4 bits). Figure 2. MIDI Status Byte Here is the MIDI status enumeration: namespace status { enum { note_off = 0x80, note_on = 0x90, poly_aftertouch = 0xA0, control_change = 0xB0, program_change = 0xC0, channel_aftertouch = 0xD0, pitch_bend = 0xE0, sysex = 0xF0, song_position = 0xF2, song_select = 0xF3, tune_request = 0xF6, sysex_end = 0xF7, timing_tick = 0xF8, start = 0xFA, continue_ = 0xFB, stop = 0xFC, active_sensing = 0xFE, reset = 0xFF }; } Specific MIDI messages are subclasses of the generic MIDI messages above. struct note_off : message3 { using message3::message3; constexpr note_off(std::uint8_t channel, std::uint8_t key, std::uint8_t velocity); constexpr std::uint8_t channel() const; constexpr std::uint8_t key() const; constexpr std::uint8_t velocity() const; }; struct note_on : message3 { using message3::message3; constexpr note_on(std::uint8_t channel, std::uint8_t key, std::uint8_t velocity); constexpr std::uint8_t channel() const; constexpr std::uint8_t key() const; constexpr std::uint8_t velocity() const; }; struct poly_aftertouch : message3 { using message3::message3; constexpr poly_aftertouch( std::uint8_t channel, std::uint8_t key, std::uint8_t pressure); constexpr std::uint8_t channel() const; constexpr std::uint8_t key() const { return data[1]; } constexpr std::uint8_t pressure() const; }; namespace cc { enum controller { bank_select = 0x00, modulation = 0x01, breath = 0x02, foot = 0x04, portamento_time = 0x05, data_entry = 0x06, channel_volume = 0x07, balance = 0x08, pan = 0x0A, expression = 0x0B, effect_1 = 0x0C, effect_2 = 0x0D, general_1 = 0x10, general_2 = 0x11, general_3 = 0x12, general_4 = 0x13, bank_select_lsb = 0x20, modulation_lsb = 0x21, breath_lsb = 0x22, foot_lsb = 0x24, portamento_time_lsb = 0x25, data_entry_lsb = 0x26, channel_volume_lsb = 0x27, balance_lsb = 0x28, pan_lsb = 0x2A, expression_lsb = 0x2B, effect_1_lsb = 0x2C, effect_2_lsb = 0x2D, general_1_lsb = 0x30, general_2_lsb = 0x31, general_3_lsb = 0x32, general_4_lsb = 0x33, sustain = 0x40, portamento = 0x41, sostenuto = 0x42, soft_pedal = 0x43, legato = 0x44, hold_2 = 0x45, sound_controller_1 = 0x46, // default: sound variation sound_controller_2 = 0x47, // default: timbre / harmonic content sound_controller_3 = 0x48, // default: release time sound_controller_4 = 0x49, // default: attack time sound_controller_5 = 0x4A, // default: brightness sound_controller_6 = 0x4B, // no default sound_controller_7 = 0x4C, // no default sound_controller_8 = 0x4D, // no default sound_controller_9 = 0x4E, // no default sound_controller_10 = 0x4F, // no default general_5 = 0x50, general_6 = 0x51, general_7 = 0x52, general_8 = 0x53, portamento_control = 0x54, effects_1_depth = 0x5B, // previously reverb send effects_2_depth = 0x5C, // previously tremolo depth effects_3_depth = 0x5D, // previously chorus depth effects_4_depth = 0x5E, // previously celeste (detune) depth effects_5_depth = 0x5F, // previously phaser effect depth data_inc = 0x60, // increment data value (+1) data_dec = 0x61, // decrement data value (-1) nonrpn_lsb = 0x62, nonrpn_msb = 0x63, rpn_lsb = 0x64, rpn_msb = 0x65, all_sounds_off = 0x78, reset = 0x79, local = 0x7A, all_notes_off = 0x7B, omni_off = 0x7C, omni_on = 0x7D, mono = 0x7E, poly = 0x7F }; } struct control_change : message3 { using message3::message3; constexpr control_change( std::uint8_t channel, cc::controller ctrl, std::uint8_t value); constexpr std::uint8_t channel() const; constexpr cc::controller controller() const; constexpr std::uint8_t value() const; }; struct program_change : message2 { using message2::message2; constexpr program_change(std::uint8_t channel, std::uint8_t preset); constexpr std::uint8_t channel() const; constexpr std::uint8_t preset() const; }; struct channel_aftertouch : message2 { using message2::message2; constexpr channel_aftertouch(std::uint8_t channel, std::uint8_t pressure); constexpr std::uint8_t channel() const; constexpr std::uint8_t pressure() const; }; struct pitch_bend : message3 { using message3::message3; constexpr pitch_bend(std::uint8_t channel, std::uint16_t value); constexpr pitch_bend(std::uint8_t channel, std::uint16_t lsb, std::uint8_t msb); constexpr std::uint8_t channel() const; constexpr std::uint16_t value() const; }; struct song_position : message3 { using message3::message3; constexpr song_position(std::uint16_t position); constexpr song_position(std::uint8_t lsb, std::uint8_t msb); constexpr std::uint16_t position() const; }; struct song_select : message2 { using message2::message2; constexpr song_select(std::uint8_t song_number); constexpr std::uint16_t song_number() const; }; struct tune_request : message1 { using message1::message1; constexpr tune_request(); }; struct timing_tick : message1 { using message1::message1; constexpr timing_tick(); }; struct start : message1 { using message1::message1; constexpr start(); }; struct continue_ : message1 { using message1::message1; constexpr continue_(); }; struct stop : message1 { using message1::message1; constexpr stop(); }; struct active_sensing : message1 { using message1::message1; constexpr active_sensing(); }; struct reset : message1 { using message1::message1; constexpr reset(); }; The note_name utility function can be used to convert a MIDI note number to a string representing the key. constexpr char const* note_name(std::uint8_t key); Example: std::cout << note_name(60) << std::endl; // Prints \"C4\" Conversely, the note_number utility function can be used to convert a string representing the key to a MIDI note number. int note_number(std::string_view note) The syntax is as follows: A letter a-g or A-G Optionally followed by # or b Followed by a number that ranges from -1 to 9 The range is from C-1 to G9. Example: std::cout << note_number(\"C4\") << std::endl; // Prints 60 The function returns -1 when given invalid input.","title":"MIDI Messages","component":"q","version":"develop-0.99","name":"midi_messages","url":"/q/develop-0.99/reference/support/midi_messages.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Namespace","hash":"_namespace","id":3},{"text":"Generic MIDI Messages","hash":"_generic_midi_messages","id":4},{"text":"Raw MIDI Messages","hash":"_raw_midi_messages","id":5},{"text":"MIDI Status","hash":"_midi_status","id":6},{"text":"Specific MIDI Messages","hash":"_specific_midi_messages","id":7},{"text":"note_off","hash":"_note_off","id":8},{"text":"note_on","hash":"_note_on","id":9},{"text":"poly_aftertouch","hash":"_poly_aftertouch","id":10},{"text":"control_change","hash":"_control_change","id":11},{"text":"program_change","hash":"_program_change","id":12},{"text":"channel_aftertouch","hash":"_channel_aftertouch","id":13},{"text":"pitch_bend","hash":"_pitch_bend","id":14},{"text":"song_position","hash":"_song_position","id":15},{"text":"song_select","hash":"_song_select","id":16},{"text":"tune_request","hash":"_tune_request","id":17},{"text":"timing_tick","hash":"_timing_tick","id":18},{"text":"start","hash":"_start","id":19},{"text":"continue_","hash":"_continue","id":20},{"text":"stop","hash":"_stop","id":21},{"text":"active_sensing","hash":"_active_sensing","id":22},{"text":"reset","hash":"_reset","id":23},{"text":"Note Name","hash":"_note_name","id":24},{"text":"Note Number","hash":"_note_number","id":25}]},"45":{"id":45,"text":"Read MIDI Messages first for prerequisite information. The MIDI processor is a user-defined construct that follows a specific C++ concept for receiving and interpreting MIDI messages. The MIDI processor acts as an intermediary between MIDI devices and the application. Its purpose is to receive incoming MIDI messages, analyze their content, and extract relevant information. This may include extracting note data, control change values, program change commands, or any other MIDI message content that is of interest to the user. #include namespace cycfi::q::midi_1_0 { /**...**/ } Currently, the Q DSP library supports MIDI 1.0, implemented in namespace midi_1_0. namespace cycfi::q::midi_1_0::concepts { template concept Processor = requires(T&& proc, message_base const& msg, std::size_t time) { proc(msg, time); }; } Processor is a concept that represents a MIDI 1.0 processor. It is placed inside namespace midi_1_0 to distinguish it from future MIDI processors. Essentially, the C++ concept states that: Processor has a function call operator that accepts a MIDI 1.0 message and a time stamp. The MIDI 1.0 message, msg, is derived from message_base. The time stamp is represented as a millisecond clock with an undefined arbitrary start time. proc Instance of a type that conforms to Processor. msg Instance of a type that conforms to Message. time A std::size_t time stamp. Expression Semantics Return Type proc(msg, time) Process the MIDI message, msg at time stamp time. void processor is a basic class that conforms to the Processor concept, but does nothing by default. struct processor { void operator()(message_base const& msg, std::size_t time) {} }; This utility class provides the default no-op handling. It is intended to be derived from. Thus, the derived class can overload specific function call operators for messages it is interested with. Example: namespace midi = cycfi::q::midi_1_0; struct my_midi_processor : midi::processor { using midi::processor::operator(); void operator()(midi::note_on msg, std::size_t time); void operator()(midi::note_off msg, std::size_t time); }; In this example, my_midi_processor is interested with, and processes only note_on and note_off messages. The dispatch takes in a raw MIDI 1.0 message (raw_message), a time stamp, and a Processor. It converts the raw MIDI message to a specific MIDI message, and dispatches the message to the processor, along with the time stamp. template requires concepts::Processor void dispatch(raw_message msg, std::size_t time, P&& proc); This function is the basic low-level hook for dispatching raw MIDI messages obtained by an I/O system from MIDI devices.","title":"MIDI Processor","component":"q","version":"develop-0.99","name":"midi_processor","url":"/q/develop-0.99/reference/support/midi_processor.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Namespace","hash":"_namespace","id":3},{"text":"Declaration","hash":"_declaration","id":4},{"text":"Expressions","hash":"_expressions","id":5},{"text":"Notation","hash":"_notation","id":6},{"text":"Function Call","hash":"_function_call","id":7},{"text":"processor","hash":"_processor","id":8},{"text":"Dispatch","hash":"_dispatch","id":9}]},"46":{"id":46,"text":"Read Basic Concepts first for prerequisite information. Multi-buffer presents a multi-channel buffer arranged in a non-interleaved format where each channel has its own dedicated buffer, and the samples within each buffer are arranged sequentially in contiguous memory locations. The non-interleaved format is ideal for digital signal processing where it is necessary to perform operations on individual channels separately, often in parallel for maximum efficiency. As an example, the figure below shows the memory layout of a 4-channel non-interleaved format. Figure 1. 4 Channel Non-Interleaved Format A Multi-buffer can be conceptualized as a two-dimensional array. The first dimension in this representation corresponds to the samples (x-dimension), while the second dimension represents the channels (y-dimension). Essentially, you can access each individual sample using the two indices ch and i, where ch is the channel index and i is the sample index. mb[ch][i] Each dimension has a size which can be obtained this way: mb.size() // The number of channels mb[ch].size() // The number of frames per channel That way, you can iterate through the channels and samples this way: for (auto ch = 0; ch != mb.size() ++ch) { for (auto i = 0; i != mb[ch].size() ++i) { auto s = mb[ch][i]; // Do something with the sample `s` } } Alternately, you can iterate through the channels and samples in a channel, using C++ range-based for loop syntax, as follows: for (auto ch : mb.channels) { for (auto i : mb.frames) { auto s = mb[ch][i]; // Do something with the sample `s` } } Take note that this syntax is unorthodox in the way it uses C++ range-based for loop syntax. Instead of accessing the channels and samples directly, mb.channels and mb.frames both return a range of indices (corresponding to 0..N, where N is number of channels, for mb.channels or samples, for mb.frames). The design rationale is to always allow random access to all channels and all samples for each channel. For example, you might want to access both the left and right channels of a stereo (2-channel) multi-buffer and mix them: auto left = mb[0]; auto right = mb[1]; for (auto i : mb.frames) { auto mono = right[i] + left[i]; // Add the left and right channels // Do something with `mono` } mb[ch] returns a view of the channel. It does not copy the whole buffer. This \"view\" is lightweight and can be held and passed by value without worrying about performance. The previous example can extend to an N channel mixer this way: for (auto i : mb.frames) { auto sum = 0.0f; for (auto ch : mb.channels) sum += mb[ch][i]; // Do something with `sum` } If you simply need sequential access to the samples in a channel, you can do it this way: for (auto ch : mb.channels) { for (auto s : mb[ch]) { // Do something with the sample `s` } } #include template class multi_buffer { public: using sample_type = T; using buffer_view = iterator_range; using frames_view = iterator_range; using channels_view = iterator_range; // Unspecified constructor buffer_view operator[](std::size_t channel) const; std::size_t size() const; frames_view frames; channels_view channels; }; multi_buffer is a template class that implements the multi-buffer. The template paratemeter, T, is the sample type which is a model of the std::floating_point concept. iterator_range is a template class that holds two random access iterators. It is a model of IndexableContainer, and RandomAccessIteratable. The template parameter, I, is the iterator type. index_iterator is a model of the std::random_access_iterator concept. The value_type of the index_iterator is simply a std::size_t. multi_buffer is a model of IndexableContainer with buffer_view elements: an iterator-range containing pointers to the sample type (T*). multi_buffer has member variables frames and channels that are iterator-ranges containing index-iterators. T The sample type (typically float). MB multi_buffer type. mb Instance of multi_buffer. i Object of type std::size_t, used for indexing. Expression Semantics Type MB::sample_type Get the sample type. `T MB::buffer_view Get the iterator type. iterator_range MB::channel_view Get the channel view type. iterator_range MB::frames_view Get the frames view type. iterator_range The multi_buffer constructor is unspecified. The multi-buffer is not meant to be instantiated by the user. Expression Semantics Return Type mb[i] Index operator. MB::buffer_view mb.size() Get the number of channels. std::size_t mb.frames Get the frames view. MB::frames_view mb.channels Get the channels view. MB::channels_view","title":"Multi Buffer","component":"q","version":"develop-0.99","name":"multi_buffer","url":"/q/develop-0.99/reference/support/multi_buffer.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Usage","hash":"_usage","id":2},{"text":"Include","hash":"_include","id":3},{"text":"Declaration","hash":"_declaration","id":4},{"text":"Expressions","hash":"_expressions","id":5},{"text":"Notation","hash":"_notation","id":6},{"text":"Type Definitions","hash":"_type_definitions","id":7},{"text":"Constructor","hash":"_constructor","id":8},{"text":"Indexing","hash":"_indexing","id":9}]},"47":{"id":47,"text":"The Blackman taper is a type of window function that gradually tapers the amplitude of a signal towards the window’s edges. It is often used in digital signal processing to smooth a signal (smoothing discontinuities at the edges of sampled signals) or to reduce spectral leakage. The Blackman window has a wider main lobe and lower level side lobes than other windows. It is named after Robert Blackman, who first described it in 1958. The formula for the Blackman window is: w(n) = 0.42 - 0.5 * cos(2pi*n/(N-1)) + 0.08 * cos(4pi*n/(N-1)) Aside from its common use as a window function, the Q DSP library also utilizes the blackman window generator for modulating the audio signal and generating complex envelopes. #include struct blackman_gen { blackman_gen(duration width, float sps); float operator()(); void config(duration width, float sps; void reset(); void midpoint(); }; blackman_gen is a model of Generator. In addition to valid expressions for Generator, blackman_gen allows these expressions. g Object of type blackman_gen. w Object of type duration. sps Floating point value representing samples per second. Expression Semantics blackman_gen(w, sps) Construct blackman_gen given window width, w, and samples per second, sps. C++ brace initialization may also be used. Expression Semantics g.config(w, sps) Set the window width, w, with samples per second, sps. g.reset() Set the current phase to the start of the window. g.midpoint() Set the current phase to the middle of the window. Two subclasses of blackman_gen are specialized for ramp generation: The Blackman upward ramp generator generates a rising curve with the shape of the first half of a Blackman window taper. The Blackman downward ramp generator generates a falling curve with the shape of the second half of a Blackman window taper. struct blackman_upward_ramp_gen : blackman_gen { blackman_upward_ramp_gen(duration width, float sps); void config(duration width, float sps); }; struct blackman_downward_ramp_gen : blackman_gen { blackman_downward_ramp_gen(duration width, float sps); void reset(); void config(duration width, float sps); }; blackman_upward_ramp_gen and struct blackman_downward_ramp_gen : blackman_gen ` are a models of `Ramp and implements all valid expressions of Ramp.","title":"Blackman Window Generator","component":"q","version":"develop-0.99","name":"blackman_gen","url":"/q/develop-0.99/reference/synth/blackman_gen.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructor","hash":"_constructor","id":6},{"text":"Mutators","hash":"_mutators","id":7},{"text":"Ramp Generators","hash":"_ramp_generators","id":8},{"text":"Declaration","hash":"_declaration_2","id":9},{"text":"Expressions","hash":"_expressions_2","id":10}]},"48":{"id":48,"text":"envelope_gen is a highly configurable multi-segment envelope generator. Each segment is a Ramp that can be configured to have any conceivable shape. A few ramp shapes, including exponential, linear, blackman, and hann are provided. The user may add their own Ramp generator following a well defined c++ concept specification. The plot above is an example of a 5-segment envelope_gen output. The ramp segments S1 to S5 are as follows: blackman_upward_ramp_gen (see blackman_gen) hold_line_gen (see linear_gen) blackman_downward_ramp_gen (see blackman_gen) lin_downward_ramp_gen (see linear_gen) exp_downward_ramp_gen (see exponential_gen) The phases and transitions of the envelope gen are depicted in the following stylized state diagram. There are four phases of interest: Idle phase: The output sits at zero while waiting for the next attack signal Ⓐ. Attack phase: Initiated when the attack signal Ⓐ is received, e.g. when a key is pressed. Intermediate phase: Starts after the attack phase and ends before the release phase. Release phase: Initiated when the release signal Ⓡ is received, e.g when the key is released. The envelope_gen waits for an attack signal Ⓐ while in the idle phase. As soon as an attack signal Ⓐ is received, the state immediately transitions to the attack phase. The output ramps up from 0.0 to the specified attack level, over the specified attack duration. The envelope gen is not retriggerable. Attack signals Ⓐ are only permitted during the idle phase. Any attack signal Ⓐ received outside of the idle phase is disregarded. Use one envelope_gen instance per note. This is most natural with polyphonic voicing, but can also apply to monophonic voicing. For monophonic voicing, on an incoming attack signal Ⓐ, active instances are sent release signals Ⓡ, a new instance is created, and its attack phase is initiated. The output will then be the maximum of all active instances. After the attack phase, anything that comes in between the attack phase and release phase are intermmediate phases that are sequenced by the envelope_gen, one after the other. Intermmediate phases may include the decay phase, the hold phase and the sustain phase. For each intermediate phase, the output ramps up or down from the previous level to the phase’s level over the phase’s duration. Upon receiving the release signal Ⓡ, the envelope_gen immediately transitions to the release phase. This may occur at any point during the attack or intermediate phases. The current phase may be cut short when this happens, and without delay, the output ramps down to 0.0 over the specified release duration. Typically, the last intermediate segment is configured with a very long duration (e.g. for sustain), and normally a release signal Ⓡ will occur long before the last intermediate segment ends. If that is not the case, like for example if the sustain segment is a relatively short linear down ramp, it is possible to transition to the release phase before a release signal Ⓡ is received. After completion of the release phase, the envelope_gen returns back to the idle state. Each envelope segment has parameters for width (the duration of the segment), level (the end level of the segment), and of course the Ramp type. A make_envelope_segment free function, templated on the ramp type, is provided for making segments. #include struct envelope_segment { envelope_segment(envelope_segment const&); envelope_segment& operator=(envelope_segment const&); void level(float level); void config(duration width, float sps); void config(float level, duration width, float sps); /*** Unspecified member functions ***/ }; template inline envelope_segment make_envelope_segment(duration width, float level, float sps); s, a, b Objects of type envelope_segment. w Object of type duration. l Floating point value representing level (0.0 to 1.0). sps Floating point value representing samples per second. T Ramp type. Expression Semantics envelope_segment(s) Copy construct from s. a = b Assign b to a. Expression Semantics Return Type make_envelope_segment( w, l, sps) Make an envelope segment with specified Ramp type, T, level, l, width, w, and samples per second, sps. envelope_segment // Make a 10 ms exponential segment with a peak level of 1.0. auto s = make_envelope_segment(10_ms, 1.0f, sps); Expression Semantics s.level(l) Set the segment level to l. s.config(w, sps) Set the segment width, w, with samples per second, sps. s.config(l, w, sps) Set the segment level, l, width, w, with samples per second, sps. The envelope generator is basically a container (std::vector) of envelope segments. Multiple segments with distinct shape characteristics may be used to construct ADSR envelopes, AD envelopes, etc. #include struct envelope_gen : std::vector { using base_type = std::vector; template envelope_gen(T&& ...arg); void attack(); void release(); float operator()(); void reset(); float current() const; bool in_idle_phase() const; bool in_attack_phase() const; bool in_release_phase() const; std::size_t index() const; }; As a subclass of std::vector, you can use all the facilities of std::vector to compose a multi-segment envelope generator of varying complexity. Take note of the single forwarding constructor that accepts variable arguments. Its purpose is to reset envelope_gen automatically after construction. All arguments are forwarded to the base class. envelope_gen is a subclass of std::vector and inherits all the publicly accessible member functions, member variables, and types of its base class. In addition to valid expressions for std::vector, envelope_gen allows these expressions. g Object of type envelope_gen. Expression Semantics Return Type g() Generate the next value. float Expression Semantics g.attack() Start the attack phase. g.release() Start the release phase. g.reset() Reset and move to the idle phase. Call envelope_gen::reset() whenever the segments change, such as when adding or removing segments from the segments container, to reset envelope_gen to the idle state. Expression Semantics Return Type g.current() Get the current level. float g.in_idle_phase() Return true if we are in the idle phase. bool g.in_attack_phase() Return true if we are in the attack phase. bool g.in_release_phase() Return true if we are in the release phase. bool g.index() Get the current index — the index of the latest active segment. std::size_t adsr_envelope_gen is a subclass of envelope_gen that offers specializations for generating envelopes of the ADSR type. This is a basic subclass that serves as a practical and prototypical envelope generator example. We will provide the full source code below, as an example of how to write an envelope generator. #include struct adsr_envelope_gen : envelope_gen { struct config { // Default settings duration attack_rate = 30_ms; duration decay_rate = 70_ms; decibel sustain_level = -6_dB; duration sustain_rate = 50_s; duration release_rate = 100_ms; }; adsr_envelope_gen(config const& config, float sps); void attack_rate(duration rate, float sps); void decay_rate(duration rate, float sps); void sustain_level(decibel level); void sustain_rate(duration rate, float sps); void release_rate(duration rate, float sps); }; inline adsr_envelope_gen::adsr_envelope_gen(config const& config_, float sps) : envelope_gen{ make_envelope_segment( config_.attack_rate, 1.0f, sps) // Attack (1) , make_envelope_segment( config_.decay_rate, lin_float(config_.sustain_level), sps) // Decay (2) , make_envelope_segment( config_.sustain_rate, 0.0f, sps) // Sustain (3) , make_envelope_segment( config_.release_rate, 0.0f, sps) // Release (4) } { } The config struct contains the constructor specifications for the ADSR paramneters, including attack_rate, decay_rate, sustain_level, sustain_rate, and release_rate. The user may specify these parameters like in this example: // Configure the adsr_envelope_gen auto env_cfg = q::adsr_envelope_gen::config { 300_ms // attack rate , 1_s // decay rate , -12_dB // sustain level , 5_s // sustain rate , 1_s // release rate }; // Instantiate an adsr_envelope_gen auto env_gen = q::adsr_envelope_gen{env_cfg, sps}; These parameters are used to construct the 4 segments comprising an ADSR envelope generator. Each of the segments are created using make_envelope_segment, passing in the Ramp type and the level, width, and samples per second. By defautl, the adsr_envelope_gen makes 4 segments with types: 1 exp_upward_ramp_gen for the attack segment, with peak level of 1.0. 2 exp_downward_ramp_gen for the decay segment, with level set to the sustain level. 3 lin_downward_ramp_gen for the sustain segment. This is a 5-second decaying linear ramp. 4 exp_downward_ramp_gen for the release segment, with level of 0.0. The remaining items are self-explanatory. These member functions permit the user to modify the five ADSR parameters following construction. The envelope segments are stored at indices 0 to 3 in the vector. // Set the attack rate inline void adsr_envelope_gen::attack_rate(duration rate, float sps) { (*this)[0].config(rate, sps); } // Set the decay rate inline void adsr_envelope_gen::decay_rate(duration rate, float sps) { (*this)[1].config(rate, sps); } // Set the sustain level inline void adsr_envelope_gen::sustain_level(decibel level) { (*this)[2].level(lin_float(level)); } // Set the sustain rate inline void adsr_envelope_gen::sustain_rate(duration rate, float sps) { (*this)[2].config(rate, sps); } // Set the release rate inline void adsr_envelope_gen::release_rate(duration rate, float sps) { (*this)[3].config(rate, sps); }","title":"Envelope Generator","component":"q","version":"develop-0.99","name":"envelope_gen","url":"/q/develop-0.99/reference/synth/envelope_gen.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Phases and Transitions","hash":"_phases_and_transitions","id":2},{"text":"Envelope Segment","hash":"_envelope_segment","id":3},{"text":"Include","hash":"_include","id":4},{"text":"Declaration","hash":"_declaration","id":5},{"text":"Expressions","hash":"_expressions","id":6},{"text":"Notation","hash":"_notation","id":7},{"text":"Constructors and Assignment","hash":"_constructors_and_assignment","id":8},{"text":"Factory","hash":"_factory","id":9},{"text":"Example","hash":"_example","id":10},{"text":"Mutators","hash":"_mutators","id":11},{"text":"Envelope Generator","hash":"_envelope_generator","id":12},{"text":"Include","hash":"_include_2","id":13},{"text":"Declaration","hash":"_declaration_2","id":14},{"text":"Expressions","hash":"_expressions_2","id":15},{"text":"Notation","hash":"_notation_2","id":16},{"text":"Function Call","hash":"_function_call","id":17},{"text":"Operation","hash":"_operation","id":18},{"text":"Accessors","hash":"_accessors","id":19},{"text":"ADSR Envelope Generator","hash":"_adsr_envelope_generator","id":20},{"text":"Include","hash":"_include_3","id":21},{"text":"Declaration","hash":"_declaration_3","id":22},{"text":"Implementation","hash":"_implementation","id":23},{"text":"Constructor","hash":"_constructor","id":24},{"text":"Mutators","hash":"_mutators_2","id":25}]},"49":{"id":49,"text":"exp_upward_ramp_gen is an exponential upward ramp generator that generates an exponentially increasing amplitude from 0.0 to 1.0, similar to a capacitor charged by a series resistor over time specified by the duration (width) and samples per second (sps), and optional exponential curvature (cv) parameters. exp_downward_ramp_gen is the inverse of the exponential upward ramp generator. This is similar to a capacitor discherged through a resistor. The Q DSP library utilizes the exponential ramp generators for generating complex envelopes. #include struct exp_upward_ramp_gen { exp_upward_ramp_gen(duration width, float sps, float cv = 0.95); float operator()(); void config(duration width, float sps); void config(duration width, float sps, float cv); void reset(); }; struct exp_downward_ramp_gen : exp_upward_ramp_gen { using exp_upward_ramp_gen::exp_upward_ramp_gen; float operator()(); }; exp_upward_ramp_gen and exp_downward_ramp_gen are a models of Ramp. In addition to valid expressions for Ramp, exp_upward_ramp_gen and exp_downward_ramp_gen allow these expressions. g Object of type exp_upward_ramp_gen or exp_downward_ramp_gen. w Object of type duration. sps Floating point value representing samples per second. cv Exponential curvature. The cv constructor and config parameter determines the curvature of the exponential. Valid cv values range greater than 0.0 to anything less than 1.0. cv is the final value in the exponential curve that will be considered as the peak value that will be scaled up to 1.0. Increasing the cv value leads to more pronounced curves. Lower cv values produce flatter, more linear ramps. The default is 0.95. Expression Semantics exp_upward_ramp_gen(w, sps, cv) Construct exp_upward_ramp_gen given width, w, and samples per second, sps, and exponential curvature, cw. exp_downward_ramp_gen(w, sps, cv) Construct exp_downward_ramp_gen given width, w, and samples per second, sps, and exponential curvature, cw. C++ brace initialization may also be used. Expression Semantics g.config(w, sps, cw) Set the ramp width, w, with samples per second, sps, and exponential curvature, cw.","title":"Exponential Ramp Generator","component":"q","version":"develop-0.99","name":"exponential_gen","url":"/q/develop-0.99/reference/synth/exponential_gen.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructor","hash":"_constructor","id":6},{"text":"Mutators","hash":"_mutators","id":7}]},"50":{"id":50,"text":"The Hamming window, named for R. W. Hamming, is a window function that tapers a signal towards its edges with non-zero endpoints. The Hamming window features a moderate rolloff rate and optimized to minimize the nearest side lobe, allowing for a fair mix of spectral resolution and noise reduction. The formula for the Hamming window is: w(n) = 0.54 - 0.46 * cos(2pi*n/(N-1)) Aside from its common use as a window function, the Q DSP library also utilizes the hamming window generator for modulating the audio signal and generating complex envelopes. #include struct hamming_gen { hamming_gen(duration width, float sps); float operator()(); void config(duration width, float sps; void reset(); void midpoint(); }; hamming_gen is a model of Generator. In addition to valid expressions for Generator, hamming_gen allows these expressions. g Object of type hamming_gen. w Object of type duration. sps Floating point value representing samples per second. Expression Semantics hamming_gen(w, sps) Construct hamming_gen given window width, w, and samples per second, sps. C++ brace initialization may also be used. Expression Semantics g.config(w, sps) Set the window width, w, with samples per second, sps. g.reset() Set the current phase to the start of the window. g.midpoint() Set the current phase to the middle of the window.","title":"Hamming Window Generator","component":"q","version":"develop-0.99","name":"hamming_gen","url":"/q/develop-0.99/reference/synth/hamming_gen.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructor","hash":"_constructor","id":6},{"text":"Mutators","hash":"_mutators","id":7}]},"51":{"id":51,"text":"The Hann window, also known as the Cosine Bell, is named after the Austrian meteorologist Julius von Hann. The Hann window is a taper formed with a cosine raised above zero. It is used as one of many windowing functions for smoothing values. The The Hann window taper belongs to both the cosine-sum and sine-power families. Unlike the Hamming window, the Hann window’s end points touch zero. The formula for the Hann window is: w(n) = 0.5*(1 - cos(2pin/(N-1))) Aside from its common use as a window function, the Q DSP library also utilizes the hann window generator for modulating the audio signal and generating complex envelopes. #include struct hann_gen { hann_gen(duration width, float sps); float operator()(); void config(duration width, float sps; void reset(); void midpoint(); }; hann_gen is a model of Generator. In addition to valid expressions for Generator, hann_gen allows these expressions. g Object of type hann_gen. w Object of type duration. sps Floating point value representing samples per second. Expression Semantics hann_gen(w, sps) Construct hann_gen given window width, w, and samples per second, sps. C++ brace initialization may also be used. Expression Semantics g.config(w, sps) Set the window width, w, with samples per second, sps. g.reset() Set the current phase to the start of the window. g.midpoint() Set the current phase to the middle of the window. Two subclasses of hann_gen are specialized for ramp generation: The Hann upward ramp generator generates a rising curve with the shape of the first half of a Hann window taper. The Hann downward ramp generator generates a falling curve with the shape of the second half of a Hann window taper. struct hann_upward_ramp_gen : hann_gen { hann_upward_ramp_gen(duration width, float sps); void config(duration width, float sps); }; struct hann_downward_ramp_gen : hann_gen { hann_downward_ramp_gen(duration width, float sps); void reset(); void config(duration width, float sps); }; hann_upward_ramp_gen and struct hann_downward_ramp_gen : hann_gen ` are a models of `Ramp and implements all valid expressions of Ramp.","title":"Hann Window Generator","component":"q","version":"develop-0.99","name":"hann_gen","url":"/q/develop-0.99/reference/synth/hann_gen.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructor","hash":"_constructor","id":6},{"text":"Mutators","hash":"_mutators","id":7},{"text":"Ramp Generators","hash":"_ramp_generators","id":8},{"text":"Declaration","hash":"_declaration_2","id":9},{"text":"Expressions","hash":"_expressions_2","id":10}]},"52":{"id":52,"text":"The linear upward ramp generator, lin_upward_ramp_gen generates a linearly increasing amplitude from 0.0 to 1.0 specified by the duration (width) and samples per second (sps parameters. This is essentially a basic straight ramp from 0.0 to 1.0. lin_downward_ramp_gen is the inverse of the linear upward ramp generator. This is essentially a basic straight ramp from 1.0 to 0.0. hold_line_gen is an infinitely wide straight horizontal line at 1.0. The Q DSP library utilizes the linear ramp generators for generating complex envelopes. #include struct lin_upward_ramp_gen { lin_upward_ramp_gen(duration width, float sps); float operator()(); void config(duration width, float sps); void reset(); }; struct lin_downward_ramp_gen : lin_upward_ramp_gen { lin_downward_ramp_gen(duration width, float sps); float operator()(); }; struct hold_line_gen { hold_line_gen(duration width, float sps); float operator()(); void config(duration width, float sps); void reset(); }; lin_upward_ramp_gen, lin_downward_ramp_gen and hold_line_gen are a models of Ramp and implements all valid expressions of Ramp.","title":"Linear Ramp Generator","component":"q","version":"develop-0.99","name":"linear_gen","url":"/q/develop-0.99/reference/synth/linear_gen.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4}]},"53":{"id":53,"text":"The pulse wave oscillator programmatically generates a pulse waveform with specified pulse width. The basic_pulse_osc is not bandwidth limited, while pulse_osc is, using a technique called \"PolyBLEP\" to reduce aliasing artifacts that can occur when generating the waveform with a sharp discontinuity as the signal transitions from -1.0 to 1.0. PolyBLEP works by precalculating a correction function that subtracts the waveform’s high-frequency components at discontinuities. This correction function is then applied to the generated waveform, effectively removing frequencies above the waveform’s Nyquist frequency to avoid aliasing artifacts. #include struct basic_pulse_osc { constexpr basic_pulse_osc(float width = 0.5); constexpr void width(float width); constexpr float operator()(phase p); constexpr float operator()(phase_iterator i); }; struct pulse_osc : basic_pulse_osc { constexpr pulse_osc(float width = 0.5); constexpr float operator()(phase p, phase dt) const; constexpr float operator()(phase_iterator i) const; }; basic_pulse_osc is a model of BasicOscillator and implements all valid expressions of BasicOscillator. pulse_osc is a model of BandwidthLimitedOscillator and implements all valid expressions of BandwidthLimitedOscillator. In addition to valid expressions for BasicOscillator and BandwidthLimitedOscillator, basic_pulse_osc and pulse_osc allow these expressions. w A floating point value from 0.0 to 1.0 representing pulse width. ps Object of type basic_pulse_osc or pulse_osc Expression Semantics basic_pulse_osc(w) Construct a basic_pulse_osc given a pulse width, w pulse_osc(w) Construct a pulse_osc given a pulse width, w C++ brace initialization may also be used. Expression Semantics ps.width(w) Set the basic_pulse_osc or pulse_osc pulse width to w.","title":"Pulse Wave Oscillator","component":"q","version":"develop-0.99","name":"pulse_osc","url":"/q/develop-0.99/reference/synth/pulse_osc.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructor","hash":"_constructor","id":6},{"text":"Mutators","hash":"_mutators","id":7}]},"54":{"id":54,"text":"The saw-tooth wave oscillator programmatically generates the waveform. The result is basically just the phase, centered around zero, producing an amplitude of ±1.0. The basic_saw_osc is not bandwidth limited, while saw_osc is, using a technique called \"PolyBLEP\" to reduce aliasing artifacts that can occur when generating the waveform with a sharp discontinuity as the signal transitions from -1.0 to 1.0. PolyBLEP works by precalculating a correction function that subtracts the waveform’s high-frequency components at discontinuities. This correction function is then applied to the generated waveform, effectively removing frequencies above the waveform’s Nyquist frequency to avoid aliasing artifacts. #include struct basic_saw_osc { constexpr float operator()(phase p) const; constexpr float operator()(phase_iterator i) const; }; constexpr auto basic_saw = basic_saw_osc{}; struct saw_osc { constexpr float operator()(phase p, phase dt) const; constexpr float operator()(phase_iterator i) const; }; constexpr auto saw = saw_osc{}; basic_saw_osc is a model of BasicOscillator and implements all valid expressions of BasicOscillator. saw_osc is a model of BandwidthLimitedOscillator and implements all valid expressions of BandwidthLimitedOscillator. basic_saw_osc and saw_osc are stateless. The global instances basic_saw and saw can be used anywhere without needing to be placed in a class or struct. They are semantically equivalent to global functions.","title":"Saw-Tooth Wave Oscillator","component":"q","version":"develop-0.99","name":"saw_osc","url":"/q/develop-0.99/reference/synth/saw_osc.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4}]},"55":{"id":55,"text":"sin_cos_gen is an oscillator that simultaneously generates sine and cosine waveforms. sin_cos_gen is implemented utilizing Hal Chamberlin’s state variable IIR filter, a digital derivation of the analog state variable filter optimized for infinite Q oscillation. sin_cos_gen is suitable as a low frequency sine wave oscillator. The upper frequency limit for stability is roughly 1/6 sps. At low frequencies, the waveform symmetry is very pure, but it becomes skewed as you approach the upper limit. For low frequencies, we can reduce the calculation of the coefficient to 2*Pi*freq/sps. When utilized with fixed point or IEEE floating point, the oscallator should run forever without instability. While sin_cos_gen is technically an oscillator which generates periodic waveforms, it is presented as a model of Generator because it does not conform to the Oscillator concept which requires complete control over the phase. Although sin_cos_gen is technically an oscillator that produces periodic waveforms, it is represented as a model of a Generator because it does not adhere to the Oscillator concept, which requires complete control over the phase for synchronicity. As a free-running oscillator,sin_cos_gen can exhibit phase drift over time due to accumulating floating-point errors. Source: The digital state variable filter #include struct sin_cos_gen { sin_cos_gen(frequency f, float sps); std::pair operator()(); void config(frequency f, float sps); void reset(float sin = 0.0f, float cos = 1.0f); void midpoint(); }; sin_cos_gen is a model of Generator. In addition to valid expressions for Generator, sin_cos_gen allows these expressions. g Object of type sin_cos_gen. f Object of type frequency. sps Floating point value representing samples per second. sval, cval Floating point value values. Expression Semantics sin_cos_gen(f, sps) Construct sin_cos_gen given frequency, f, and samples per second, sps. C++ brace initialization may also be used. Expression Semantics Return Type g() Generate a sin/cos signal and get both sin and cos result. The return type is a std::pair which stores the sin and cos results. std::pair g().first Generate a sin/cos signal and get only the sin result. float g().second Generate a sin/cos signal and get only the cos result. float Expression Semantics g.config(f, sps) Set the frequency, f, with samples per second, sps. g.reset() Reset the current sin and cos to 0.0f and 1.0f, respectively. g.reset(sval, cval) Reset the current sin and cos values, respectively. g.midpoint() Equivalent to g.reset(0.0f, -1.0f).","title":"Sine Cosine Generator","component":"q","version":"develop-0.99","name":"sin_cos_gen","url":"/q/develop-0.99/reference/synth/sin_cos_gen.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructor","hash":"_constructor","id":6},{"text":"Function Call","hash":"_function_call","id":7},{"text":"Mutators","hash":"_mutators","id":8}]},"56":{"id":56,"text":"The sine wave oscillator is one of the most fundamental building blocks in synthesis. It generates a basic, pure waveform consisting of a single frequency with no harmonics or overtones. The sine wave oscillator is often used in additive synthesis to create complex waveforms by combining simple sine waves of various frequencies, phases, and amplitudes. It is also often used as a low-frequency oscillator for modulating various audio parameters, such as frequency and amplitude. sin_osc efficiently synthesizes sine waves from a lookup table to avoid performing complex calculations in real-time. The lookup table is optimized for use in small MCUs (microconrrollers), by having the data stored as c++ constexpr array, which is effectively placed in flash memory. #include struct sin_osc { constexpr float operator()(phase p) const; constexpr float operator()(phase_iterator i) const; }; constexpr auto sin = sin_osc{}; sin_osc is a model of BasicOscillator and implements all valid expressions of BasicOscillator. sin_osc is stateless. The global instance sin can be used anywhere without needing to be placed in a class or struct. It is semantically equivalent to a global function.","title":"Sine Wave Oscillator","component":"q","version":"develop-0.99","name":"sin_osc","url":"/q/develop-0.99/reference/synth/sin_osc.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4}]},"57":{"id":57,"text":"The square wave oscillator programmatically generates a pulse waveform with a 50% pulse width. The basic_square_osc is not bandwidth limited, while square_osc is, using a technique called \"PolyBLEP\" to reduce aliasing artifacts that can occur when generating the waveform with a sharp discontinuity as the signal transitions from -1.0 to 1.0. PolyBLEP works by precalculating a correction function that subtracts the waveform’s high-frequency components at discontinuities. This correction function is then applied to the generated waveform, effectively removing frequencies above the waveform’s Nyquist frequency to avoid aliasing artifacts. #include struct basic_square_osc { constexpr float operator()(phase p) const; constexpr float operator()(phase_iterator i) const; }; constexpr auto basic_square = basic_square_osc{}; struct square_osc { constexpr float operator()(phase p, phase dt) const; constexpr float operator()(phase_iterator i) const; }; constexpr auto square = square_osc{}; basic_square_osc is a model of BasicOscillator and implements all valid expressions of BasicOscillator. square_osc is a model of BandwidthLimitedOscillator and implements all valid expressions of BandwidthLimitedOscillator. basic_square_osc and square_osc are stateless. The global instances basic_square and square can be used anywhere without needing to be placed in a class or struct. They are semantically equivalent to global functions.","title":"Square Wave Oscillator","component":"q","version":"develop-0.99","name":"square_osc","url":"/q/develop-0.99/reference/synth/square_osc.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4}]},"58":{"id":58,"text":"The triangle wave oscillator programmatically generates a triangle waveform that ramps up from 0.0 to 1.0, then ramps down to -1.0, and ramps back up to 0.0. The basic_triangle_osc is not bandwidth limited, while triangle_osc is, using a technique called \"PolyBLAMP\" to reduce aliasing artifacts that can occur when generating the triangle waveform with sharp corners. PolyBLAMP uses the BLAMP (bandlimited ramp) function to treat any discontinuities found in the first derivative of a signal by quasi-bandlimiting the corners found in the waveform. The algorithm derives a polynomial approximation of the BLAMP function, making it efficient for implementation. This correction function is applied to the generated waveform, effectively removing frequencies above the waveform’s Nyquist frequency to avoid aliasing artifacts. #include struct basic_triangle_osc { constexpr float operator()(phase p) const; constexpr float operator()(phase_iterator i) const; }; constexpr auto basic_triangle = basic_triangle_osc{}; struct triangle_osc { constexpr float operator()(phase p, phase dt) const; constexpr float operator()(phase_iterator i) const; }; constexpr auto triangle = triangle_osc{}; basic_triangle_osc is a model of BasicOscillator and implements all valid expressions of BasicOscillator. triangle_osc is a model of BandwidthLimitedOscillator and implements all valid expressions of BandwidthLimitedOscillator. basic_triangle_osc and triangle_osc are stateless. The global instances basic_triangle and triangle can be used anywhere without needing to be placed in a class or struct. They are semantically equivalent to global functions.","title":"Triangle Wave Oscillator","component":"q","version":"develop-0.99","name":"triangle_osc","url":"/q/develop-0.99/reference/synth/triangle_osc.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4}]},"59":{"id":59,"text":"The decibel (dB) is a unit used to measure the relative signal level difference between two signals. It is a logarithmic scale that expresses the relationship between two signal root-power amplitudes or power levels. Here, we are concerned with amplitudes. For amplitudes gain, the relationship is given by: 20 log10(out/in) = dB where out represents the output amplitude, while in represents the input amplitude. The decibel scale is expressed as the base 10 logarithm of the ratio between two amplitudes. For instance, a ratio of 2:1 (two times) corresponds to a 6 dB increase, while a ratio of 10:1 (ten times) corresponds to a 20 dB increase. In contrast, a ratio of 1:2 (one half) corresponds to a -6 dB decrease, whereas a ratio of 1:10 (one tenth) corresponds to a -20 dB decrease. Decibel is non-linear and operates on the logarithmic domain. The decibel class is perfectly suitable for dynamics processing (e.g. compressors and limiters and envelopes). Q provides fast decibel computations using fast math functions and lookup tables for converting to and from scalars. #include struct decibel_unit; struct decibel : _unspecified_base_type_ { using base_type = _unspecified_base_type_; using base_type::base_type; using unit_type = decibel_unit; }; // Free functions double lin_double(decibel db); constexpr float lin_float(decibel db); inline decibel approx_db(float val); decibel lin_to_db(double val); // Literals inline namespace literals { constexpr decibel operator \"\" _dB(unsigned long long int val); constexpr decibel operator \"\" _dB(long double val); } decibel is a model of Unit. In addition to valid expressions for Unit, decibel allows these expressions. d Object of type decibel. v Linear floating point value. 0.0 A floating point literal number. 0 An integer literal number. Take note that the Unit concept already has a constructor from a floating point value that handles direct construction such as: auto db = decibel{6.0}; // 6 dB This constructor was used in previous versions of the library to convert linear to decibels, which can be confusing. This version ought to have corrected this nonintuitive semantics, but this is a disruptive change that will alter the semantics of all existing code without warning. In order to avoid further confusion, we will mark this constructor as deleted for the time being, making it a hard error to alert users upgrading to this library version. C++ brace initialization may also be used. Expression Semantics Return Type lin_float(d) Convert decibel to a linear value. float lin_double(d) Convert decibel to a linear value. double lin_to_db(v) Convert a linear value v to decibel. decibel approx_db(v) Faster approximate conversion from a linear value v to decibel. decibel The free function lin_to_db can be used to indirectly construct and return a decibel object from a linear value. The lin_to_db function performs linear to decibel conversion. Example: auto db = lin_to_db(2.0); // 6 dB In addition to lin_to_db, approx_db is another free function that performs linear to decibel conversion. It is a faster, but less accurate conversion function from a linear value to decibel. lin_float and lin_double convert decibel to a linear value with float and double results, respectively. If you need to create decibel from numeric constants, it is preferrable to use decibel literals instead. Example: auto db = -6_dB; Expression Semantics 0.0_dB Returns 0.0 dB. 0_dB Returns 0.0 dB. Take note that 0.0 and 0 stand for any floating point, and integer numeric literals. Unless you have a conflicting usage for the _dB literal, it is generally safe to bring its namespace into scope using the using namespace cycfi::q::literals directive anywhere in a cpp file.","title":"decibel","component":"q","version":"develop-0.99","name":"decibel","url":"/q/develop-0.99/reference/units/decibel.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructor","hash":"_constructor","id":6},{"text":"Conversions","hash":"_conversions","id":7},{"text":"Literals","hash":"_literals","id":8}]},"60":{"id":60,"text":"Type safe representation of duration: the length of time that something lasts or continues, measured in seconds. #include struct duration_unit; struct duration : _unspecified_base_type_ { using base_type = _unspecified_base_type_; using base_type::base_type; using unit_type = duration_unit; }; // Free functions constexpr double as_double(duration d); constexpr float as_float(duration d); // Literals inline namespace literals { constexpr duration operator \"\" _s(long double val); constexpr duration operator \"\" _s(unsigned long long int val); constexpr duration operator \"\" _ms(long double val); constexpr duration operator \"\" _ms(unsigned long long int val); constexpr duration operator \"\" _us(long double val); constexpr duration operator \"\" _us(unsigned long long int val); } In addition to valid expressions for Unit, duration allows these expressions. d Object of type duration 1.0 A floating point literal number. 1 An integer literal number. Expression Semantics Return Type as_float(d) Convert duration to a float in seconds. float as_double(d) Convert duration to a double in seconds. double If you need to create duration from numeric constants, it is preferrable to use duration literals instead. Example: auto d = 6_ms; Expression Semantics 1.0_s Returns a duration of 1.0 seconds. 1_s Returns a duration of 1.0 seconds. 1.0_ms Returns a duration of 1.0 milliseconds. 1_ms Returns a duration of 1.0 milliseconds. 1.0_us Returns a duration of 1.0 microseconds. 1_us Returns a duration of 1.0 microseconds. Take note that 1.0 and 1 stand for any floating point, and integer numeric literals. Unless you have a conflicting usage for the _s, _ms, and _us literals, it is generally safe to bring their namespace into scope using the using namespace cycfi::q::literals directive anywhere in a cpp file.","title":"duration","component":"q","version":"develop-0.99","name":"duration","url":"/q/develop-0.99/reference/units/duration.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Conversions","hash":"_conversions","id":6},{"text":"Literals","hash":"_literals","id":7}]},"61":{"id":61,"text":"Type safe representation of frequency: the number of cycles or oscillations of a periodic event per unit of time, measured in Hertz. #include struct frequency_unit; struct frequency : _unspecified_base_type_ { using base_type = _unspecified_base_type_; using base_type::base_type; using unit_type = frequency_unit; constexpr q::period period() const; }; // Free functions constexpr double as_double(frequency f); constexpr float as_float(frequency f); // Literals inline namespace literals { constexpr frequency operator \"\" _Hz(long double val); constexpr frequency operator \"\" _Hz(unsigned long long int val); constexpr frequency operator \"\" _KHz(long double val); constexpr frequency operator \"\" _KHz(unsigned long long int val); constexpr frequency operator \"\" _kHz(long double val); constexpr frequency operator \"\" _kHz(unsigned long long int val); constexpr frequency operator \"\" _MHz(long double val); constexpr frequency operator \"\" _MHz(unsigned long long int val); } frequency is a model of Unit. In addition to valid expressions for Unit, frequency allows these expressions. f Object of type frequency. 1.0 A floating point literal number. 1 An integer literal number. Expression Semantics Return Type as_float(f) Convert frequency to a float. float as_double(f) Convert frequency to a double. double Expression Semantics Return Type f.period() Get the period (reciprocal of frequency). period If you need to create frequency from numeric constants, it is preferrable to use frequency literals. Example: auto d = 440_Hz; Expression Semantics 1.0_Hz Returns a frequency of 1.0 Hz. 1_Hz Returns a frequency of 1.0 Hz. 1.0_kHz Returns a frequency of 1.0 kHz. 1_kHz Returns a frequency of 1.0 kHz. 1.0_KHz Returns a frequency of 1.0 kHz. 1_KHz Returns a frequency of 1.0 kHz. 1.0_MHz Returns a frequency of 1.0 MHz. 1_MHz Returns a frequency of 1.0 MHz. Take note that 1.0 and 1 stand for any floating point, and integer numeric literals. Unless you have a conflicting usage for the _Hz, _kHz, and _MHz literals, it is generally safe to bring their namespace into scope using the using namespace cycfi::q::literals directive anywhere in a cpp file.","title":"frequency","component":"q","version":"develop-0.99","name":"frequency","url":"/q/develop-0.99/reference/units/frequency.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Conversions","hash":"_conversions","id":6},{"text":"Misc","hash":"_misc","id":7},{"text":"Literals","hash":"_literals","id":8}]},"62":{"id":62,"text":"An interval is the distance between two pitches, measured in semitones. It is the basis for melody and harmony as well as all musical scales and chords. The basic_interval is a template class, parameterized by the underlying type T. #include struct interval_unit; template struct basic_interval : _unspecified_base_type_ { using base_type = _unspecified_base_type_; using base_type::base_type; using unit_type = interval_unit; constexpr explicit basic_interval(concepts::Arithmetic auto val); }; // Free functions template constexpr int as_int(basic_interval i); template constexpr float as_float(basic_interval i); template constexpr double as_double(basic_interval i); template requires std::floating_point constexpr basic_interval round(basic_interval i); template requires std::floating_point constexpr basic_interval ceil(basic_interval i); template requires std::floating_point constexpr basic_interval floor(basic_interval i); There are two basic type aliases: interval and exact_interval, which are template instantiations of the basic_interval template class: interval Fractional interval. Can represent microtones —intervals smaller than a semitone. exact_interval Exact, whole number intervals. using interval = basic_interval; using exact_interval = basic_interval; basic_interval is a model of Unit. In addition to valid expressions for Unit, Intervals allow these expressions. i Object of type basic_interval. Expression Semantics Return Type as_int(i) Convert an interval to an int. int as_float(i) Convert an interval to a float. float as_double(i) Convert an interval to a double. double Expression Semantics Return Type round(i) Rounds i to the nearest non-fractional interval. basic_interval ceil(i) Returns the smallest non-fractional interval that is greater than or equal i. basic_interval floor(i) Returns the largest non-fractional interval that is less than or equal i. basic_interval The round, ceil and floor functions require T to be a floating point type.","title":"Interval","component":"q","version":"develop-0.99","name":"interval","url":"/q/develop-0.99/reference/units/interval.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Template Instantiations","hash":"_template_instantiations","id":4},{"text":"Expressions","hash":"_expressions","id":5},{"text":"Notation","hash":"_notation","id":6},{"text":"Conversions","hash":"_conversions","id":7},{"text":"Functions","hash":"_functions","id":8}]},"63":{"id":63,"text":"Type safe representation of period: the reciprocal of frequency, or the time it takes for a periodic event to complete one full cycle or oscillation. #include period is a subclass of {duration} and inherits all its public member functions, member variables, and types. struct period : duration { using duration::duration; constexpr period(duration d); constexpr period(frequency f); }; As a subclass of duration, period inherits all the publicly accessible member functions, member variables, and types of its base class. period is a model of Unit. In addition to valid expressions for Unit, period allows these expressions. d Object of type duration f Object of type frequency p Object of type period Expression Semantics phase(d) Construct a period given a duration, d phase(f) Construct a period given a frequency, f C++ brace initialization may also be used. Expression Semantics Return Type as_float(f) Convert frequency to a float in seconds. float as_double(f) Convert frequency to a double in seconds. double","title":"period","component":"q","version":"develop-0.99","name":"period","url":"/q/develop-0.99/reference/units/period.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructor","hash":"_constructor","id":6},{"text":"Conversions","hash":"_conversions","id":7}]},"64":{"id":64,"text":"Type safe representation of phase: the relationship in timing between a periodic signal relative to a reference periodic signal of the same frequency. Phase values run from 0 to 2π. The turn, also cycle, full circle, revolution, and rotation, is a complete circular movement or measure (as to return to the same point) with circle or ellipse. A turn is abbreviated τ, cyc, rev, or rot depending on the application. The symbol τ can also be used as a mathematical constant to represent 2π radians. https://en.wikipedia.org/wiki/Angular_unit phase is represented in a fixed-point 1.31 format where 31 bits are fractional. Such a format is perfectly suitable for oscillators. For that purpose, a phase accumulator can be used: essentially a counter that keeps track of the current phase value for the waveform. Initially, the accumulator is set to an arbitrary starting phase, usually 0. To generate the next sample of the waveform, we compute the phase value for the next sample based on the desired frequency and the sample rate. This value is then added to the current phase accumulator value. This process continues for each successive sample in the waveform. The advantage of using fixed point 1.31 to represent phase is that the phase accumulator inherently rewraps the value when the next phase exceeds 2π. This behavior is inherent to the fixed-point 1.31 format and eliminates the need for additional logic to handle the wraparound condition. Also, see phase_iterator for further additional relevant information. #include struct phase_unit; struct phase : _unspecified_base_type_ { using base_type = _unspecified_base_type_; using base_type::base_type; using unit_type = phase_unit; constexpr phase(); constexpr phase(frequency freq, float sps); constexpr static phase begin(); constexpr static phase end(); constexpr static phase middle(); }; // Free functions constexpr phase frac_to_phase(std::floating_point auto frac); constexpr double frac_double(phase d); constexpr float frac_float(phase p); phase is a model of Unit. In addition to valid expressions for Unit, phase allows these expressions. frac A floating point number, representing a fractional number from 0.0 to 1.0 (corresponding to 0 to 2π). freq Object of type frequency. sps Floating point value representing samples per second. p Object of type phase. val The underlying data type representing phase. See Unit. Expression Semantics phase() Default construct a phase. Equivalent to phase(0). phase(freq, sps) Construct a phase from the freq and sps C++ brace initialization may also be used. Expression Semantics Return Type frac_float(p) Convert phase to a float from 0.0 to 1.0. float frac_double(p) Convert phase to a double from 0.0 to 1.0r. double frac_to_phase(frac) Convert a floating point fractional value to a phase phase Expression Semantics Return Type phase::begin() Get the minimum phase representing 0° phase phase::end() Get the maximum phase representing 360° (2π) phase phase::middle() Get the phase representing 180° (π) phase","title":"phase","component":"q","version":"develop-0.99","name":"phase","url":"/q/develop-0.99/reference/units/phase.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructor","hash":"_constructor","id":6},{"text":"Conversions","hash":"_conversions","id":7},{"text":"Accessors","hash":"_accessors","id":8}]},"65":{"id":65,"text":"Read phase first for prerequisite information. phase_iterator is a class that iterates over the phase with an iteration step size specified by the given frequency and sampling rate. phase_iterator holds two phase members, the phase accumulator and the phase step size. The phase accumulator, keeps track of the current phase value for the waveform. Initially, the accumulator is set to an arbitrary starting phase, usually 0. For each sample of the waveform, the phase step size value is added to the current phase accumulator, which inherently rewraps the value when the next phase exceeds 2π. #include struct phase_iterator { constexpr phase_iterator(); constexpr phase_iterator(frequency freq, float sps); constexpr phase_iterator operator++(int); constexpr phase_iterator& operator++(); constexpr phase_iterator operator--(int); constexpr phase_iterator& operator--(); constexpr phase_iterator& operator=(phase rhs); constexpr phase_iterator& operator=(phase_iterator const& rhs) = default; constexpr void set(frequency freq, float sps); constexpr bool first() const; constexpr bool last() const; constexpr phase_iterator begin() const; constexpr phase_iterator end() const; constexpr phase_iterator middle() const; phase _phase, _step; }; freq Object of type frequency sps Floating point value representing samples per second i, a, b Objects of type phase_iterator p Objects of type phase Expression Semantics phase_iterator() Default construct a phase_iterator. phase_iterator(freq, sps) Construct a phase_iterator from the freq and sps phase_iterator(i) Copy construct from phase_iterator i. a = b Assign phase_iterator b, to phase_iterator a. i = p Assign phase p, to phase_iterator i. See Modifying The State. C++ brace initialization may also be used. Expression Semantics Return Type i++ Post increment. Returns a copy of the iterator made prior to increment. phase_iterator ++i Pre increment. Increment and return a reference to the iterator. phase_iterator& i-- Post decrement. Returns a copy of the iterator made prior to decrement. phase_iterator --i Pre decrement. Decrement and return a reference to the iterator. phase_iterator& Expression Semantics Return Type set(freq, sps) Modify a phase_iterator given a new freq and sps. See Modifying The State. void When modifying a phase_iterator with a new frequency, freq, and sampling rate, sps, only the phase step size will be changed. To prevent discontinuities, the phase accumulator will not be touched. This means that the phase accumulator will continue to count up from its previous value, while the updated phase step size will determine the new frequency. Expression Semantics Return Type i.first() Returns true if the phase_iterator is at the start of the waveform cycle (0° or 0 rad). I.e. the phase accumulator is within 0 to phase step size. bool i.last() Returns true if the phase_iterator is at the end of the waveform cycle (360° or 2π rad). I.e. the phase accumulator is within phase step size below 2π. bool i.begin() Return a new phase_iterator with the same frequency, but with the phase accumulator set at the start of the waveform cycle (0° or 0 rad). phase_iterator i.end() Return a new phase_iterator with the same frequency, but with the phase accumulator set at the end of the waveform cycle (360° or 2π rad). phase_iterator i.middle() Return a new phase_iterator with the same frequency, but with the phase accumulator set at the middle of the waveform cycle (180° or π rad) phase_iterator i._phase Direct access to the phase accumulator. phase& i._step Direct access to the phase step size. phase&","title":"phase_iterator","component":"q","version":"develop-0.99","name":"phase_iterator","url":"/q/develop-0.99/reference/units/phase_iterator.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructors and Assignments","hash":"_constructors_and_assignments","id":6},{"text":"Iteration","hash":"_iteration","id":7},{"text":"Mutator","hash":"_mutator","id":8},{"text":"Modifying The State","hash":"_modifying_the_state","id":9},{"text":"Accessors","hash":"_accessors","id":10}]},"66":{"id":66,"text":"pitch is determined by its position on the chromatic scale, which is a system of 12 notes that repeat in octaves. The distance between each pitch on the chromatic scale is a semitone, and each pitch represents a specific frequency measured in hertz (Hz). pitch is an interval with a base frequency of 8.1757989156437 Hz that correspond to MIDI note 0 (which is an octave below F#0). pitch is represented by the MIDI value. Therefore, only positive values are valid. pitch includes construction from frequency as well as numeric values representing the absolute position in the chromatic scale from the base frequency. pitch also includes conversions to frequency. Conversions to and from frequency utilize fast log2 and pow2 computations using fast math functions. #include struct pitch : interval { constexpr static auto base_frequency = frequency{8.1757989156437}; constexpr pitch(); explicit pitch(frequency f); constexpr bool valid() const; // These operations do not make sense and are not allowed. pitch& operator+=(pitch) = delete; pitch& operator-=(pitch) = delete; }; // Free functions frequency as_frequency(pitch n); float as_float(pitch n); double as_double(pitch n); constexpr pitch round(pitch n); constexpr pitch ceil(pitch n); constexpr pitch floor(pitch n); // These operations do not make sense and are not allowed. pitch operator+(pitch, pitch) = delete; pitch operator-(pitch, pitch) = delete; In addition to valid expressions for interval, pitch allows these expressions. p, a, b Objects of type pitch f Object of type frequency Expression Semantics pitch(f) Construct a pitch from frequency f. pitch() Default construct a pitch. The result is an invalid pitch by default where p.rep == -1.0. C++ brace initialization may also be used. Expression Semantics Return Type as_float(p) Convert pitch to a float. float as_double(p) Convert pitch to a double. double as_frequency(p) Convert pitch to a frequency. frequency Expression Semantics Return Type p.valid() Returns true if p is valid. p is valid if p.rep >= 0.0 bool round(p) Rounds p to the nearest non-fractional pitch. pitch ceil(p) Returns the smallest non-fractional pitch that is greater than or equal i pitch floor(p) Returns the largest non-fractional pitch that is less than or equal i pitch These valid expressions for interval do not make sense for pitch and are no longer allowed. Expression a += b a -= b a + b a - b","title":"pitch","component":"q","version":"develop-0.99","name":"pitch","url":"/q/develop-0.99/reference/units/pitch.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Constructors","hash":"_constructors","id":6},{"text":"Conversions","hash":"_conversions","id":7},{"text":"Functions","hash":"_functions","id":8},{"text":"Deleted Functions","hash":"_deleted_functions","id":9}]},"67":{"id":67,"text":"Fractional ring buffer allows sub-sample indexing using interpolation. fractional_ring_buffer is a subclass of ring_buffer that overloads the index operator to provide sub-sample indexing. #include template , typename Index = float , typename Interpolation = sample_interpolation::linear> class fractional_ring_buffer : public ring_buffer { public: using value_type = T; using storage_type = Storage; using index_type = Index; using interpolation_type = Interpolation; using ring_buffer::ring_buffer; // get data (index can be fractional) T const operator[](Index index) const; }; As a subclass of ring_buffer, fractional_ring_buffer inherits all the publicly accessible member functions, member variables, and types of its base class. In addition to valid expressions for ring_buffer, fractional_ring_buffer allows these expressions. T Element type, e.g. float. S Storage type, e.g. std::vector. I Index type, e.g. float. X Interpolation type, e.g. sample_interpolation::linear. rb_type A fractional_ring_buffer type. rb Object of type fractional_ring_buffer. i Object of type I. a [, b, c, d] Required a, optional b, c, d. Expression Semantics fractional_ring_buffer Instantiate a fractional_ring_buffer type given: Element type T Storage type S (optional) Index type I (optional) Interpolation type, X (optional) using rb_type1 = fractional_ring_buffer using rb_type2 = fractional_ring_buffer> using rb_type3 = fractional_ring_buffer, float> using rb_type4 = fractional_ring_buffer Expression Semantics rb_type::value_type Get the underlying element type. rb_type::storage_type Get the underlying storage type. rb_type::index_type Get the underlying index type. rb_type::interpolation_type Get the underlying interpolation type. Expression Semantics Return Type rb[i] Get the element at index i. rb[0] refers to the latest element. rb[rb.size()-1] refers to the oldest element. Index can be fractional (e.g. rb[2.5]). T& or T const& if rb is const. i rb.size()-1 is undefined behavior.","title":"Fractional Ring Buffer","component":"q","version":"develop-0.99","name":"fractional_ring_buffer","url":"/q/develop-0.99/reference/utility/fractional_ring_buffer.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Type Construction","hash":"_type_construction","id":6},{"text":"Examples:","hash":"_examples","id":7},{"text":"Type Accessors","hash":"_type_accessors","id":8},{"text":"Accessors","hash":"_accessors","id":9}]},"68":{"id":68,"text":"The ring buffer is a fixed-size buffer that is regarded as if it were circular. When data is written to the buffer, it is stored in sequential order up to its size, after which new data will overwrite the oldest data in the buffer. ring_buffer is a template class parameterized by the underlying element type, T, and the type of storage used, which defaults to std::vector, although it is also possible to use fixed sized storage such as std::array as long as the size is a powers of 2. For efficiency, the ring buffer storage will maintain a size that is the power of 2. The ring_buffer is not resizable after construction. #include template > class ring_buffer { public: using value_type = T; using storage_type = Storage; explicit ring_buffer(); explicit ring_buffer(std::size_t size); ring_buffer(ring_buffer const& rhs) = default; ring_buffer(ring_buffer&& rhs) = default; ring_buffer& operator=(ring_buffer const& rhs) = default; ring_buffer& operator=(ring_buffer&& rhs) = default; std::size_t size() const; void push(T val); T const& front() const; T& front(); T const& back() const; T& back(); T const& operator[](std::size_t index) const; T& operator[](std::size_t index); void clear(); void pop_front(); Storage& store(); const Storage& store() const; }; T Element type, e.g. float. S Storage type, e.g. std::vector. rb_type A ring_buffer type. rb, a, b Objects of type ring_buffer. val Object of type T. i Object of type std::size_t. s Object of type std::size_t. a [, b, c, d] Required a, optional b, c, d. Expression Semantics ring_buffer Instantiate a ring_buffer type given: Element type T Storage type S (optional) using rb_type1 = ring_buffer using rb_type2 = ring_buffer> Expression Semantics rb_type::value_type Get the underlying element type. rb_type::storage_type Get the underlying storage type. Expression Semantics rb_type() Default construct a ring buffer. This constructor is only applicable when a fixed sized storage is specified. rb_type(s) Construct a ring buffer with specified size, s. This constructor is only applicable when a resizable storage is specified. The actual buffer size will be the minimum power of 2 greater than size. greater than s. rb_type(rb) Copy construct from rb_type rb. a = b Assign b to a. C++ brace initialization may also be used. Expression Semantics rb.push(val) Push the latest element, overwriting the oldest element. rb.clear() Clear the ring buffer. rb.pop_front() Pop the latest element. This operation will not destruct the element, but will instead allow the ring buffer to overwrite the element on the next push. Expression Semantics Return Type rb.size() Get the ring buffer’s size. std::size_t. rb.front() Get the latest element. T& or T const& if rb is const. rb.back() Get the oldest element. T& or T const& if rb is const. rb[i] Get the element at index i. rb[0] refers to the latest element. rb[rb.size()-1] refers to the oldest element. T& or T const& if rb is const. rb.store() Get a reference to the storage. S& or S const& if rb is const. i rb.size()-1 is undefined behavior.","title":"Ring Buffer","component":"q","version":"develop-0.99","name":"ring_buffer","url":"/q/develop-0.99/reference/utility/ring_buffer.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Include","hash":"_include","id":2},{"text":"Declaration","hash":"_declaration","id":3},{"text":"Expressions","hash":"_expressions","id":4},{"text":"Notation","hash":"_notation","id":5},{"text":"Type Construction","hash":"_type_construction","id":6},{"text":"Examples:","hash":"_examples","id":7},{"text":"Type Accessors","hash":"_type_accessors","id":8},{"text":"Constructors and Assignment","hash":"_constructors_and_assignment","id":9},{"text":"Mutators","hash":"_mutators","id":10},{"text":"Accessors","hash":"_accessors","id":11}]}},"components":{},"componentVersions":{"q/develop-0.99":{"displayVersion":"develop-0.99","title":"Q Audio DSP Library","version":"develop-0.99","name":"q","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Q Docs","site-url":"https://www.cycfi.com/","source-language":"asciidoc@","table-caption":false},"sourcemap":false},"url":"/q/develop-0.99/index.html","navigation":[{"items":[{"content":"Setup and Installation","url":"/q/develop-0.99/setup.html","urlType":"internal"},{"content":"Quick Start","url":"/q/develop-0.99/quick_start.html","urlType":"internal"},{"content":"Fundamentals","url":"/q/develop-0.99/fundamentals.html","urlType":"internal"},{"content":"Reference","items":[{"content":"Units","url":"/q/develop-0.99/reference/units.html","urlType":"internal","items":[{"content":"frequency","url":"/q/develop-0.99/reference/units/frequency.html","urlType":"internal"},{"content":"duration","url":"/q/develop-0.99/reference/units/duration.html","urlType":"internal"},{"content":"period","url":"/q/develop-0.99/reference/units/period.html","urlType":"internal"},{"content":"phase","url":"/q/develop-0.99/reference/units/phase.html","urlType":"internal","items":[{"content":"phase_iterator","url":"/q/develop-0.99/reference/units/phase_iterator.html","urlType":"internal"}]},{"content":"decibel","url":"/q/develop-0.99/reference/units/decibel.html","urlType":"internal"},{"content":"interval","url":"/q/develop-0.99/reference/units/interval.html","urlType":"internal","items":[{"content":"pitch","url":"/q/develop-0.99/reference/units/pitch.html","urlType":"internal"}]}]},{"content":"Biquad","url":"/q/develop-0.99/reference/biquad.html","urlType":"internal","items":[{"content":"Low Pass Filter","url":"/q/develop-0.99/reference/biquad/lowpass.html","urlType":"internal"},{"content":"High Pass Filter","url":"/q/develop-0.99/reference/biquad/highpass.html","urlType":"internal"},{"content":"Band Pass Filter; Constant Skirt Gain","url":"/q/develop-0.99/reference/biquad/bandpass_csg.html","urlType":"internal"},{"content":"Band Pass Filter; Constant Peak Gain","url":"/q/develop-0.99/reference/biquad/bandpass_cpg.html","urlType":"internal"},{"content":"All Pass Filter","url":"/q/develop-0.99/reference/biquad/allpass.html","urlType":"internal"},{"content":"Notch Filter","url":"/q/develop-0.99/reference/biquad/notch.html","urlType":"internal"},{"content":"Peaking Filter","url":"/q/develop-0.99/reference/biquad/peaking.html","urlType":"internal"},{"content":"Low Shelf Filter","url":"/q/develop-0.99/reference/biquad/lowshelf.html","urlType":"internal"},{"content":"High Shelf Filter","url":"/q/develop-0.99/reference/biquad/highshelf.html","urlType":"internal"}]},{"content":"Envelope","url":"/q/develop-0.99/reference/envelope.html","urlType":"internal","items":[{"content":"Peak Envelope Follower","url":"/q/develop-0.99/reference/envelope/peak_envelope_follower.html","urlType":"internal"},{"content":"AR Envelope Follower","url":"/q/develop-0.99/reference/envelope/ar_envelope_follower.html","urlType":"internal"},{"content":"Fast Envelope Follower","url":"/q/develop-0.99/reference/envelope/fast_envelope_follower.html","urlType":"internal"},{"content":"Fast Averaging Envelope Follower","url":"/q/develop-0.99/reference/envelope/fast_ave_envelope_follower.html","urlType":"internal"},{"content":"Fast RMS Envelope Follower","url":"/q/develop-0.99/reference/envelope/fast_rms_envelope_follower.html","urlType":"internal"}]},{"content":"Dynamic","url":"/q/develop-0.99/reference/dynamic.html","urlType":"internal","items":[{"content":"Compressor","url":"/q/develop-0.99/reference/dynamic/compressor.html","urlType":"internal"},{"content":"Soft Knee Compressor","url":"/q/develop-0.99/reference/dynamic/soft_knee_compressor.html","urlType":"internal"},{"content":"Expander","url":"/q/develop-0.99/reference/dynamic/expander.html","urlType":"internal"},{"content":"AGC","url":"/q/develop-0.99/reference/dynamic/agc.html","urlType":"internal"}]},{"content":"Miscellaneous","items":[{"content":"Delay","url":"/q/develop-0.99/reference/misc/delay.html","urlType":"internal"},{"content":"Moving Sum","url":"/q/develop-0.99/reference/misc/moving_sum.html","urlType":"internal"},{"content":"Moving Average","url":"/q/develop-0.99/reference/misc/moving_average.html","urlType":"internal"},{"content":"Noise Gate","url":"/q/develop-0.99/reference/misc/noise_gate.html","urlType":"internal"},{"content":"Onset Gate","url":"/q/develop-0.99/reference/misc/onset_gate.html","urlType":"internal"},{"content":"One Pole Low Pass","url":"/q/develop-0.99/reference/misc/one_pole_lowpass.html","urlType":"internal"},{"content":"DC Block","url":"/q/develop-0.99/reference/misc/dc_block.html","urlType":"internal"}]},{"content":"Synthesizers","url":"/q/develop-0.99/reference/synth.html","urlType":"internal","items":[{"content":"Sine Wave Oscillator","url":"/q/develop-0.99/reference/synth/sin_osc.html","urlType":"internal"},{"content":"Saw Wave Oscillator","url":"/q/develop-0.99/reference/synth/saw_osc.html","urlType":"internal"},{"content":"Square Wave Oscillator","url":"/q/develop-0.99/reference/synth/square_osc.html","urlType":"internal"},{"content":"Pulse Wave Oscillator","url":"/q/develop-0.99/reference/synth/pulse_osc.html","urlType":"internal"},{"content":"Triangle Wave Oscillator","url":"/q/develop-0.99/reference/synth/triangle_osc.html","urlType":"internal"},{"content":"Sine Cosine Generator","url":"/q/develop-0.99/reference/synth/sin_cos_gen.html","urlType":"internal"},{"content":"Blackman Window Generator","url":"/q/develop-0.99/reference/synth/blackman_gen.html","urlType":"internal"},{"content":"Hann Window Generator","url":"/q/develop-0.99/reference/synth/hann_gen.html","urlType":"internal"},{"content":"Hamming Window Generator","url":"/q/develop-0.99/reference/synth/hamming_gen.html","urlType":"internal"},{"content":"Linear Ramp Generator","url":"/q/develop-0.99/reference/synth/linear_gen.html","urlType":"internal"},{"content":"Exponential Ramp Generator","url":"/q/develop-0.99/reference/synth/exponential_gen.html","urlType":"internal"},{"content":"Envelope Generator","url":"/q/develop-0.99/reference/synth/envelope_gen.html","urlType":"internal"}]},{"content":"Support","items":[{"content":"Basic Concepts","url":"/q/develop-0.99/reference/support/basic_concepts.html","urlType":"internal"},{"content":"Multi Buffer","url":"/q/develop-0.99/reference/support/multi_buffer.html","urlType":"internal"},{"content":"Audio Stream","url":"/q/develop-0.99/reference/support/audio_stream.html","urlType":"internal"},{"content":"MIDI Messages","url":"/q/develop-0.99/reference/support/midi_messages.html","urlType":"internal"},{"content":"MIDI Processor","url":"/q/develop-0.99/reference/support/midi_processor.html","urlType":"internal"}]},{"content":"Utility","items":[{"content":"Ring Buffer","url":"/q/develop-0.99/reference/utility/ring_buffer.html","urlType":"internal"},{"content":"Fractional Ring Buffer","url":"/q/develop-0.99/reference/utility/fractional_ring_buffer.html","urlType":"internal"}]},{"content":"Audio MIDI I/O","url":"/q/develop-0.99/reference/q_io.html","urlType":"internal","items":[{"content":"Audio Device","url":"/q/develop-0.99/reference/q_io/audio_device.html","urlType":"internal"},{"content":"Audio Stream","url":"/q/develop-0.99/reference/q_io/audio_stream.html","urlType":"internal"},{"content":"Audio File","url":"/q/develop-0.99/reference/q_io/audio_file.html","urlType":"internal"},{"content":"MIDI Device","url":"/q/develop-0.99/reference/q_io/midi_device.html","urlType":"internal"},{"content":"MIDI Stream","url":"/q/develop-0.99/reference/q_io/midi_stream.html","urlType":"internal"}]}]}],"root":true,"order":0}]}}}})